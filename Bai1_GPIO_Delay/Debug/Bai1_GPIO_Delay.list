
Bai1_GPIO_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008690  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003154  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b974  0800b974  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b974  0800b974  0001b974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b97c  0800b97c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000002fc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cdec  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e48  00000000  00000000  0003ce98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  00040ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001478  00000000  00000000  000422f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251fe  00000000  00000000  00043770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5a7  00000000  00000000  0006896e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d49e1  00000000  00000000  00084f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001598f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000638c  00000000  00000000  0015994c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008808 	.word	0x08008808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08008808 	.word	0x08008808

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2108      	movs	r1, #8
 8000572:	482f      	ldr	r0, [pc, #188]	; (8000630 <button_Scan+0xc8>)
 8000574:	f003 f9a4 	bl	80038c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2108      	movs	r1, #8
 800057c:	482c      	ldr	r0, [pc, #176]	; (8000630 <button_Scan+0xc8>)
 800057e:	f003 f99f 	bl	80038c0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000582:	230a      	movs	r3, #10
 8000584:	2202      	movs	r2, #2
 8000586:	492b      	ldr	r1, [pc, #172]	; (8000634 <button_Scan+0xcc>)
 8000588:	482b      	ldr	r0, [pc, #172]	; (8000638 <button_Scan+0xd0>)
 800058a:	f004 ff9e 	bl	80054ca <HAL_SPI_Receive>
	  int button_index = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e03f      	b.n	800061e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db06      	blt.n	80005b2 <button_Scan+0x4a>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	dc03      	bgt.n	80005b2 <button_Scan+0x4a>
			  button_index = i + 4;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3304      	adds	r3, #4
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e018      	b.n	80005e4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	dd07      	ble.n	80005c8 <button_Scan+0x60>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	dc04      	bgt.n	80005c8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f1c3 0307 	rsb	r3, r3, #7
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	e00d      	b.n	80005e4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	dd06      	ble.n	80005dc <button_Scan+0x74>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0b      	cmp	r3, #11
 80005d2:	dc03      	bgt.n	80005dc <button_Scan+0x74>
			  button_index = i + 4;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3304      	adds	r3, #4
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e003      	b.n	80005e4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f1c3 0317 	rsb	r3, r3, #23
 80005e2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <button_Scan+0xcc>)
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	897b      	ldrh	r3, [r7, #10]
 80005ea:	4013      	ands	r3, r2
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d005      	beq.n	80005fe <button_Scan+0x96>
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <button_Scan+0xd4>)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2100      	movs	r1, #0
 80005f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005fc:	e009      	b.n	8000612 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <button_Scan+0xd4>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000606:	3301      	adds	r3, #1
 8000608:	b299      	uxth	r1, r3
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <button_Scan+0xd4>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000612:	897b      	ldrh	r3, [r7, #10]
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	ddbc      	ble.n	800059e <button_Scan+0x36>
	  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020c00 	.word	0x40020c00
 8000634:	20000098 	.word	0x20000098
 8000638:	200001ec 	.word	0x200001ec
 800063c:	200000dc 	.word	0x200000dc

08000640 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000644:	201e      	movs	r0, #30
 8000646:	f002 fd17 	bl	8003078 <DEC2BCD>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <ds3231_init+0x80>)
 8000650:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000652:	2016      	movs	r0, #22
 8000654:	f002 fd10 	bl	8003078 <DEC2BCD>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <ds3231_init+0x80>)
 800065e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000660:	2015      	movs	r0, #21
 8000662:	f002 fd09 	bl	8003078 <DEC2BCD>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <ds3231_init+0x80>)
 800066c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800066e:	2006      	movs	r0, #6
 8000670:	f002 fd02 	bl	8003078 <DEC2BCD>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <ds3231_init+0x80>)
 800067a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800067c:	200f      	movs	r0, #15
 800067e:	f002 fcfb 	bl	8003078 <DEC2BCD>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <ds3231_init+0x80>)
 8000688:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800068a:	2009      	movs	r0, #9
 800068c:	f002 fcf4 	bl	8003078 <DEC2BCD>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <ds3231_init+0x80>)
 8000696:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000698:	2017      	movs	r0, #23
 800069a:	f002 fced 	bl	8003078 <DEC2BCD>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <ds3231_init+0x80>)
 80006a4:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006a6:	2332      	movs	r3, #50	; 0x32
 80006a8:	2203      	movs	r2, #3
 80006aa:	21d0      	movs	r1, #208	; 0xd0
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <ds3231_init+0x84>)
 80006ae:	f003 fd85 	bl	80041bc <HAL_I2C_IsDeviceReady>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d000      	beq.n	80006ba <ds3231_init+0x7a>
		while(1);
 80006b8:	e7fe      	b.n	80006b8 <ds3231_init+0x78>
	};
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000104 	.word	0x20000104
 80006c4:	2000015c 	.word	0x2000015c

080006c8 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af04      	add	r7, sp, #16
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fccc 	bl	8003078 <DEC2BCD>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	230a      	movs	r3, #10
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2301      	movs	r3, #1
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	f107 030f 	add.w	r3, r7, #15
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	21d0      	movs	r1, #208	; 0xd0
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <ds3231_Write+0x40>)
 80006fc:	f003 fa3e 	bl	8003b7c <HAL_I2C_Mem_Write>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000015c 	.word	0x2000015c

0800070c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000712:	230a      	movs	r3, #10
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	2307      	movs	r3, #7
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <ds3231_ReadTime+0xa4>)
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	2200      	movs	r2, #0
 8000722:	21d0      	movs	r1, #208	; 0xd0
 8000724:	4823      	ldr	r0, [pc, #140]	; (80007b4 <ds3231_ReadTime+0xa8>)
 8000726:	f003 fb23 	bl	8003d70 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <ds3231_ReadTime+0xa4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fc88 	bl	8003044 <BCD2DEC>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <ds3231_ReadTime+0xac>)
 800073a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <ds3231_ReadTime+0xa4>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fc7f 	bl	8003044 <BCD2DEC>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <ds3231_ReadTime+0xb0>)
 800074c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fc76 	bl	8003044 <BCD2DEC>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <ds3231_ReadTime+0xb4>)
 800075e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000762:	78db      	ldrb	r3, [r3, #3]
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fc6d 	bl	8003044 <BCD2DEC>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <ds3231_ReadTime+0xb8>)
 8000770:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fc64 	bl	8003044 <BCD2DEC>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <ds3231_ReadTime+0xbc>)
 8000782:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fc5b 	bl	8003044 <BCD2DEC>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <ds3231_ReadTime+0xc0>)
 8000794:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000798:	799b      	ldrb	r3, [r3, #6]
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fc52 	bl	8003044 <BCD2DEC>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <ds3231_ReadTime+0xc4>)
 80007a6:	701a      	strb	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000104 	.word	0x20000104
 80007b4:	2000015c 	.word	0x2000015c
 80007b8:	200000fc 	.word	0x200000fc
 80007bc:	200000fe 	.word	0x200000fe
 80007c0:	20000101 	.word	0x20000101
 80007c4:	20000100 	.word	0x20000100
 80007c8:	200000ff 	.word	0x200000ff
 80007cc:	20000102 	.word	0x20000102
 80007d0:	200000fd 	.word	0x200000fd

080007d4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000802:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000806:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000808:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_FSMC_Init+0xec>)
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <MX_FSMC_Init+0xf0>)
 800080c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_FSMC_Init+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000822:	2210      	movs	r2, #16
 8000824:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_FSMC_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_FSMC_Init+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_FSMC_Init+0xec>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_FSMC_Init+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000862:	2200      	movs	r2, #0
 8000864:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000866:	230f      	movs	r3, #15
 8000868:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800086a:	230f      	movs	r3, #15
 800086c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800086e:	233c      	movs	r3, #60	; 0x3c
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000876:	2310      	movs	r3, #16
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800087a:	2311      	movs	r3, #17
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000882:	2308      	movs	r3, #8
 8000884:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000886:	230f      	movs	r3, #15
 8000888:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800088a:	2309      	movs	r3, #9
 800088c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000892:	2310      	movs	r3, #16
 8000894:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000896:	2311      	movs	r3, #17
 8000898:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800089e:	463a      	mov	r2, r7
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_FSMC_Init+0xec>)
 80008a8:	f005 f9f2 	bl	8005c90 <HAL_SRAM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008b2:	f001 fffd 	bl	80028b0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008b6:	bf00      	nop
 80008b8:	3738      	adds	r7, #56	; 0x38
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000010c 	.word	0x2000010c
 80008c4:	a0000104 	.word	0xa0000104

080008c8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <HAL_FSMC_MspInit+0x88>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d131      	bne.n	8000948 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <HAL_FSMC_MspInit+0x88>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_FSMC_MspInit+0x8c>)
 80008f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <HAL_FSMC_MspInit+0x8c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6393      	str	r3, [r2, #56]	; 0x38
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <HAL_FSMC_MspInit+0x8c>)
 80008fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000906:	f64f 7388 	movw	r3, #65416	; 0xff88
 800090a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000918:	230c      	movs	r3, #12
 800091a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <HAL_FSMC_MspInit+0x90>)
 8000922:	f002 fe31 	bl	8003588 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000926:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800092a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000938:	230c      	movs	r3, #12
 800093a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <HAL_FSMC_MspInit+0x94>)
 8000942:	f002 fe21 	bl	8003588 <HAL_GPIO_Init>
 8000946:	e000      	b.n	800094a <HAL_FSMC_MspInit+0x82>
    return;
 8000948:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000009c 	.word	0x2000009c
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020c00 	.word	0x40020c00

08000960 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000968:	f7ff ffae 	bl	80008c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b77      	ldr	r3, [pc, #476]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a76      	ldr	r2, [pc, #472]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b74      	ldr	r3, [pc, #464]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b70      	ldr	r3, [pc, #448]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a6f      	ldr	r2, [pc, #444]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b6d      	ldr	r3, [pc, #436]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b69      	ldr	r3, [pc, #420]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a68      	ldr	r2, [pc, #416]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b66      	ldr	r3, [pc, #408]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b62      	ldr	r3, [pc, #392]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a61      	ldr	r2, [pc, #388]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b5f      	ldr	r3, [pc, #380]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b5b      	ldr	r3, [pc, #364]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a5a      	ldr	r2, [pc, #360]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b58      	ldr	r3, [pc, #352]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a53      	ldr	r2, [pc, #332]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b51      	ldr	r3, [pc, #324]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a4c      	ldr	r2, [pc, #304]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2170      	movs	r1, #112	; 0x70
 8000a52:	4847      	ldr	r0, [pc, #284]	; (8000b70 <MX_GPIO_Init+0x1fc>)
 8000a54:	f002 ff34 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000a5e:	4845      	ldr	r0, [pc, #276]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000a60:	f002 ff2e 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000a6a:	4843      	ldr	r0, [pc, #268]	; (8000b78 <MX_GPIO_Init+0x204>)
 8000a6c:	f002 ff28 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	4841      	ldr	r0, [pc, #260]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000a78:	f002 ff22 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2108      	movs	r1, #8
 8000a80:	483f      	ldr	r0, [pc, #252]	; (8000b80 <MX_GPIO_Init+0x20c>)
 8000a82:	f002 ff1d 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a86:	2370      	movs	r3, #112	; 0x70
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4834      	ldr	r0, [pc, #208]	; (8000b70 <MX_GPIO_Init+0x1fc>)
 8000a9e:	f002 fd73 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000aa2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	482e      	ldr	r0, [pc, #184]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000abc:	f002 fd64 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ac0:	23c0      	movs	r3, #192	; 0xc0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482a      	ldr	r0, [pc, #168]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000ad4:	f002 fd58 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin|T_PEN_Pin|T_MISO_Pin;
 8000ad8:	f241 1330 	movw	r3, #4400	; 0x1130
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4821      	ldr	r0, [pc, #132]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000aee:	f002 fd4b 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CLK_Pin;
 8000af2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481b      	ldr	r0, [pc, #108]	; (8000b78 <MX_GPIO_Init+0x204>)
 8000b0c:	f002 fd3c 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4815      	ldr	r0, [pc, #84]	; (8000b78 <MX_GPIO_Init+0x204>)
 8000b24:	f002 fd30 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000b42:	f002 fd21 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b46:	2308      	movs	r3, #8
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x20c>)
 8000b5e:	f002 fd13 	bl	8003588 <HAL_GPIO_Init>

}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40021800 	.word	0x40021800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_I2C1_Init+0x54>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x58>)
 8000b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bc2:	f002 fe97 	bl	80038f4 <HAL_I2C_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bcc:	f001 fe70 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000015c 	.word	0x2000015c
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	000186a0 	.word	0x000186a0

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_I2C_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_I2C_MspInit+0x8c>)
 8000c3a:	f002 fca5 	bl	8003588 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <LCD_WR_REG+0x1c>)
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	8013      	strh	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	600ffffe 	.word	0x600ffffe

08000c90 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <LCD_WR_DATA+0x1c>)
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	8053      	strh	r3, [r2, #2]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	600ffffe 	.word	0x600ffffe

08000cb0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <LCD_RD_DATA+0x20>)
 8000cb8:	885b      	ldrh	r3, [r3, #2]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	b29b      	uxth	r3, r3
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	600ffffe 	.word	0x600ffffe

08000cd4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80bb      	strh	r3, [r7, #4]
 8000cea:	460b      	mov	r3, r1
 8000cec:	807b      	strh	r3, [r7, #2]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000cf2:	202a      	movs	r0, #42	; 0x2a
 8000cf4:	f7ff ffbc 	bl	8000c70 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ffc6 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffc0 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffba 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ffb4 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d28:	202b      	movs	r0, #43	; 0x2b
 8000d2a:	f7ff ffa1 	bl	8000c70 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d2e:	88bb      	ldrh	r3, [r7, #4]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffab 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ffa5 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d46:	883b      	ldrh	r3, [r7, #0]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff9f 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff99 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d5e:	202c      	movs	r0, #44	; 0x2c
 8000d60:	f7ff ff86 	bl	8000c70 <LCD_WR_REG>
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <lcd_Clear+0x60>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <lcd_Clear+0x60>)
 8000d80:	885b      	ldrh	r3, [r3, #2]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ffa3 	bl	8000cd4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	e011      	b.n	8000db8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	81bb      	strh	r3, [r7, #12]
 8000d98:	e006      	b.n	8000da8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff77 	bl	8000c90 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <lcd_Clear+0x60>)
 8000daa:	885b      	ldrh	r3, [r3, #2]
 8000dac:	89ba      	ldrh	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f3      	bcc.n	8000d9a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	3301      	adds	r3, #1
 8000db6:	81fb      	strh	r3, [r7, #14]
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <lcd_Clear+0x60>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3e8      	bcc.n	8000d94 <lcd_Clear+0x28>
		}
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200001b0 	.word	0x200001b0

08000dd0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	80bb      	strh	r3, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	88fa      	ldrh	r2, [r7, #6]
 8000de6:	88b9      	ldrh	r1, [r7, #4]
 8000de8:	88f8      	ldrh	r0, [r7, #6]
 8000dea:	f7ff ff73 	bl	8000cd4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff4d 	bl	8000c90 <LCD_WR_DATA>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	70fb      	strb	r3, [r7, #3]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e2a:	085b      	lsrs	r3, r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	08db      	lsrs	r3, r3, #3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	fb12 f303 	smulbb	r3, r2, r3
 8000e56:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	3b20      	subs	r3, #32
 8000e5c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29c      	uxth	r4, r3
 8000e6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	88b9      	ldrh	r1, [r7, #4]
 8000e7e:	88f8      	ldrh	r0, [r7, #6]
 8000e80:	4622      	mov	r2, r4
 8000e82:	f7ff ff27 	bl	8000cd4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	827b      	strh	r3, [r7, #18]
 8000e8a:	e07a      	b.n	8000f82 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e90:	2b0c      	cmp	r3, #12
 8000e92:	d028      	beq.n	8000ee6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000e94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d108      	bne.n	8000eae <lcd_ShowChar+0xae>
 8000e9c:	78fa      	ldrb	r2, [r7, #3]
 8000e9e:	8a7b      	ldrh	r3, [r7, #18]
 8000ea0:	493c      	ldr	r1, [pc, #240]	; (8000f94 <lcd_ShowChar+0x194>)
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	440a      	add	r2, r1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	75fb      	strb	r3, [r7, #23]
 8000eac:	e01b      	b.n	8000ee6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000eae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eb2:	2b18      	cmp	r3, #24
 8000eb4:	d10b      	bne.n	8000ece <lcd_ShowChar+0xce>
 8000eb6:	78fa      	ldrb	r2, [r7, #3]
 8000eb8:	8a79      	ldrh	r1, [r7, #18]
 8000eba:	4837      	ldr	r0, [pc, #220]	; (8000f98 <lcd_ShowChar+0x198>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4403      	add	r3, r0
 8000ec6:	440b      	add	r3, r1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	75fb      	strb	r3, [r7, #23]
 8000ecc:	e00b      	b.n	8000ee6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000ece:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ed2:	2b20      	cmp	r3, #32
 8000ed4:	d15a      	bne.n	8000f8c <lcd_ShowChar+0x18c>
 8000ed6:	78fa      	ldrb	r2, [r7, #3]
 8000ed8:	8a7b      	ldrh	r3, [r7, #18]
 8000eda:	4930      	ldr	r1, [pc, #192]	; (8000f9c <lcd_ShowChar+0x19c>)
 8000edc:	0192      	lsls	r2, r2, #6
 8000ede:	440a      	add	r2, r1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75bb      	strb	r3, [r7, #22]
 8000eea:	e044      	b.n	8000f76 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000eec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d120      	bne.n	8000f36 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ef4:	7dfa      	ldrb	r2, [r7, #23]
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
 8000ef8:	fa42 f303 	asr.w	r3, r2, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <lcd_ShowChar+0x10e>
 8000f04:	883b      	ldrh	r3, [r7, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fec2 	bl	8000c90 <LCD_WR_DATA>
 8000f0c:	e003      	b.n	8000f16 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff febd 	bl	8000c90 <LCD_WR_DATA>
				m++;
 8000f16:	7d7b      	ldrb	r3, [r7, #21]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f1c:	7d7b      	ldrb	r3, [r7, #21]
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f24:	fb02 f201 	mul.w	r2, r2, r1
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d11f      	bne.n	8000f70 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	757b      	strb	r3, [r7, #21]
					break;
 8000f34:	e022      	b.n	8000f7c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f36:	7dfa      	ldrb	r2, [r7, #23]
 8000f38:	7dbb      	ldrb	r3, [r7, #22]
 8000f3a:	fa42 f303 	asr.w	r3, r2, r3
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <lcd_ShowChar+0x152>
 8000f46:	883a      	ldrh	r2, [r7, #0]
 8000f48:	88b9      	ldrh	r1, [r7, #4]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff3f 	bl	8000dd0 <lcd_DrawPoint>
				x++;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	3301      	adds	r3, #1
 8000f56:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d105      	bne.n	8000f70 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f64:	8a3b      	ldrh	r3, [r7, #16]
 8000f66:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	80bb      	strh	r3, [r7, #4]
					break;
 8000f6e:	e005      	b.n	8000f7c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f70:	7dbb      	ldrb	r3, [r7, #22]
 8000f72:	3301      	adds	r3, #1
 8000f74:	75bb      	strb	r3, [r7, #22]
 8000f76:	7dbb      	ldrb	r3, [r7, #22]
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	d9b7      	bls.n	8000eec <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f7c:	8a7b      	ldrh	r3, [r7, #18]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	827b      	strh	r3, [r7, #18]
 8000f82:	8a7a      	ldrh	r2, [r7, #18]
 8000f84:	89bb      	ldrh	r3, [r7, #12]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d380      	bcc.n	8000e8c <lcd_ShowChar+0x8c>
 8000f8a:	e000      	b.n	8000f8e <lcd_ShowChar+0x18e>
		else return;
 8000f8c:	bf00      	nop
				}
			}
		}
	}
}
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	08008944 	.word	0x08008944
 8000f98:	08008f34 	.word	0x08008f34
 8000f9c:	0800a104 	.word	0x0800a104

08000fa0 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fb4:	e004      	b.n	8000fc0 <mypow+0x20>
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	71ba      	strb	r2, [r7, #6]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f5      	bne.n	8000fb6 <mypow+0x16>
	return result;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	80fb      	strh	r3, [r7, #6]
 8000fea:	4603      	mov	r3, r0
 8000fec:	80bb      	strh	r3, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e059      	b.n	80010bc <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001008:	887c      	ldrh	r4, [r7, #2]
 800100a:	787a      	ldrb	r2, [r7, #1]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4619      	mov	r1, r3
 8001018:	200a      	movs	r0, #10
 800101a:	f7ff ffc1 	bl	8000fa0 <mypow>
 800101e:	4603      	mov	r3, r0
 8001020:	fbb4 f1f3 	udiv	r1, r4, r3
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <lcd_ShowIntNum+0xf8>)
 8001026:	fba3 2301 	umull	r2, r3, r3, r1
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	1aca      	subs	r2, r1, r3
 8001036:	4613      	mov	r3, r2
 8001038:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d121      	bne.n	8001084 <lcd_ShowIntNum+0xac>
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	787b      	ldrb	r3, [r7, #1]
 8001044:	3b01      	subs	r3, #1
 8001046:	429a      	cmp	r2, r3
 8001048:	da1c      	bge.n	8001084 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d117      	bne.n	8001080 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	b29a      	uxth	r2, r3
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	b29b      	uxth	r3, r3
 8001058:	fb12 f303 	smulbb	r3, r2, r3
 800105c:	b29a      	uxth	r2, r3
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	4413      	add	r3, r2
 8001062:	b298      	uxth	r0, r3
 8001064:	8c3a      	ldrh	r2, [r7, #32]
 8001066:	88b9      	ldrh	r1, [r7, #4]
 8001068:	2300      	movs	r3, #0
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4613      	mov	r3, r2
 8001078:	2220      	movs	r2, #32
 800107a:	f7ff fec1 	bl	8000e00 <lcd_ShowChar>
				continue;
 800107e:	e01a      	b.n	80010b6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001080:	2301      	movs	r3, #1
 8001082:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	b29a      	uxth	r2, r3
 8001088:	7b7b      	ldrb	r3, [r7, #13]
 800108a:	b29b      	uxth	r3, r3
 800108c:	fb12 f303 	smulbb	r3, r2, r3
 8001090:	b29a      	uxth	r2, r3
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4413      	add	r3, r2
 8001096:	b298      	uxth	r0, r3
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	3330      	adds	r3, #48	; 0x30
 800109c:	b2da      	uxtb	r2, r3
 800109e:	8c3c      	ldrh	r4, [r7, #32]
 80010a0:	88b9      	ldrh	r1, [r7, #4]
 80010a2:	2300      	movs	r3, #0
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4623      	mov	r3, r4
 80010b2:	f7ff fea5 	bl	8000e00 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	787b      	ldrb	r3, [r7, #1]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3a1      	bcc.n	8001008 <lcd_ShowIntNum+0x30>
	}
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	cccccccd 	.word	0xcccccccd

080010d4 <lcd_ShowString>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b08b      	sub	sp, #44	; 0x2c
 80010d8:	af04      	add	r7, sp, #16
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	461a      	mov	r2, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	81fb      	strh	r3, [r7, #14]
 80010e2:	460b      	mov	r3, r1
 80010e4:	81bb      	strh	r3, [r7, #12]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80010f2:	e048      	b.n	8001186 <lcd_ShowString+0xb2>
		if (!bHz) {
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d145      	bne.n	8001186 <lcd_ShowString+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80010fa:	89fa      	ldrh	r2, [r7, #14]
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <lcd_ShowString+0xc4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	1acb      	subs	r3, r1, r3
 800110c:	429a      	cmp	r2, r3
 800110e:	dc3f      	bgt.n	8001190 <lcd_ShowString+0xbc>
 8001110:	89ba      	ldrh	r2, [r7, #12]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <lcd_ShowString+0xc4>)
 8001114:	885b      	ldrh	r3, [r3, #2]
 8001116:	4619      	mov	r1, r3
 8001118:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800111c:	1acb      	subs	r3, r1, r3
 800111e:	429a      	cmp	r2, r3
 8001120:	dc36      	bgt.n	8001190 <lcd_ShowString+0xbc>
				return;
			if (*str > 0x80)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b80      	cmp	r3, #128	; 0x80
 8001128:	d902      	bls.n	8001130 <lcd_ShowString+0x5c>
				bHz = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
 800112e:	e02a      	b.n	8001186 <lcd_ShowString+0xb2>
			else {
				if (*str == 0x0D) {
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b0d      	cmp	r3, #13
 8001136:	d10b      	bne.n	8001150 <lcd_ShowString+0x7c>
					y += sizey;
 8001138:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800113c:	b29a      	uxth	r2, r3
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001144:	8abb      	ldrh	r3, [r7, #20]
 8001146:	81fb      	strh	r3, [r7, #14]
					str++;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	e017      	b.n	8001180 <lcd_ShowString+0xac>
				} else {
					lcd_ShowChar(x, y, *str, fc, bc, sizey, mode);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	88fc      	ldrh	r4, [r7, #6]
 8001156:	89b9      	ldrh	r1, [r7, #12]
 8001158:	89f8      	ldrh	r0, [r7, #14]
 800115a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	4623      	mov	r3, r4
 800116c:	f7ff fe48 	bl	8000e00 <lcd_ShowChar>
					x += sizey / 2;
 8001170:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001174:	085b      	lsrs	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	4413      	add	r3, r2
 800117e:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1b2      	bne.n	80010f4 <lcd_ShowString+0x20>
 800118e:	e000      	b.n	8001192 <lcd_ShowString+0xbe>
				return;
 8001190:	bf00      	nop
			}
		}
	}
}
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	200001b0 	.word	0x200001b0

0800119c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <lcd_SetDir+0x44>)
 80011b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011bc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <lcd_SetDir+0x44>)
 80011c0:	22f0      	movs	r2, #240	; 0xf0
 80011c2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011c4:	e006      	b.n	80011d4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <lcd_SetDir+0x44>)
 80011c8:	22f0      	movs	r2, #240	; 0xf0
 80011ca:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <lcd_SetDir+0x44>)
 80011ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011d2:	805a      	strh	r2, [r3, #2]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	200001b0 	.word	0x200001b0

080011e4 <lcd_init>:


void lcd_init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ee:	48aa      	ldr	r0, [pc, #680]	; (8001498 <lcd_init+0x2b4>)
 80011f0:	f002 fb66 	bl	80038c0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f8:	f001 fffe 	bl	80031f8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001202:	48a5      	ldr	r0, [pc, #660]	; (8001498 <lcd_init+0x2b4>)
 8001204:	f002 fb5c 	bl	80038c0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120c:	f001 fff4 	bl	80031f8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ffc3 	bl	800119c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001216:	20d3      	movs	r0, #211	; 0xd3
 8001218:	f7ff fd2a 	bl	8000c70 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800121c:	f7ff fd48 	bl	8000cb0 <LCD_RD_DATA>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b9d      	ldr	r3, [pc, #628]	; (800149c <lcd_init+0x2b8>)
 8001226:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001228:	f7ff fd42 	bl	8000cb0 <LCD_RD_DATA>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b9a      	ldr	r3, [pc, #616]	; (800149c <lcd_init+0x2b8>)
 8001232:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001234:	f7ff fd3c 	bl	8000cb0 <LCD_RD_DATA>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b97      	ldr	r3, [pc, #604]	; (800149c <lcd_init+0x2b8>)
 800123e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001240:	4b96      	ldr	r3, [pc, #600]	; (800149c <lcd_init+0x2b8>)
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b94      	ldr	r3, [pc, #592]	; (800149c <lcd_init+0x2b8>)
 800124a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800124c:	f7ff fd30 	bl	8000cb0 <LCD_RD_DATA>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b91      	ldr	r3, [pc, #580]	; (800149c <lcd_init+0x2b8>)
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b8f      	ldr	r3, [pc, #572]	; (800149c <lcd_init+0x2b8>)
 800125e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001260:	20cf      	movs	r0, #207	; 0xcf
 8001262:	f7ff fd05 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fd12 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800126c:	20c1      	movs	r0, #193	; 0xc1
 800126e:	f7ff fd0f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001272:	2030      	movs	r0, #48	; 0x30
 8001274:	f7ff fd0c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001278:	20ed      	movs	r0, #237	; 0xed
 800127a:	f7ff fcf9 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800127e:	2064      	movs	r0, #100	; 0x64
 8001280:	f7ff fd06 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001284:	2003      	movs	r0, #3
 8001286:	f7ff fd03 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800128a:	2012      	movs	r0, #18
 800128c:	f7ff fd00 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001290:	2081      	movs	r0, #129	; 0x81
 8001292:	f7ff fcfd 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001296:	20e8      	movs	r0, #232	; 0xe8
 8001298:	f7ff fcea 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800129c:	2085      	movs	r0, #133	; 0x85
 800129e:	f7ff fcf7 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012a2:	2010      	movs	r0, #16
 80012a4:	f7ff fcf4 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80012a8:	207a      	movs	r0, #122	; 0x7a
 80012aa:	f7ff fcf1 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80012ae:	20cb      	movs	r0, #203	; 0xcb
 80012b0:	f7ff fcde 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012b4:	2039      	movs	r0, #57	; 0x39
 80012b6:	f7ff fceb 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80012ba:	202c      	movs	r0, #44	; 0x2c
 80012bc:	f7ff fce8 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fce5 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012c6:	2034      	movs	r0, #52	; 0x34
 80012c8:	f7ff fce2 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fcdf 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012d2:	20f7      	movs	r0, #247	; 0xf7
 80012d4:	f7ff fccc 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012d8:	2020      	movs	r0, #32
 80012da:	f7ff fcd9 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012de:	20ea      	movs	r0, #234	; 0xea
 80012e0:	f7ff fcc6 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fcd3 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fcd0 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012f0:	20c0      	movs	r0, #192	; 0xc0
 80012f2:	f7ff fcbd 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012f6:	201b      	movs	r0, #27
 80012f8:	f7ff fcca 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012fc:	20c1      	movs	r0, #193	; 0xc1
 80012fe:	f7ff fcb7 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fcc4 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001308:	20c5      	movs	r0, #197	; 0xc5
 800130a:	f7ff fcb1 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800130e:	2030      	movs	r0, #48	; 0x30
 8001310:	f7ff fcbe 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001314:	2030      	movs	r0, #48	; 0x30
 8001316:	f7ff fcbb 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800131a:	20c7      	movs	r0, #199	; 0xc7
 800131c:	f7ff fca8 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001320:	20b7      	movs	r0, #183	; 0xb7
 8001322:	f7ff fcb5 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001326:	2036      	movs	r0, #54	; 0x36
 8001328:	f7ff fca2 	bl	8000c70 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800132c:	2008      	movs	r0, #8
 800132e:	f7ff fcaf 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001332:	203a      	movs	r0, #58	; 0x3a
 8001334:	f7ff fc9c 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001338:	2055      	movs	r0, #85	; 0x55
 800133a:	f7ff fca9 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800133e:	20b1      	movs	r0, #177	; 0xb1
 8001340:	f7ff fc96 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fca3 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800134a:	201a      	movs	r0, #26
 800134c:	f7ff fca0 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001350:	20b6      	movs	r0, #182	; 0xb6
 8001352:	f7ff fc8d 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001356:	200a      	movs	r0, #10
 8001358:	f7ff fc9a 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800135c:	20a2      	movs	r0, #162	; 0xa2
 800135e:	f7ff fc97 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001362:	20f2      	movs	r0, #242	; 0xf2
 8001364:	f7ff fc84 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fc91 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800136e:	2026      	movs	r0, #38	; 0x26
 8001370:	f7ff fc7e 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fc8b 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800137a:	20e0      	movs	r0, #224	; 0xe0
 800137c:	f7ff fc78 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001380:	200f      	movs	r0, #15
 8001382:	f7ff fc85 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001386:	202a      	movs	r0, #42	; 0x2a
 8001388:	f7ff fc82 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800138c:	2028      	movs	r0, #40	; 0x28
 800138e:	f7ff fc7f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001392:	2008      	movs	r0, #8
 8001394:	f7ff fc7c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001398:	200e      	movs	r0, #14
 800139a:	f7ff fc79 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800139e:	2008      	movs	r0, #8
 80013a0:	f7ff fc76 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80013a4:	2054      	movs	r0, #84	; 0x54
 80013a6:	f7ff fc73 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80013aa:	20a9      	movs	r0, #169	; 0xa9
 80013ac:	f7ff fc70 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80013b0:	2043      	movs	r0, #67	; 0x43
 80013b2:	f7ff fc6d 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80013b6:	200a      	movs	r0, #10
 80013b8:	f7ff fc6a 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013bc:	200f      	movs	r0, #15
 80013be:	f7ff fc67 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fc64 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fc61 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fc5e 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fc5b 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013da:	20e1      	movs	r0, #225	; 0xe1
 80013dc:	f7ff fc48 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fc55 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013e6:	2015      	movs	r0, #21
 80013e8:	f7ff fc52 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013ec:	2017      	movs	r0, #23
 80013ee:	f7ff fc4f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f7ff fc4c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013f8:	2011      	movs	r0, #17
 80013fa:	f7ff fc49 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013fe:	2006      	movs	r0, #6
 8001400:	f7ff fc46 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001404:	202b      	movs	r0, #43	; 0x2b
 8001406:	f7ff fc43 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800140a:	2056      	movs	r0, #86	; 0x56
 800140c:	f7ff fc40 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001410:	203c      	movs	r0, #60	; 0x3c
 8001412:	f7ff fc3d 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001416:	2005      	movs	r0, #5
 8001418:	f7ff fc3a 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800141c:	2010      	movs	r0, #16
 800141e:	f7ff fc37 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001422:	200f      	movs	r0, #15
 8001424:	f7ff fc34 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001428:	203f      	movs	r0, #63	; 0x3f
 800142a:	f7ff fc31 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800142e:	203f      	movs	r0, #63	; 0x3f
 8001430:	f7ff fc2e 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001434:	200f      	movs	r0, #15
 8001436:	f7ff fc2b 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800143a:	202b      	movs	r0, #43	; 0x2b
 800143c:	f7ff fc18 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fc25 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fc22 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff fc1f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001452:	203f      	movs	r0, #63	; 0x3f
 8001454:	f7ff fc1c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001458:	202a      	movs	r0, #42	; 0x2a
 800145a:	f7ff fc09 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fc16 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff fc13 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fc10 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001470:	20ef      	movs	r0, #239	; 0xef
 8001472:	f7ff fc0d 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001476:	2011      	movs	r0, #17
 8001478:	f7ff fbfa 	bl	8000c70 <LCD_WR_REG>
	HAL_Delay(120);
 800147c:	2078      	movs	r0, #120	; 0x78
 800147e:	f001 febb 	bl	80031f8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001482:	2029      	movs	r0, #41	; 0x29
 8001484:	f7ff fbf4 	bl	8000c70 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <lcd_init+0x2bc>)
 8001490:	f002 fa16 	bl	80038c0 <HAL_GPIO_WritePin>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40020800 	.word	0x40020800
 800149c:	200001b0 	.word	0x200001b0
 80014a0:	40020000 	.word	0x40020000

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f001 fe34 	bl	8003114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f82c 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f7ff fa60 	bl	8000974 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014b4:	f001 faf2 	bl	8002a9c <MX_SPI1_Init>
  MX_TIM2_Init();
 80014b8:	f001 fc8a 	bl	8002dd0 <MX_TIM2_Init>
  MX_FSMC_Init();
 80014bc:	f7ff f98a 	bl	80007d4 <MX_FSMC_Init>
  MX_I2C1_Init();
 80014c0:	f7ff fb60 	bl	8000b84 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014c4:	f001 fd44 	bl	8002f50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80014c8:	f000 f888 	bl	80015dc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fc4d 	bl	8000d6c <lcd_Clear>
	UpdateTime();
 80014d2:	f000 f8a9 	bl	8001628 <UpdateTime>

	while (1) {
		while (!flag_timer2);
 80014d6:	bf00      	nop
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <main+0x5c>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0fb      	beq.n	80014d8 <main+0x34>
		setTimer2(50);
 80014e0:	2032      	movs	r0, #50	; 0x32
 80014e2:	f001 fa95 	bl	8002a10 <setTimer2>
		button_Scan();
 80014e6:	f7ff f83f 	bl	8000568 <button_Scan>
        if (statusSystem == MODE_1){
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <main+0x60>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <main+0x52>
            ds3231_ReadTime();
 80014f2:	f7ff f90b 	bl	800070c <ds3231_ReadTime>
//		} else {
//			lcd_ShowString(100, 220, "Empty!", WHITE, BLACK, 16, 0);
//		}


		DisplayTime();
 80014f6:	f000 f8b7 	bl	8001668 <DisplayTime>
		SetUpTime();
 80014fa:	f000 fca3 	bl	8001e44 <SetUpTime>
		while (!flag_timer2);
 80014fe:	e7ea      	b.n	80014d6 <main+0x32>
 8001500:	200000c4 	.word	0x200000c4
 8001504:	200000a8 	.word	0x200000a8

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	; 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f006 f942 	bl	80077a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <SystemClock_Config+0xcc>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <SystemClock_Config+0xcc>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <SystemClock_Config+0xd0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <SystemClock_Config+0xd0>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001568:	2301      	movs	r3, #1
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800156c:	2310      	movs	r3, #16
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001570:	2302      	movs	r3, #2
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800157c:	23a8      	movs	r3, #168	; 0xa8
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001580:	2302      	movs	r3, #2
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fa9f 	bl	8004ad0 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001598:	f001 f98a 	bl	80028b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2105      	movs	r1, #5
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fd00 	bl	8004fc0 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015c6:	f001 f973 	bl	80028b0 <Error_Handler>
  }
}
 80015ca:	bf00      	nop
 80015cc:	3750      	adds	r7, #80	; 0x50
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <system_init>:

/* USER CODE BEGIN 4 */
	void system_init() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2120      	movs	r1, #32
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <system_init+0x44>)
 80015e6:	f002 f96b 	bl	80038c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <system_init+0x44>)
 80015f0:	f002 f966 	bl	80038c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2110      	movs	r1, #16
 80015f8:	4809      	ldr	r0, [pc, #36]	; (8001620 <system_init+0x44>)
 80015fa:	f002 f961 	bl	80038c0 <HAL_GPIO_WritePin>

		lcd_init();
 80015fe:	f7ff fdf1 	bl	80011e4 <lcd_init>
		ds3231_init();
 8001602:	f7ff f81d 	bl	8000640 <ds3231_init>
		uart_init_rs232();
 8001606:	f001 fc55 	bl	8002eb4 <uart_init_rs232>
		initRingBuffer(&buffer);
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <system_init+0x48>)
 800160c:	f001 f955 	bl	80028ba <initRingBuffer>
		timer_init();
 8001610:	f001 f9f4 	bl	80029fc <timer_init>
		setTimer2(50);
 8001614:	2032      	movs	r0, #50	; 0x32
 8001616:	f001 f9fb 	bl	8002a10 <setTimer2>
	}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	200002f0 	.word	0x200002f0

08001628 <UpdateTime>:
			uart_Rs232SendNum(ds3231_sec);
			uart_Rs232SendString((void*)"\n");
		}
	}

	void UpdateTime(){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
		ds3231_Write(ADDRESS_YEAR, 24);
 800162c:	2118      	movs	r1, #24
 800162e:	2006      	movs	r0, #6
 8001630:	f7ff f84a 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, 11);
 8001634:	210b      	movs	r1, #11
 8001636:	2005      	movs	r0, #5
 8001638:	f7ff f846 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, 15);
 800163c:	210f      	movs	r1, #15
 800163e:	2004      	movs	r0, #4
 8001640:	f7ff f842 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, 6);
 8001644:	2106      	movs	r1, #6
 8001646:	2003      	movs	r0, #3
 8001648:	f7ff f83e 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, 2);
 800164c:	2102      	movs	r1, #2
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff f83a 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, 45);
 8001654:	212d      	movs	r1, #45	; 0x2d
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff f836 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, 0);
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff f832 	bl	80006c8 <ds3231_Write>
	}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <DisplayTime>:
	void DisplayTime()
	{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af04      	add	r7, sp, #16
        if (ds3231_hours > set_hour || (ds3231_hours == set_hour && ds3231_min > set_min) ||   (ds3231_hours == set_hour && ds3231_min == set_min && ds3231_sec > set_sec))
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <DisplayTime+0x78>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <DisplayTime+0x7c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	dc22      	bgt.n	80016c2 <DisplayTime+0x5a>
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <DisplayTime+0x78>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <DisplayTime+0x7c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d106      	bne.n	8001698 <DisplayTime+0x30>
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <DisplayTime+0x80>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <DisplayTime+0x84>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	dc14      	bgt.n	80016c2 <DisplayTime+0x5a>
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <DisplayTime+0x78>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <DisplayTime+0x7c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d12a      	bne.n	80016fc <DisplayTime+0x94>
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <DisplayTime+0x80>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <DisplayTime+0x84>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d123      	bne.n	80016fc <DisplayTime+0x94>
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <DisplayTime+0x88>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <DisplayTime+0x8c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dd1c      	ble.n	80016fc <DisplayTime+0x94>
        {
        	lcd_ShowString(90, 160, "ALARM", YELLOW, BLACK, 24, 0);
 80016c2:	2300      	movs	r3, #0
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	2318      	movs	r3, #24
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <DisplayTime+0x90>)
 80016d4:	21a0      	movs	r1, #160	; 0xa0
 80016d6:	205a      	movs	r0, #90	; 0x5a
 80016d8:	f7ff fcfc 	bl	80010d4 <lcd_ShowString>
 80016dc:	e01b      	b.n	8001716 <DisplayTime+0xae>
 80016de:	bf00      	nop
 80016e0:	20000101 	.word	0x20000101
 80016e4:	20000000 	.word	0x20000000
 80016e8:	200000fe 	.word	0x200000fe
 80016ec:	20000004 	.word	0x20000004
 80016f0:	200000fc 	.word	0x200000fc
 80016f4:	20000008 	.word	0x20000008
 80016f8:	08008828 	.word	0x08008828
        }
        else
        {
        	lcd_ShowString(90, 160, "     ", YELLOW, BLACK, 24, 0);
 80016fc:	2300      	movs	r3, #0
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2318      	movs	r3, #24
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800170c:	4aba      	ldr	r2, [pc, #744]	; (80019f8 <DisplayTime+0x390>)
 800170e:	21a0      	movs	r1, #160	; 0xa0
 8001710:	205a      	movs	r0, #90	; 0x5a
 8001712:	f7ff fcdf 	bl	80010d4 <lcd_ShowString>
        }
        lcd_ShowString(20, 190, "SET", GREEN, BLACK, 24, 0);
 8001716:	2300      	movs	r3, #0
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	2318      	movs	r3, #24
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2300      	movs	r3, #0
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001726:	4ab5      	ldr	r2, [pc, #724]	; (80019fc <DisplayTime+0x394>)
 8001728:	21be      	movs	r1, #190	; 0xbe
 800172a:	2014      	movs	r0, #20
 800172c:	f7ff fcd2 	bl	80010d4 <lcd_ShowString>

		lcd_ShowIntNum(70, 190, set_hour/10, 1, GREEN, BLACK, 24);
 8001730:	4bb3      	ldr	r3, [pc, #716]	; (8001a00 <DisplayTime+0x398>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4ab3      	ldr	r2, [pc, #716]	; (8001a04 <DisplayTime+0x39c>)
 8001736:	fb82 1203 	smull	r1, r2, r2, r3
 800173a:	1092      	asrs	r2, r2, #2
 800173c:	17db      	asrs	r3, r3, #31
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	b29a      	uxth	r2, r3
 8001742:	2318      	movs	r3, #24
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2300      	movs	r3, #0
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	21be      	movs	r1, #190	; 0xbe
 8001754:	2046      	movs	r0, #70	; 0x46
 8001756:	f7ff fc3f 	bl	8000fd8 <lcd_ShowIntNum>
		lcd_ShowIntNum(83, 190, set_hour%10, 1, GREEN, BLACK, 24);
 800175a:	4ba9      	ldr	r3, [pc, #676]	; (8001a00 <DisplayTime+0x398>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4ba9      	ldr	r3, [pc, #676]	; (8001a04 <DisplayTime+0x39c>)
 8001760:	fb83 1302 	smull	r1, r3, r3, r2
 8001764:	1099      	asrs	r1, r3, #2
 8001766:	17d3      	asrs	r3, r2, #31
 8001768:	1ac9      	subs	r1, r1, r3
 800176a:	460b      	mov	r3, r1
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	1ad1      	subs	r1, r2, r3
 8001774:	b28a      	uxth	r2, r1
 8001776:	2318      	movs	r3, #24
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2300      	movs	r3, #0
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	21be      	movs	r1, #190	; 0xbe
 8001788:	2053      	movs	r0, #83	; 0x53
 800178a:	f7ff fc25 	bl	8000fd8 <lcd_ShowIntNum>
		lcd_ShowChar(96, 190, ':', GREEN, BLACK, 24, 0);
 800178e:	2300      	movs	r3, #0
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2318      	movs	r3, #24
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800179e:	223a      	movs	r2, #58	; 0x3a
 80017a0:	21be      	movs	r1, #190	; 0xbe
 80017a2:	2060      	movs	r0, #96	; 0x60
 80017a4:	f7ff fb2c 	bl	8000e00 <lcd_ShowChar>
		lcd_ShowIntNum(110, 190, set_min/10, 1, GREEN, BLACK, 24);
 80017a8:	4b97      	ldr	r3, [pc, #604]	; (8001a08 <DisplayTime+0x3a0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a95      	ldr	r2, [pc, #596]	; (8001a04 <DisplayTime+0x39c>)
 80017ae:	fb82 1203 	smull	r1, r2, r2, r3
 80017b2:	1092      	asrs	r2, r2, #2
 80017b4:	17db      	asrs	r3, r3, #31
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	2318      	movs	r3, #24
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2300      	movs	r3, #0
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	21be      	movs	r1, #190	; 0xbe
 80017cc:	206e      	movs	r0, #110	; 0x6e
 80017ce:	f7ff fc03 	bl	8000fd8 <lcd_ShowIntNum>
		lcd_ShowIntNum(123, 190, set_min%10, 1, GREEN, BLACK, 24);
 80017d2:	4b8d      	ldr	r3, [pc, #564]	; (8001a08 <DisplayTime+0x3a0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <DisplayTime+0x39c>)
 80017d8:	fb83 1302 	smull	r1, r3, r3, r2
 80017dc:	1099      	asrs	r1, r3, #2
 80017de:	17d3      	asrs	r3, r2, #31
 80017e0:	1ac9      	subs	r1, r1, r3
 80017e2:	460b      	mov	r3, r1
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	1ad1      	subs	r1, r2, r3
 80017ec:	b28a      	uxth	r2, r1
 80017ee:	2318      	movs	r3, #24
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2300      	movs	r3, #0
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	21be      	movs	r1, #190	; 0xbe
 8001800:	207b      	movs	r0, #123	; 0x7b
 8001802:	f7ff fbe9 	bl	8000fd8 <lcd_ShowIntNum>
		lcd_ShowChar(136, 190, ':', GREEN, BLACK, 24, 0);
 8001806:	2300      	movs	r3, #0
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2318      	movs	r3, #24
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001816:	223a      	movs	r2, #58	; 0x3a
 8001818:	21be      	movs	r1, #190	; 0xbe
 800181a:	2088      	movs	r0, #136	; 0x88
 800181c:	f7ff faf0 	bl	8000e00 <lcd_ShowChar>
		lcd_ShowIntNum(150, 190, set_sec/10, 1, GREEN, BLACK, 24);
 8001820:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <DisplayTime+0x3a4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a77      	ldr	r2, [pc, #476]	; (8001a04 <DisplayTime+0x39c>)
 8001826:	fb82 1203 	smull	r1, r2, r2, r3
 800182a:	1092      	asrs	r2, r2, #2
 800182c:	17db      	asrs	r3, r3, #31
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b29a      	uxth	r2, r3
 8001832:	2318      	movs	r3, #24
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	2300      	movs	r3, #0
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	21be      	movs	r1, #190	; 0xbe
 8001844:	2096      	movs	r0, #150	; 0x96
 8001846:	f7ff fbc7 	bl	8000fd8 <lcd_ShowIntNum>
		lcd_ShowIntNum(163, 190, set_sec%10, 1, GREEN, BLACK, 24);
 800184a:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <DisplayTime+0x3a4>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <DisplayTime+0x39c>)
 8001850:	fb83 1302 	smull	r1, r3, r3, r2
 8001854:	1099      	asrs	r1, r3, #2
 8001856:	17d3      	asrs	r3, r2, #31
 8001858:	1ac9      	subs	r1, r1, r3
 800185a:	460b      	mov	r3, r1
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	1ad1      	subs	r1, r2, r3
 8001864:	b28a      	uxth	r2, r1
 8001866:	2318      	movs	r3, #24
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	2300      	movs	r3, #0
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	21be      	movs	r1, #190	; 0xbe
 8001878:	20a3      	movs	r0, #163	; 0xa3
 800187a:	f7ff fbad 	bl	8000fd8 <lcd_ShowIntNum>

        lcd_ShowString(80, 70, "MODE", YELLOW, BLACK, 24, 0);
 800187e:	2300      	movs	r3, #0
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2318      	movs	r3, #24
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800188e:	4a60      	ldr	r2, [pc, #384]	; (8001a10 <DisplayTime+0x3a8>)
 8001890:	2146      	movs	r1, #70	; 0x46
 8001892:	2050      	movs	r0, #80	; 0x50
 8001894:	f7ff fc1e 	bl	80010d4 <lcd_ShowString>
        lcd_ShowIntNum(130, 70, statusSystem, 1, YELLOW, BLACK, 24);
 8001898:	4b5e      	ldr	r3, [pc, #376]	; (8001a14 <DisplayTime+0x3ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	2318      	movs	r3, #24
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	2300      	movs	r3, #0
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	2146      	movs	r1, #70	; 0x46
 80018b0:	2082      	movs	r0, #130	; 0x82
 80018b2:	f7ff fb91 	bl	8000fd8 <lcd_ShowIntNum>
		if(statusSetupTime == INIT_SYSTEM) ds3231_ReadTime();
 80018b6:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <DisplayTime+0x3b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <DisplayTime+0x25a>
 80018be:	f7fe ff25 	bl	800070c <ds3231_ReadTime>

		if(statusSetupTime != SET_HOUR || (statusSetupTime == SET_HOUR && timeBlink >= 5)){
 80018c2:	4b55      	ldr	r3, [pc, #340]	; (8001a18 <DisplayTime+0x3b0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <DisplayTime+0x272>
 80018ca:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <DisplayTime+0x3b0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d130      	bne.n	8001934 <DisplayTime+0x2cc>
 80018d2:	4b52      	ldr	r3, [pc, #328]	; (8001a1c <DisplayTime+0x3b4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	dd2c      	ble.n	8001934 <DisplayTime+0x2cc>
			lcd_ShowIntNum(70, 100, ds3231_hours/10, 1, GREEN, BLACK, 24);
 80018da:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <DisplayTime+0x3b8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4a51      	ldr	r2, [pc, #324]	; (8001a24 <DisplayTime+0x3bc>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	2318      	movs	r3, #24
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2300      	movs	r3, #0
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2164      	movs	r1, #100	; 0x64
 80018fc:	2046      	movs	r0, #70	; 0x46
 80018fe:	f7ff fb6b 	bl	8000fd8 <lcd_ShowIntNum>
			lcd_ShowIntNum(83, 100, ds3231_hours%10, 1, GREEN, BLACK, 24);
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <DisplayTime+0x3b8>)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <DisplayTime+0x3bc>)
 8001908:	fba3 1302 	umull	r1, r3, r3, r2
 800190c:	08d9      	lsrs	r1, r3, #3
 800190e:	460b      	mov	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	b29a      	uxth	r2, r3
 800191c:	2318      	movs	r3, #24
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2164      	movs	r1, #100	; 0x64
 800192e:	2053      	movs	r0, #83	; 0x53
 8001930:	f7ff fb52 	bl	8000fd8 <lcd_ShowIntNum>
		}

		lcd_ShowChar(96, 100, ':', GREEN, BLACK, 24, 0);
 8001934:	2300      	movs	r3, #0
 8001936:	9302      	str	r3, [sp, #8]
 8001938:	2318      	movs	r3, #24
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001944:	223a      	movs	r2, #58	; 0x3a
 8001946:	2164      	movs	r1, #100	; 0x64
 8001948:	2060      	movs	r0, #96	; 0x60
 800194a:	f7ff fa59 	bl	8000e00 <lcd_ShowChar>

		if(statusSetupTime != SET_MINUTE || (statusSetupTime == SET_MINUTE && timeBlink >= 5)){
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <DisplayTime+0x3b0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d107      	bne.n	8001966 <DisplayTime+0x2fe>
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <DisplayTime+0x3b0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d130      	bne.n	80019c0 <DisplayTime+0x358>
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <DisplayTime+0x3b4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b04      	cmp	r3, #4
 8001964:	dd2c      	ble.n	80019c0 <DisplayTime+0x358>
			lcd_ShowIntNum(110, 100, ds3231_min/10, 1, GREEN, BLACK, 24);
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <DisplayTime+0x3c0>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4a2e      	ldr	r2, [pc, #184]	; (8001a24 <DisplayTime+0x3bc>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	b29a      	uxth	r2, r3
 8001976:	2318      	movs	r3, #24
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	2300      	movs	r3, #0
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	2164      	movs	r1, #100	; 0x64
 8001988:	206e      	movs	r0, #110	; 0x6e
 800198a:	f7ff fb25 	bl	8000fd8 <lcd_ShowIntNum>
			lcd_ShowIntNum(123, 100, ds3231_min%10, 1, GREEN, BLACK, 24);
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <DisplayTime+0x3c0>)
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <DisplayTime+0x3bc>)
 8001994:	fba3 1302 	umull	r1, r3, r3, r2
 8001998:	08d9      	lsrs	r1, r3, #3
 800199a:	460b      	mov	r3, r1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2318      	movs	r3, #24
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	2164      	movs	r1, #100	; 0x64
 80019ba:	207b      	movs	r0, #123	; 0x7b
 80019bc:	f7ff fb0c 	bl	8000fd8 <lcd_ShowIntNum>
		}

		lcd_ShowChar(136, 100, ':', GREEN, BLACK, 24, 0);
 80019c0:	2300      	movs	r3, #0
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2318      	movs	r3, #24
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2300      	movs	r3, #0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019d0:	223a      	movs	r2, #58	; 0x3a
 80019d2:	2164      	movs	r1, #100	; 0x64
 80019d4:	2088      	movs	r0, #136	; 0x88
 80019d6:	f7ff fa13 	bl	8000e00 <lcd_ShowChar>

		if(statusSetupTime != SET_SEC || (statusSetupTime == SET_SEC && timeBlink >= 5)){
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <DisplayTime+0x3b0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <DisplayTime+0x38a>
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <DisplayTime+0x3b0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d14d      	bne.n	8001a86 <DisplayTime+0x41e>
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <DisplayTime+0x3b4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	dd49      	ble.n	8001a86 <DisplayTime+0x41e>
			lcd_ShowIntNum(150, 100, ds3231_sec/10, 1, GREEN, BLACK, 24);
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <DisplayTime+0x3c4>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	e01b      	b.n	8001a30 <DisplayTime+0x3c8>
 80019f8:	08008830 	.word	0x08008830
 80019fc:	08008838 	.word	0x08008838
 8001a00:	20000000 	.word	0x20000000
 8001a04:	66666667 	.word	0x66666667
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	0800883c 	.word	0x0800883c
 8001a14:	200000a8 	.word	0x200000a8
 8001a18:	200000a0 	.word	0x200000a0
 8001a1c:	200000a4 	.word	0x200000a4
 8001a20:	20000101 	.word	0x20000101
 8001a24:	cccccccd 	.word	0xcccccccd
 8001a28:	200000fe 	.word	0x200000fe
 8001a2c:	200000fc 	.word	0x200000fc
 8001a30:	4abc      	ldr	r2, [pc, #752]	; (8001d24 <DisplayTime+0x6bc>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2318      	movs	r3, #24
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2164      	movs	r1, #100	; 0x64
 8001a4e:	2096      	movs	r0, #150	; 0x96
 8001a50:	f7ff fac2 	bl	8000fd8 <lcd_ShowIntNum>
			lcd_ShowIntNum(163, 100, ds3231_sec%10, 1, GREEN, BLACK, 24);
 8001a54:	4bb4      	ldr	r3, [pc, #720]	; (8001d28 <DisplayTime+0x6c0>)
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	4bb2      	ldr	r3, [pc, #712]	; (8001d24 <DisplayTime+0x6bc>)
 8001a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5e:	08d9      	lsrs	r1, r3, #3
 8001a60:	460b      	mov	r3, r1
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	2318      	movs	r3, #24
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	2164      	movs	r1, #100	; 0x64
 8001a80:	20a3      	movs	r0, #163	; 0xa3
 8001a82:	f7ff faa9 	bl	8000fd8 <lcd_ShowIntNum>
		}

	    //////day
		if(statusSetupTime != SET_DAY || (statusSetupTime == SET_DAY && timeBlink >= 5)){
 8001a86:	4ba9      	ldr	r3, [pc, #676]	; (8001d2c <DisplayTime+0x6c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d107      	bne.n	8001a9e <DisplayTime+0x436>
 8001a8e:	4ba7      	ldr	r3, [pc, #668]	; (8001d2c <DisplayTime+0x6c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d17c      	bne.n	8001b90 <DisplayTime+0x528>
 8001a96:	4ba6      	ldr	r3, [pc, #664]	; (8001d30 <DisplayTime+0x6c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	dd78      	ble.n	8001b90 <DisplayTime+0x528>
			switch(ds3231_day)
 8001a9e:	4ba5      	ldr	r3, [pc, #660]	; (8001d34 <DisplayTime+0x6cc>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d874      	bhi.n	8001b92 <DisplayTime+0x52a>
 8001aa8:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <DisplayTime+0x448>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001acd 	.word	0x08001acd
 8001ab4:	08001ae9 	.word	0x08001ae9
 8001ab8:	08001b05 	.word	0x08001b05
 8001abc:	08001b21 	.word	0x08001b21
 8001ac0:	08001b3d 	.word	0x08001b3d
 8001ac4:	08001b59 	.word	0x08001b59
 8001ac8:	08001b75 	.word	0x08001b75
			{
				case 1:
					lcd_ShowString(20, 130, "SUN", YELLOW, BLACK, 24, 0);
 8001acc:	2300      	movs	r3, #0
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	2318      	movs	r3, #24
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001adc:	4a96      	ldr	r2, [pc, #600]	; (8001d38 <DisplayTime+0x6d0>)
 8001ade:	2182      	movs	r1, #130	; 0x82
 8001ae0:	2014      	movs	r0, #20
 8001ae2:	f7ff faf7 	bl	80010d4 <lcd_ShowString>
					break;
 8001ae6:	e054      	b.n	8001b92 <DisplayTime+0x52a>
				case 2:
					lcd_ShowString(20, 130, "MON", YELLOW, BLACK, 24, 0);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2318      	movs	r3, #24
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001af8:	4a90      	ldr	r2, [pc, #576]	; (8001d3c <DisplayTime+0x6d4>)
 8001afa:	2182      	movs	r1, #130	; 0x82
 8001afc:	2014      	movs	r0, #20
 8001afe:	f7ff fae9 	bl	80010d4 <lcd_ShowString>
					break;
 8001b02:	e046      	b.n	8001b92 <DisplayTime+0x52a>
				case 3:
					lcd_ShowString(20, 130, "TUE", YELLOW, BLACK, 24, 0);
 8001b04:	2300      	movs	r3, #0
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	2318      	movs	r3, #24
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b14:	4a8a      	ldr	r2, [pc, #552]	; (8001d40 <DisplayTime+0x6d8>)
 8001b16:	2182      	movs	r1, #130	; 0x82
 8001b18:	2014      	movs	r0, #20
 8001b1a:	f7ff fadb 	bl	80010d4 <lcd_ShowString>
					break;
 8001b1e:	e038      	b.n	8001b92 <DisplayTime+0x52a>
				case 4:
					lcd_ShowString(20, 130, "WED", YELLOW, BLACK, 24, 0);
 8001b20:	2300      	movs	r3, #0
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	2318      	movs	r3, #24
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b30:	4a84      	ldr	r2, [pc, #528]	; (8001d44 <DisplayTime+0x6dc>)
 8001b32:	2182      	movs	r1, #130	; 0x82
 8001b34:	2014      	movs	r0, #20
 8001b36:	f7ff facd 	bl	80010d4 <lcd_ShowString>
					break;
 8001b3a:	e02a      	b.n	8001b92 <DisplayTime+0x52a>
				case 5:
					lcd_ShowString(20, 130, "THU", YELLOW, BLACK, 24, 0);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	2318      	movs	r3, #24
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b4c:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <DisplayTime+0x6e0>)
 8001b4e:	2182      	movs	r1, #130	; 0x82
 8001b50:	2014      	movs	r0, #20
 8001b52:	f7ff fabf 	bl	80010d4 <lcd_ShowString>
					break;
 8001b56:	e01c      	b.n	8001b92 <DisplayTime+0x52a>
				case 6:
					lcd_ShowString(20, 130, "FRI", YELLOW, BLACK, 24, 0);
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2318      	movs	r3, #24
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2300      	movs	r3, #0
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b68:	4a78      	ldr	r2, [pc, #480]	; (8001d4c <DisplayTime+0x6e4>)
 8001b6a:	2182      	movs	r1, #130	; 0x82
 8001b6c:	2014      	movs	r0, #20
 8001b6e:	f7ff fab1 	bl	80010d4 <lcd_ShowString>
					break;
 8001b72:	e00e      	b.n	8001b92 <DisplayTime+0x52a>
				case 7:
					lcd_ShowString(20, 130, "SAT", YELLOW, BLACK, 24, 0);
 8001b74:	2300      	movs	r3, #0
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	2318      	movs	r3, #24
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b84:	4a72      	ldr	r2, [pc, #456]	; (8001d50 <DisplayTime+0x6e8>)
 8001b86:	2182      	movs	r1, #130	; 0x82
 8001b88:	2014      	movs	r0, #20
 8001b8a:	f7ff faa3 	bl	80010d4 <lcd_ShowString>
					break;
 8001b8e:	e000      	b.n	8001b92 <DisplayTime+0x52a>
			}
		}
 8001b90:	bf00      	nop

		if(statusSetupTime != SET_MONTH || (statusSetupTime == SET_MONTH && timeBlink >= 5)){
 8001b92:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <DisplayTime+0x6c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d109      	bne.n	8001bae <DisplayTime+0x546>
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <DisplayTime+0x6c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	f040 80fe 	bne.w	8001da0 <DisplayTime+0x738>
 8001ba4:	4b62      	ldr	r3, [pc, #392]	; (8001d30 <DisplayTime+0x6c8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	f340 80f9 	ble.w	8001da0 <DisplayTime+0x738>
			switch(ds3231_month)
 8001bae:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <DisplayTime+0x6ec>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	2b0b      	cmp	r3, #11
 8001bb6:	f200 80f4 	bhi.w	8001da2 <DisplayTime+0x73a>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <DisplayTime+0x558>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001bf1 	.word	0x08001bf1
 8001bc4:	08001c0d 	.word	0x08001c0d
 8001bc8:	08001c29 	.word	0x08001c29
 8001bcc:	08001c45 	.word	0x08001c45
 8001bd0:	08001c61 	.word	0x08001c61
 8001bd4:	08001c7d 	.word	0x08001c7d
 8001bd8:	08001c99 	.word	0x08001c99
 8001bdc:	08001cb5 	.word	0x08001cb5
 8001be0:	08001cd1 	.word	0x08001cd1
 8001be4:	08001ced 	.word	0x08001ced
 8001be8:	08001d09 	.word	0x08001d09
 8001bec:	08001d85 	.word	0x08001d85
			{
				case 1:
					lcd_ShowString(105, 130, "JAN", YELLOW, BLACK, 24, 0);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2318      	movs	r3, #24
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c00:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <DisplayTime+0x6f0>)
 8001c02:	2182      	movs	r1, #130	; 0x82
 8001c04:	2069      	movs	r0, #105	; 0x69
 8001c06:	f7ff fa65 	bl	80010d4 <lcd_ShowString>
					break;
 8001c0a:	e0ca      	b.n	8001da2 <DisplayTime+0x73a>
				case 2:
					lcd_ShowString(105, 130, "FEB", YELLOW, BLACK, 24, 0);
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2318      	movs	r3, #24
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	; (8001d5c <DisplayTime+0x6f4>)
 8001c1e:	2182      	movs	r1, #130	; 0x82
 8001c20:	2069      	movs	r0, #105	; 0x69
 8001c22:	f7ff fa57 	bl	80010d4 <lcd_ShowString>
					break;
 8001c26:	e0bc      	b.n	8001da2 <DisplayTime+0x73a>
				case 3:
					lcd_ShowString(105, 130, "MAR", YELLOW, BLACK, 24, 0);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	2318      	movs	r3, #24
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2300      	movs	r3, #0
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c38:	4a49      	ldr	r2, [pc, #292]	; (8001d60 <DisplayTime+0x6f8>)
 8001c3a:	2182      	movs	r1, #130	; 0x82
 8001c3c:	2069      	movs	r0, #105	; 0x69
 8001c3e:	f7ff fa49 	bl	80010d4 <lcd_ShowString>
					break;
 8001c42:	e0ae      	b.n	8001da2 <DisplayTime+0x73a>
				case 4:
					lcd_ShowString(105, 130, "APR", YELLOW, BLACK, 24, 0);
 8001c44:	2300      	movs	r3, #0
 8001c46:	9302      	str	r3, [sp, #8]
 8001c48:	2318      	movs	r3, #24
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c54:	4a43      	ldr	r2, [pc, #268]	; (8001d64 <DisplayTime+0x6fc>)
 8001c56:	2182      	movs	r1, #130	; 0x82
 8001c58:	2069      	movs	r0, #105	; 0x69
 8001c5a:	f7ff fa3b 	bl	80010d4 <lcd_ShowString>
					break;
 8001c5e:	e0a0      	b.n	8001da2 <DisplayTime+0x73a>
				case 5:
					lcd_ShowString(105, 130, "MAY", YELLOW, BLACK, 24, 0);
 8001c60:	2300      	movs	r3, #0
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	2318      	movs	r3, #24
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c70:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <DisplayTime+0x700>)
 8001c72:	2182      	movs	r1, #130	; 0x82
 8001c74:	2069      	movs	r0, #105	; 0x69
 8001c76:	f7ff fa2d 	bl	80010d4 <lcd_ShowString>
					break;
 8001c7a:	e092      	b.n	8001da2 <DisplayTime+0x73a>
				case 6:
					lcd_ShowString(105, 130, "JUN", YELLOW, BLACK, 24, 0);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2318      	movs	r3, #24
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2300      	movs	r3, #0
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <DisplayTime+0x704>)
 8001c8e:	2182      	movs	r1, #130	; 0x82
 8001c90:	2069      	movs	r0, #105	; 0x69
 8001c92:	f7ff fa1f 	bl	80010d4 <lcd_ShowString>
					break;
 8001c96:	e084      	b.n	8001da2 <DisplayTime+0x73a>
				case 7:
					lcd_ShowString(105, 130, "JUL", YELLOW, BLACK, 24, 0);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2318      	movs	r3, #24
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ca8:	4a31      	ldr	r2, [pc, #196]	; (8001d70 <DisplayTime+0x708>)
 8001caa:	2182      	movs	r1, #130	; 0x82
 8001cac:	2069      	movs	r0, #105	; 0x69
 8001cae:	f7ff fa11 	bl	80010d4 <lcd_ShowString>
					break;
 8001cb2:	e076      	b.n	8001da2 <DisplayTime+0x73a>
				case 8:
					lcd_ShowString(105, 130, "AUG", YELLOW, BLACK, 24, 0);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2318      	movs	r3, #24
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001cc4:	4a2b      	ldr	r2, [pc, #172]	; (8001d74 <DisplayTime+0x70c>)
 8001cc6:	2182      	movs	r1, #130	; 0x82
 8001cc8:	2069      	movs	r0, #105	; 0x69
 8001cca:	f7ff fa03 	bl	80010d4 <lcd_ShowString>
					break;
 8001cce:	e068      	b.n	8001da2 <DisplayTime+0x73a>
				case 9:
					lcd_ShowString(105, 130, "SEP", YELLOW, BLACK, 24, 0);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2318      	movs	r3, #24
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <DisplayTime+0x710>)
 8001ce2:	2182      	movs	r1, #130	; 0x82
 8001ce4:	2069      	movs	r0, #105	; 0x69
 8001ce6:	f7ff f9f5 	bl	80010d4 <lcd_ShowString>
					break;
 8001cea:	e05a      	b.n	8001da2 <DisplayTime+0x73a>
				case 10:
					lcd_ShowString(105, 130, "OCT", YELLOW, BLACK, 24, 0);
 8001cec:	2300      	movs	r3, #0
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	2318      	movs	r3, #24
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <DisplayTime+0x714>)
 8001cfe:	2182      	movs	r1, #130	; 0x82
 8001d00:	2069      	movs	r0, #105	; 0x69
 8001d02:	f7ff f9e7 	bl	80010d4 <lcd_ShowString>
					break;
 8001d06:	e04c      	b.n	8001da2 <DisplayTime+0x73a>
				case 11:
					lcd_ShowString(105, 130, "NOV", YELLOW, BLACK, 24, 0);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	2318      	movs	r3, #24
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <DisplayTime+0x718>)
 8001d1a:	2182      	movs	r1, #130	; 0x82
 8001d1c:	2069      	movs	r0, #105	; 0x69
 8001d1e:	f7ff f9d9 	bl	80010d4 <lcd_ShowString>
					break;
 8001d22:	e03e      	b.n	8001da2 <DisplayTime+0x73a>
 8001d24:	cccccccd 	.word	0xcccccccd
 8001d28:	200000fc 	.word	0x200000fc
 8001d2c:	200000a0 	.word	0x200000a0
 8001d30:	200000a4 	.word	0x200000a4
 8001d34:	20000100 	.word	0x20000100
 8001d38:	08008844 	.word	0x08008844
 8001d3c:	08008848 	.word	0x08008848
 8001d40:	0800884c 	.word	0x0800884c
 8001d44:	08008850 	.word	0x08008850
 8001d48:	08008854 	.word	0x08008854
 8001d4c:	08008858 	.word	0x08008858
 8001d50:	0800885c 	.word	0x0800885c
 8001d54:	20000102 	.word	0x20000102
 8001d58:	08008860 	.word	0x08008860
 8001d5c:	08008864 	.word	0x08008864
 8001d60:	08008868 	.word	0x08008868
 8001d64:	0800886c 	.word	0x0800886c
 8001d68:	08008870 	.word	0x08008870
 8001d6c:	08008874 	.word	0x08008874
 8001d70:	08008878 	.word	0x08008878
 8001d74:	0800887c 	.word	0x0800887c
 8001d78:	08008880 	.word	0x08008880
 8001d7c:	08008884 	.word	0x08008884
 8001d80:	08008888 	.word	0x08008888
				case 12:
					lcd_ShowString(105, 130, "DEC", YELLOW, BLACK, 24, 0);
 8001d84:	2300      	movs	r3, #0
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2318      	movs	r3, #24
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <DisplayTime+0x7c8>)
 8001d96:	2182      	movs	r1, #130	; 0x82
 8001d98:	2069      	movs	r0, #105	; 0x69
 8001d9a:	f7ff f99b 	bl	80010d4 <lcd_ShowString>
					break;
 8001d9e:	e000      	b.n	8001da2 <DisplayTime+0x73a>
			}
		}
 8001da0:	bf00      	nop
		if(statusSetupTime != SET_DATE || (statusSetupTime == SET_DATE && timeBlink >= 5)){
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <DisplayTime+0x7cc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d107      	bne.n	8001dba <DisplayTime+0x752>
 8001daa:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <DisplayTime+0x7cc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d112      	bne.n	8001dd8 <DisplayTime+0x770>
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <DisplayTime+0x7d0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	dd0e      	ble.n	8001dd8 <DisplayTime+0x770>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <DisplayTime+0x7d4>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	2318      	movs	r3, #24
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	2182      	movs	r1, #130	; 0x82
 8001dd2:	2046      	movs	r0, #70	; 0x46
 8001dd4:	f7ff f900 	bl	8000fd8 <lcd_ShowIntNum>
		}
		if(statusSetupTime != SET_YEAR || (statusSetupTime == SET_YEAR && timeBlink >= 5)){
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <DisplayTime+0x7cc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b07      	cmp	r3, #7
 8001dde:	d107      	bne.n	8001df0 <DisplayTime+0x788>
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <DisplayTime+0x7cc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b07      	cmp	r3, #7
 8001de6:	d11f      	bne.n	8001e28 <DisplayTime+0x7c0>
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <DisplayTime+0x7d0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	dd1b      	ble.n	8001e28 <DisplayTime+0x7c0>
			lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 8001df0:	2318      	movs	r3, #24
 8001df2:	9302      	str	r3, [sp, #8]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2302      	movs	r3, #2
 8001e00:	2214      	movs	r2, #20
 8001e02:	2182      	movs	r1, #130	; 0x82
 8001e04:	2096      	movs	r0, #150	; 0x96
 8001e06:	f7ff f8e7 	bl	8000fd8 <lcd_ShowIntNum>
			lcd_ShowIntNum(176, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <DisplayTime+0x7d8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	2318      	movs	r3, #24
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2302      	movs	r3, #2
 8001e20:	2182      	movs	r1, #130	; 0x82
 8001e22:	20b0      	movs	r0, #176	; 0xb0
 8001e24:	f7ff f8d8 	bl	8000fd8 <lcd_ShowIntNum>
		}


	}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	0800888c 	.word	0x0800888c
 8001e34:	200000a0 	.word	0x200000a0
 8001e38:	200000a4 	.word	0x200000a4
 8001e3c:	200000ff 	.word	0x200000ff
 8001e40:	200000fd 	.word	0x200000fd

08001e44 <SetUpTime>:

	int count_send = 0;
	void SetUpTime()
	{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af04      	add	r7, sp, #16
        if (statusSystem == MODE_1)
 8001e4a:	4bb3      	ldr	r3, [pc, #716]	; (8002118 <SetUpTime+0x2d4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <SetUpTime+0x28>
        {
            if (IsButtonMode())
 8001e52:	f000 f9c3 	bl	80021dc <IsButtonMode>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 81a6 	beq.w	80021aa <SetUpTime+0x366>
            {
                statusSystem = MODE_2;
 8001e5e:	4bae      	ldr	r3, [pc, #696]	; (8002118 <SetUpTime+0x2d4>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
                statusSetupTime = SET_HOUR;
 8001e64:	4bad      	ldr	r3, [pc, #692]	; (800211c <SetUpTime+0x2d8>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
        	            break;
        	    }
            }
        }

	}
 8001e6a:	e19e      	b.n	80021aa <SetUpTime+0x366>
        else if (statusSystem == MODE_2)
 8001e6c:	4baa      	ldr	r3, [pc, #680]	; (8002118 <SetUpTime+0x2d4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f040 8087 	bne.w	8001f84 <SetUpTime+0x140>
            if (IsButtonMode())
 8001e76:	f000 f9b1 	bl	80021dc <IsButtonMode>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d012      	beq.n	8001ea6 <SetUpTime+0x62>
            	pre_hour = ds3231_hours;
 8001e80:	4ba7      	ldr	r3, [pc, #668]	; (8002120 <SetUpTime+0x2dc>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4ba7      	ldr	r3, [pc, #668]	; (8002124 <SetUpTime+0x2e0>)
 8001e88:	601a      	str	r2, [r3, #0]
            	pre_min = ds3231_min;
 8001e8a:	4ba7      	ldr	r3, [pc, #668]	; (8002128 <SetUpTime+0x2e4>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4ba6      	ldr	r3, [pc, #664]	; (800212c <SetUpTime+0x2e8>)
 8001e92:	601a      	str	r2, [r3, #0]
            	pre_sec = ds3231_sec;
 8001e94:	4ba6      	ldr	r3, [pc, #664]	; (8002130 <SetUpTime+0x2ec>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4ba6      	ldr	r3, [pc, #664]	; (8002134 <SetUpTime+0x2f0>)
 8001e9c:	601a      	str	r2, [r3, #0]
                statusSystem = MODE_3;
 8001e9e:	4b9e      	ldr	r3, [pc, #632]	; (8002118 <SetUpTime+0x2d4>)
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	601a      	str	r2, [r3, #0]
	}
 8001ea4:	e181      	b.n	80021aa <SetUpTime+0x366>
        	    switch(statusSetupTime)
 8001ea6:	4b9d      	ldr	r3, [pc, #628]	; (800211c <SetUpTime+0x2d8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d865      	bhi.n	8001f7c <SetUpTime+0x138>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <SetUpTime+0x74>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001ed5 	.word	0x08001ed5
 8001ebc:	08001eed 	.word	0x08001eed
 8001ec0:	08001f05 	.word	0x08001f05
 8001ec4:	08001f1d 	.word	0x08001f1d
 8001ec8:	08001f35 	.word	0x08001f35
 8001ecc:	08001f4d 	.word	0x08001f4d
 8001ed0:	08001f65 	.word	0x08001f65
        	            SetHour();
 8001ed4:	f000 f9ca 	bl	800226c <SetHour>
        	            if(IsButtonSet())
 8001ed8:	f000 f970 	bl	80021bc <IsButtonSet>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8148 	beq.w	8002174 <SetUpTime+0x330>
        	                statusSetupTime = SET_MINUTE;
 8001ee4:	4b8d      	ldr	r3, [pc, #564]	; (800211c <SetUpTime+0x2d8>)
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
        	            break;
 8001eea:	e143      	b.n	8002174 <SetUpTime+0x330>
        	            SetMinute();
 8001eec:	f000 fa16 	bl	800231c <SetMinute>
        	            if(IsButtonSet())
 8001ef0:	f000 f964 	bl	80021bc <IsButtonSet>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 813e 	beq.w	8002178 <SetUpTime+0x334>
        	                statusSetupTime = SET_SEC;
 8001efc:	4b87      	ldr	r3, [pc, #540]	; (800211c <SetUpTime+0x2d8>)
 8001efe:	2203      	movs	r2, #3
 8001f00:	601a      	str	r2, [r3, #0]
        	            break;
 8001f02:	e139      	b.n	8002178 <SetUpTime+0x334>
        	        	SetSecond();
 8001f04:	f000 fa62 	bl	80023cc <SetSecond>
        	            if(IsButtonSet())
 8001f08:	f000 f958 	bl	80021bc <IsButtonSet>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8134 	beq.w	800217c <SetUpTime+0x338>
        	                statusSetupTime = SET_DAY;
 8001f14:	4b81      	ldr	r3, [pc, #516]	; (800211c <SetUpTime+0x2d8>)
 8001f16:	2204      	movs	r2, #4
 8001f18:	601a      	str	r2, [r3, #0]
        	            break;
 8001f1a:	e12f      	b.n	800217c <SetUpTime+0x338>
        	            SetDay();
 8001f1c:	f000 faae 	bl	800247c <SetDay>
        	            if(IsButtonSet())
 8001f20:	f000 f94c 	bl	80021bc <IsButtonSet>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 812a 	beq.w	8002180 <SetUpTime+0x33c>
        	                statusSetupTime = SET_DATE;
 8001f2c:	4b7b      	ldr	r3, [pc, #492]	; (800211c <SetUpTime+0x2d8>)
 8001f2e:	2205      	movs	r2, #5
 8001f30:	601a      	str	r2, [r3, #0]
        	            break;
 8001f32:	e125      	b.n	8002180 <SetUpTime+0x33c>
        	            SetDate();
 8001f34:	f000 fb02 	bl	800253c <SetDate>
        	            if(IsButtonSet())
 8001f38:	f000 f940 	bl	80021bc <IsButtonSet>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8120 	beq.w	8002184 <SetUpTime+0x340>
        	                statusSetupTime = SET_MONTH;
 8001f44:	4b75      	ldr	r3, [pc, #468]	; (800211c <SetUpTime+0x2d8>)
 8001f46:	2206      	movs	r2, #6
 8001f48:	601a      	str	r2, [r3, #0]
        	            break;
 8001f4a:	e11b      	b.n	8002184 <SetUpTime+0x340>
        	            SetMonth();
 8001f4c:	f000 fb56 	bl	80025fc <SetMonth>
        	            if(IsButtonSet())
 8001f50:	f000 f934 	bl	80021bc <IsButtonSet>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8116 	beq.w	8002188 <SetUpTime+0x344>
        	                statusSetupTime = SET_YEAR;
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	; (800211c <SetUpTime+0x2d8>)
 8001f5e:	2207      	movs	r2, #7
 8001f60:	601a      	str	r2, [r3, #0]
        	            break;
 8001f62:	e111      	b.n	8002188 <SetUpTime+0x344>
        	            SetYear();
 8001f64:	f000 fbaa 	bl	80026bc <SetYear>
        	            if(IsButtonSet())
 8001f68:	f000 f928 	bl	80021bc <IsButtonSet>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 810c 	beq.w	800218c <SetUpTime+0x348>
        	                statusSetupTime = SET_HOUR;
 8001f74:	4b69      	ldr	r3, [pc, #420]	; (800211c <SetUpTime+0x2d8>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
        	            break;
 8001f7a:	e107      	b.n	800218c <SetUpTime+0x348>
        	            statusSetupTime = SET_HOUR;
 8001f7c:	4b67      	ldr	r3, [pc, #412]	; (800211c <SetUpTime+0x2d8>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
        	            break;
 8001f82:	e112      	b.n	80021aa <SetUpTime+0x366>
        else if (statusSystem == MODE_3)
 8001f84:	4b64      	ldr	r3, [pc, #400]	; (8002118 <SetUpTime+0x2d4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d168      	bne.n	800205e <SetUpTime+0x21a>
            if (IsButtonMode())
 8001f8c:	f000 f926 	bl	80021dc <IsButtonMode>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d030      	beq.n	8001ff8 <SetUpTime+0x1b4>
                statusSystem = MODE_4;
 8001f96:	4b60      	ldr	r3, [pc, #384]	; (8002118 <SetUpTime+0x2d4>)
 8001f98:	2203      	movs	r2, #3
 8001f9a:	601a      	str	r2, [r3, #0]
                uart_hour = 0;
 8001f9c:	4b66      	ldr	r3, [pc, #408]	; (8002138 <SetUpTime+0x2f4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
                uart_Rs232SendString((void*)"Hour: ");
 8001fa2:	4866      	ldr	r0, [pc, #408]	; (800213c <SetUpTime+0x2f8>)
 8001fa4:	f000 ff94 	bl	8002ed0 <uart_Rs232SendString>
                set_hour = ds3231_hours;
 8001fa8:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <SetUpTime+0x2dc>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <SetUpTime+0x2fc>)
 8001fb0:	601a      	str	r2, [r3, #0]
                set_min = ds3231_min;
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <SetUpTime+0x2e4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b62      	ldr	r3, [pc, #392]	; (8002144 <SetUpTime+0x300>)
 8001fba:	601a      	str	r2, [r3, #0]
                set_sec = ds3231_sec;
 8001fbc:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <SetUpTime+0x2ec>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <SetUpTime+0x304>)
 8001fc4:	601a      	str	r2, [r3, #0]
                ds3231_Write(ADDRESS_HOUR, pre_hour);
 8001fc6:	4b57      	ldr	r3, [pc, #348]	; (8002124 <SetUpTime+0x2e0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f7fe fb7a 	bl	80006c8 <ds3231_Write>
                ds3231_Write(ADDRESS_MIN, pre_min);
 8001fd4:	4b55      	ldr	r3, [pc, #340]	; (800212c <SetUpTime+0x2e8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4619      	mov	r1, r3
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7fe fb73 	bl	80006c8 <ds3231_Write>
                ds3231_Write(ADDRESS_SEC, pre_sec);
 8001fe2:	4b54      	ldr	r3, [pc, #336]	; (8002134 <SetUpTime+0x2f0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7fe fb6c 	bl	80006c8 <ds3231_Write>
                statusSetupTime = SET_UART_HOUR;
 8001ff0:	4b4a      	ldr	r3, [pc, #296]	; (800211c <SetUpTime+0x2d8>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	601a      	str	r2, [r3, #0]
	}
 8001ff6:	e0d8      	b.n	80021aa <SetUpTime+0x366>
        	    switch(statusSetupTime)
 8001ff8:	4b48      	ldr	r3, [pc, #288]	; (800211c <SetUpTime+0x2d8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d01e      	beq.n	800203e <SetUpTime+0x1fa>
 8002000:	2b03      	cmp	r3, #3
 8002002:	dc28      	bgt.n	8002056 <SetUpTime+0x212>
 8002004:	2b01      	cmp	r3, #1
 8002006:	d002      	beq.n	800200e <SetUpTime+0x1ca>
 8002008:	2b02      	cmp	r3, #2
 800200a:	d00c      	beq.n	8002026 <SetUpTime+0x1e2>
 800200c:	e023      	b.n	8002056 <SetUpTime+0x212>
        	            SetHour();
 800200e:	f000 f92d 	bl	800226c <SetHour>
        	            if(IsButtonSet())
 8002012:	f000 f8d3 	bl	80021bc <IsButtonSet>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80b9 	beq.w	8002190 <SetUpTime+0x34c>
        	                statusSetupTime = SET_MINUTE;
 800201e:	4b3f      	ldr	r3, [pc, #252]	; (800211c <SetUpTime+0x2d8>)
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
        	            break;
 8002024:	e0b4      	b.n	8002190 <SetUpTime+0x34c>
        	            SetMinute();
 8002026:	f000 f979 	bl	800231c <SetMinute>
        	            if(IsButtonSet())
 800202a:	f000 f8c7 	bl	80021bc <IsButtonSet>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80af 	beq.w	8002194 <SetUpTime+0x350>
        	                statusSetupTime = SET_SEC;
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <SetUpTime+0x2d8>)
 8002038:	2203      	movs	r2, #3
 800203a:	601a      	str	r2, [r3, #0]
        	            break;
 800203c:	e0aa      	b.n	8002194 <SetUpTime+0x350>
        	        	SetSecond();
 800203e:	f000 f9c5 	bl	80023cc <SetSecond>
        	            if(IsButtonSet())
 8002042:	f000 f8bb 	bl	80021bc <IsButtonSet>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a5 	beq.w	8002198 <SetUpTime+0x354>
        	                statusSetupTime = SET_HOUR;
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <SetUpTime+0x2d8>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
        	            break;
 8002054:	e0a0      	b.n	8002198 <SetUpTime+0x354>
        	            statusSetupTime = SET_HOUR;
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <SetUpTime+0x2d8>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]
        	            break;
 800205c:	e0a5      	b.n	80021aa <SetUpTime+0x366>
        else if (statusSystem == MODE_4)
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <SetUpTime+0x2d4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b03      	cmp	r3, #3
 8002064:	f040 809a 	bne.w	800219c <SetUpTime+0x358>
            if (IsButtonMode())
 8002068:	f000 f8b8 	bl	80021dc <IsButtonMode>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d013      	beq.n	800209a <SetUpTime+0x256>
                statusSystem = MODE_1;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <SetUpTime+0x2d4>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
                statusSetupTime = INIT_SYSTEM;
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <SetUpTime+0x2d8>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
                lcd_ShowString(20, 40, "                  ", GREEN, BLACK, 24, 0);
 800207e:	2300      	movs	r3, #0
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	2318      	movs	r3, #24
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800208e:	4a2f      	ldr	r2, [pc, #188]	; (800214c <SetUpTime+0x308>)
 8002090:	2128      	movs	r1, #40	; 0x28
 8002092:	2014      	movs	r0, #20
 8002094:	f7ff f81e 	bl	80010d4 <lcd_ShowString>
	}
 8002098:	e087      	b.n	80021aa <SetUpTime+0x366>
        	    switch(statusSetupTime)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <SetUpTime+0x2d8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b0a      	cmp	r3, #10
 80020a0:	d028      	beq.n	80020f4 <SetUpTime+0x2b0>
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	dc5c      	bgt.n	8002160 <SetUpTime+0x31c>
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d002      	beq.n	80020b0 <SetUpTime+0x26c>
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	d011      	beq.n	80020d2 <SetUpTime+0x28e>
 80020ae:	e057      	b.n	8002160 <SetUpTime+0x31c>
        	            SetUartHour();
 80020b0:	f000 fb5c 	bl	800276c <SetUartHour>
        	            if(IsButtonSet())
 80020b4:	f000 f882 	bl	80021bc <IsButtonSet>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d070      	beq.n	80021a0 <SetUpTime+0x35c>
        	            	uart_min = 0;
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <SetUpTime+0x30c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
        	                statusSetupTime = SET_UART_MIN;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <SetUpTime+0x2d8>)
 80020c6:	2209      	movs	r2, #9
 80020c8:	601a      	str	r2, [r3, #0]
        	            	uart_Rs232SendString((void*)"Minute: ");
 80020ca:	4822      	ldr	r0, [pc, #136]	; (8002154 <SetUpTime+0x310>)
 80020cc:	f000 ff00 	bl	8002ed0 <uart_Rs232SendString>
        	            break;
 80020d0:	e066      	b.n	80021a0 <SetUpTime+0x35c>
        	            SetUartMin();
 80020d2:	f000 fb81 	bl	80027d8 <SetUartMin>
        	            if(IsButtonSet())
 80020d6:	f000 f871 	bl	80021bc <IsButtonSet>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d061      	beq.n	80021a4 <SetUpTime+0x360>
        	            	uart_sec = 0;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <SetUpTime+0x314>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
        	                statusSetupTime = SET_UART_SEC;
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <SetUpTime+0x2d8>)
 80020e8:	220a      	movs	r2, #10
 80020ea:	601a      	str	r2, [r3, #0]
        	            	uart_Rs232SendString((void*)"Second: ");
 80020ec:	481b      	ldr	r0, [pc, #108]	; (800215c <SetUpTime+0x318>)
 80020ee:	f000 feef 	bl	8002ed0 <uart_Rs232SendString>
        	            break;
 80020f2:	e057      	b.n	80021a4 <SetUpTime+0x360>
        	        	SetUartSec();
 80020f4:	f000 fba6 	bl	8002844 <SetUartSec>
        	            if(IsButtonSet())
 80020f8:	f000 f860 	bl	80021bc <IsButtonSet>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d052      	beq.n	80021a8 <SetUpTime+0x364>
        	            	uart_hour = 0;
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <SetUpTime+0x2f4>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
        	                statusSetupTime = SET_UART_HOUR;
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <SetUpTime+0x2d8>)
 800210a:	2208      	movs	r2, #8
 800210c:	601a      	str	r2, [r3, #0]
        	            	uart_Rs232SendString((void*)"Hour: ");
 800210e:	480b      	ldr	r0, [pc, #44]	; (800213c <SetUpTime+0x2f8>)
 8002110:	f000 fede 	bl	8002ed0 <uart_Rs232SendString>
        	            break;
 8002114:	e048      	b.n	80021a8 <SetUpTime+0x364>
 8002116:	bf00      	nop
 8002118:	200000a8 	.word	0x200000a8
 800211c:	200000a0 	.word	0x200000a0
 8002120:	20000101 	.word	0x20000101
 8002124:	200000ac 	.word	0x200000ac
 8002128:	200000fe 	.word	0x200000fe
 800212c:	200000b0 	.word	0x200000b0
 8002130:	200000fc 	.word	0x200000fc
 8002134:	200000b4 	.word	0x200000b4
 8002138:	200000b8 	.word	0x200000b8
 800213c:	08008890 	.word	0x08008890
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004
 8002148:	20000008 	.word	0x20000008
 800214c:	08008898 	.word	0x08008898
 8002150:	200000bc 	.word	0x200000bc
 8002154:	080088ac 	.word	0x080088ac
 8002158:	200000c0 	.word	0x200000c0
 800215c:	080088b8 	.word	0x080088b8
        	            statusSetupTime = SET_UART_HOUR;
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <SetUpTime+0x36c>)
 8002162:	2208      	movs	r2, #8
 8002164:	601a      	str	r2, [r3, #0]
        	            uart_hour = 0;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <SetUpTime+0x370>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
        	            uart_Rs232SendString((void*)"Hour: ");
 800216c:	4812      	ldr	r0, [pc, #72]	; (80021b8 <SetUpTime+0x374>)
 800216e:	f000 feaf 	bl	8002ed0 <uart_Rs232SendString>
        	            break;
 8002172:	e01a      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002174:	bf00      	nop
 8002176:	e018      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002178:	bf00      	nop
 800217a:	e016      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 800217c:	bf00      	nop
 800217e:	e014      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002180:	bf00      	nop
 8002182:	e012      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002184:	bf00      	nop
 8002186:	e010      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002188:	bf00      	nop
 800218a:	e00e      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 800218c:	bf00      	nop
 800218e:	e00c      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002190:	bf00      	nop
 8002192:	e00a      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002194:	bf00      	nop
 8002196:	e008      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 8002198:	bf00      	nop
 800219a:	e006      	b.n	80021aa <SetUpTime+0x366>
            }
 800219c:	bf00      	nop
 800219e:	e004      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 80021a0:	bf00      	nop
 80021a2:	e002      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 80021a4:	bf00      	nop
 80021a6:	e000      	b.n	80021aa <SetUpTime+0x366>
        	            break;
 80021a8:	bf00      	nop
	}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200000a0 	.word	0x200000a0
 80021b4:	200000b8 	.word	0x200000b8
 80021b8:	08008890 	.word	0x08008890

080021bc <IsButtonSet>:
	//
    unsigned char IsButtonSet()
	{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
	    if (button_count[12] == 1)
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <IsButtonSet+0x1c>)
 80021c2:	8b1b      	ldrh	r3, [r3, #24]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <IsButtonSet+0x10>
	        return 1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <IsButtonSet+0x12>
	    else
	        return 0;
 80021cc:	2300      	movs	r3, #0
	}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	200000dc 	.word	0x200000dc

080021dc <IsButtonMode>:
	unsigned char IsButtonMode()
	{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	    if (button_count[14] == 1)
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <IsButtonMode+0x1c>)
 80021e2:	8b9b      	ldrh	r3, [r3, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <IsButtonMode+0x10>
	        return 1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <IsButtonMode+0x12>
	    else
	        return 0;
 80021ec:	2300      	movs	r3, #0
	}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	200000dc 	.word	0x200000dc

080021fc <IsButtonUp>:

	unsigned char IsButtonUp()
	{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	    if ((button_count[3] == 1) || (button_count[3] >= 10 && button_count[3]%4 == 0))
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <IsButtonUp+0x34>)
 8002202:	88db      	ldrh	r3, [r3, #6]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d00a      	beq.n	800221e <IsButtonUp+0x22>
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <IsButtonUp+0x34>)
 800220a:	88db      	ldrh	r3, [r3, #6]
 800220c:	2b09      	cmp	r3, #9
 800220e:	d908      	bls.n	8002222 <IsButtonUp+0x26>
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <IsButtonUp+0x34>)
 8002212:	88db      	ldrh	r3, [r3, #6]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <IsButtonUp+0x26>
	        return 1;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <IsButtonUp+0x28>
	    else
	        return 0;
 8002222:	2300      	movs	r3, #0
	}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200000dc 	.word	0x200000dc

08002234 <IsButtonDown>:

	unsigned char IsButtonDown()
	{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	    if ((button_count[7] == 1) || (button_count[7] >= 10 && button_count[7]%4 == 0))
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <IsButtonDown+0x34>)
 800223a:	89db      	ldrh	r3, [r3, #14]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d00a      	beq.n	8002256 <IsButtonDown+0x22>
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <IsButtonDown+0x34>)
 8002242:	89db      	ldrh	r3, [r3, #14]
 8002244:	2b09      	cmp	r3, #9
 8002246:	d908      	bls.n	800225a <IsButtonDown+0x26>
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <IsButtonDown+0x34>)
 800224a:	89db      	ldrh	r3, [r3, #14]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <IsButtonDown+0x26>
	        return 1;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <IsButtonDown+0x28>
	    else
	        return 0;
 800225a:	2300      	movs	r3, #0
	}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	200000dc 	.word	0x200000dc

0800226c <SetHour>:

	void SetHour()
	{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af04      	add	r7, sp, #16
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
	    timeBlink = (timeBlink + 1)%20;
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <SetHour+0xa0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <SetHour+0xa4>)
 800227a:	fb83 2301 	smull	r2, r3, r3, r1
 800227e:	10da      	asrs	r2, r3, #3
 8002280:	17cb      	asrs	r3, r1, #31
 8002282:	1ad2      	subs	r2, r2, r3
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	1aca      	subs	r2, r1, r3
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <SetHour+0xa0>)
 8002290:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <SetHour+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b04      	cmp	r3, #4
 8002298:	dc0c      	bgt.n	80022b4 <SetHour+0x48>
	    	lcd_ShowString(70, 100, "  ", GREEN, BLACK, 24, 0);
 800229a:	2300      	movs	r3, #0
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2318      	movs	r3, #24
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80022aa:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <SetHour+0xa8>)
 80022ac:	2164      	movs	r1, #100	; 0x64
 80022ae:	2046      	movs	r0, #70	; 0x46
 80022b0:	f7fe ff10 	bl	80010d4 <lcd_ShowString>
	    if(IsButtonUp())
 80022b4:	f7ff ffa2 	bl	80021fc <IsButtonUp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d012      	beq.n	80022e4 <SetHour+0x78>
	    {
	        ds3231_hours++;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <SetHour+0xac>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <SetHour+0xac>)
 80022c8:	701a      	strb	r2, [r3, #0]
	        if(ds3231_hours > 23)
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <SetHour+0xac>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b17      	cmp	r3, #23
 80022d0:	d902      	bls.n	80022d8 <SetHour+0x6c>
	            ds3231_hours = 0;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <SetHour+0xac>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <SetHour+0xac>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	2002      	movs	r0, #2
 80022e0:	f7fe f9f2 	bl	80006c8 <ds3231_Write>
	    }
	    if(IsButtonDown())
 80022e4:	f7ff ffa6 	bl	8002234 <IsButtonDown>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <SetHour+0x9a>
	    {
	        ds3231_hours--;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <SetHour+0xac>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <SetHour+0xac>)
 80022f8:	701a      	strb	r2, [r3, #0]
	        if(ds3231_hours < 0)
	            ds3231_hours = 23;
	        ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <SetHour+0xac>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	2002      	movs	r0, #2
 8002302:	f7fe f9e1 	bl	80006c8 <ds3231_Write>
	    }
	}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200000a4 	.word	0x200000a4
 8002310:	66666667 	.word	0x66666667
 8002314:	080088c4 	.word	0x080088c4
 8002318:	20000101 	.word	0x20000101

0800231c <SetMinute>:

	void SetMinute()
	{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <SetMinute+0xa0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c59      	adds	r1, r3, #1
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <SetMinute+0xa4>)
 800232a:	fb83 2301 	smull	r2, r3, r3, r1
 800232e:	10da      	asrs	r2, r3, #3
 8002330:	17cb      	asrs	r3, r1, #31
 8002332:	1ad2      	subs	r2, r2, r3
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	1aca      	subs	r2, r1, r3
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <SetMinute+0xa0>)
 8002340:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <SetMinute+0xa0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b04      	cmp	r3, #4
 8002348:	dc0c      	bgt.n	8002364 <SetMinute+0x48>
	    	lcd_ShowString(110, 100, "  ", GREEN, BLACK, 24, 0);
 800234a:	2300      	movs	r3, #0
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	2318      	movs	r3, #24
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2300      	movs	r3, #0
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <SetMinute+0xa8>)
 800235c:	2164      	movs	r1, #100	; 0x64
 800235e:	206e      	movs	r0, #110	; 0x6e
 8002360:	f7fe feb8 	bl	80010d4 <lcd_ShowString>
	    if(IsButtonUp())
 8002364:	f7ff ff4a 	bl	80021fc <IsButtonUp>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <SetMinute+0x78>
	    {
	        ds3231_min++;
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <SetMinute+0xac>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <SetMinute+0xac>)
 8002378:	701a      	strb	r2, [r3, #0]
	        if(ds3231_min > 59)
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <SetMinute+0xac>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b3b      	cmp	r3, #59	; 0x3b
 8002380:	d902      	bls.n	8002388 <SetMinute+0x6c>
	            ds3231_min = 0;
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <SetMinute+0xac>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_MIN, ds3231_min);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <SetMinute+0xac>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	2001      	movs	r0, #1
 8002390:	f7fe f99a 	bl	80006c8 <ds3231_Write>
	    }
	    if(IsButtonDown())
 8002394:	f7ff ff4e 	bl	8002234 <IsButtonDown>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <SetMinute+0x9a>
	    {
	    	ds3231_min--;
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <SetMinute+0xac>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <SetMinute+0xac>)
 80023a8:	701a      	strb	r2, [r3, #0]
	        if(ds3231_min < 0)
	        	ds3231_min = 59;
	        ds3231_Write(ADDRESS_MIN, ds3231_min);
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <SetMinute+0xac>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7fe f989 	bl	80006c8 <ds3231_Write>
	    }

	}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200000a4 	.word	0x200000a4
 80023c0:	66666667 	.word	0x66666667
 80023c4:	080088c4 	.word	0x080088c4
 80023c8:	200000fe 	.word	0x200000fe

080023cc <SetSecond>:
	void SetSecond()
	{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <SetSecond+0xa0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1c59      	adds	r1, r3, #1
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <SetSecond+0xa4>)
 80023da:	fb83 2301 	smull	r2, r3, r3, r1
 80023de:	10da      	asrs	r2, r3, #3
 80023e0:	17cb      	asrs	r3, r1, #31
 80023e2:	1ad2      	subs	r2, r2, r3
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	1aca      	subs	r2, r1, r3
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <SetSecond+0xa0>)
 80023f0:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <SetSecond+0xa0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	dc0c      	bgt.n	8002414 <SetSecond+0x48>
	    	lcd_ShowString(150, 100, "  ", GREEN, BLACK, 24, 0);
 80023fa:	2300      	movs	r3, #0
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	2318      	movs	r3, #24
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <SetSecond+0xa8>)
 800240c:	2164      	movs	r1, #100	; 0x64
 800240e:	2096      	movs	r0, #150	; 0x96
 8002410:	f7fe fe60 	bl	80010d4 <lcd_ShowString>
	    if(IsButtonUp())
 8002414:	f7ff fef2 	bl	80021fc <IsButtonUp>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d012      	beq.n	8002444 <SetSecond+0x78>
	    {
	    	ds3231_sec++;
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <SetSecond+0xac>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <SetSecond+0xac>)
 8002428:	701a      	strb	r2, [r3, #0]
	        if(ds3231_sec > 59)
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <SetSecond+0xac>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b3b      	cmp	r3, #59	; 0x3b
 8002430:	d902      	bls.n	8002438 <SetSecond+0x6c>
	        	ds3231_sec = 0;
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <SetSecond+0xac>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <SetSecond+0xac>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	2000      	movs	r0, #0
 8002440:	f7fe f942 	bl	80006c8 <ds3231_Write>
	    }
	    if(IsButtonDown())
 8002444:	f7ff fef6 	bl	8002234 <IsButtonDown>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <SetSecond+0x9a>
	    {
	    	ds3231_sec--;
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <SetSecond+0xac>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	3b01      	subs	r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <SetSecond+0xac>)
 8002458:	701a      	strb	r2, [r3, #0]
	        if(ds3231_sec < 0)
	        	ds3231_sec = 59;
	        ds3231_Write(ADDRESS_SEC, ds3231_sec);
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <SetSecond+0xac>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	2000      	movs	r0, #0
 8002462:	f7fe f931 	bl	80006c8 <ds3231_Write>
	    }

	}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200000a4 	.word	0x200000a4
 8002470:	66666667 	.word	0x66666667
 8002474:	080088c4 	.word	0x080088c4
 8002478:	200000fc 	.word	0x200000fc

0800247c <SetDay>:

	void SetDay()
	{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <SetDay+0xb0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1c59      	adds	r1, r3, #1
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <SetDay+0xb4>)
 800248a:	fb83 2301 	smull	r2, r3, r3, r1
 800248e:	10da      	asrs	r2, r3, #3
 8002490:	17cb      	asrs	r3, r1, #31
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	1aca      	subs	r2, r1, r3
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <SetDay+0xb0>)
 80024a0:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <SetDay+0xb0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	dc0c      	bgt.n	80024c4 <SetDay+0x48>
	    	lcd_ShowString(20, 130, "  ", GREEN, BLACK, 24, 0);
 80024aa:	2300      	movs	r3, #0
 80024ac:	9302      	str	r3, [sp, #8]
 80024ae:	2318      	movs	r3, #24
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	2300      	movs	r3, #0
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024ba:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <SetDay+0xb8>)
 80024bc:	2182      	movs	r1, #130	; 0x82
 80024be:	2014      	movs	r0, #20
 80024c0:	f7fe fe08 	bl	80010d4 <lcd_ShowString>
	    if(IsButtonUp())
 80024c4:	f7ff fe9a 	bl	80021fc <IsButtonUp>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d012      	beq.n	80024f4 <SetDay+0x78>
	    {
	    	ds3231_day++;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <SetDay+0xbc>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <SetDay+0xbc>)
 80024d8:	701a      	strb	r2, [r3, #0]
	        if(ds3231_day > 7)
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <SetDay+0xbc>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	d902      	bls.n	80024e8 <SetDay+0x6c>
	        	ds3231_day = 1;
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <SetDay+0xbc>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DAY, ds3231_day);
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <SetDay+0xbc>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	2003      	movs	r0, #3
 80024f0:	f7fe f8ea 	bl	80006c8 <ds3231_Write>
	    }
	    if(IsButtonDown())
 80024f4:	f7ff fe9e 	bl	8002234 <IsButtonDown>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d012      	beq.n	8002524 <SetDay+0xa8>
	    {
	    	ds3231_day--;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <SetDay+0xbc>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	3b01      	subs	r3, #1
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <SetDay+0xbc>)
 8002508:	701a      	strb	r2, [r3, #0]
	        if(ds3231_day < 1)
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <SetDay+0xbc>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <SetDay+0x9c>
	        	ds3231_day = 7;
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <SetDay+0xbc>)
 8002514:	2207      	movs	r2, #7
 8002516:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DAY, ds3231_day);
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <SetDay+0xbc>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	2003      	movs	r0, #3
 8002520:	f7fe f8d2 	bl	80006c8 <ds3231_Write>
	    }
	}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200000a4 	.word	0x200000a4
 8002530:	66666667 	.word	0x66666667
 8002534:	080088c4 	.word	0x080088c4
 8002538:	20000100 	.word	0x20000100

0800253c <SetDate>:

	void SetDate()
	{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <SetDate+0xb0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1c59      	adds	r1, r3, #1
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <SetDate+0xb4>)
 800254a:	fb83 2301 	smull	r2, r3, r3, r1
 800254e:	10da      	asrs	r2, r3, #3
 8002550:	17cb      	asrs	r3, r1, #31
 8002552:	1ad2      	subs	r2, r2, r3
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	1aca      	subs	r2, r1, r3
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <SetDate+0xb0>)
 8002560:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <SetDate+0xb0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b04      	cmp	r3, #4
 8002568:	dc0c      	bgt.n	8002584 <SetDate+0x48>
	    	lcd_ShowString(70, 130, "  ", GREEN, BLACK, 24, 0);
 800256a:	2300      	movs	r3, #0
 800256c:	9302      	str	r3, [sp, #8]
 800256e:	2318      	movs	r3, #24
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <SetDate+0xb8>)
 800257c:	2182      	movs	r1, #130	; 0x82
 800257e:	2046      	movs	r0, #70	; 0x46
 8002580:	f7fe fda8 	bl	80010d4 <lcd_ShowString>
	    if(IsButtonUp())
 8002584:	f7ff fe3a 	bl	80021fc <IsButtonUp>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <SetDate+0x78>
	    {
	    	ds3231_date++;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <SetDate+0xbc>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <SetDate+0xbc>)
 8002598:	701a      	strb	r2, [r3, #0]
	        if(ds3231_date > 31)
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <SetDate+0xbc>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b1f      	cmp	r3, #31
 80025a0:	d902      	bls.n	80025a8 <SetDate+0x6c>
	        	ds3231_date = 1;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <SetDate+0xbc>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DATE, ds3231_date);
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <SetDate+0xbc>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	2004      	movs	r0, #4
 80025b0:	f7fe f88a 	bl	80006c8 <ds3231_Write>
	    }
	    if(IsButtonDown())
 80025b4:	f7ff fe3e 	bl	8002234 <IsButtonDown>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <SetDate+0xa8>
	    {
	    	ds3231_date--;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <SetDate+0xbc>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <SetDate+0xbc>)
 80025c8:	701a      	strb	r2, [r3, #0]
	        if(ds3231_date < 1)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <SetDate+0xbc>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <SetDate+0x9c>
	        	ds3231_date = 31;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <SetDate+0xbc>)
 80025d4:	221f      	movs	r2, #31
 80025d6:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DATE, ds3231_date);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <SetDate+0xbc>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	2004      	movs	r0, #4
 80025e0:	f7fe f872 	bl	80006c8 <ds3231_Write>
	    }
	}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200000a4 	.word	0x200000a4
 80025f0:	66666667 	.word	0x66666667
 80025f4:	080088c4 	.word	0x080088c4
 80025f8:	200000ff 	.word	0x200000ff

080025fc <SetMonth>:

	void SetMonth()
	{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 8002602:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <SetMonth+0xb0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <SetMonth+0xb4>)
 800260a:	fb83 2301 	smull	r2, r3, r3, r1
 800260e:	10da      	asrs	r2, r3, #3
 8002610:	17cb      	asrs	r3, r1, #31
 8002612:	1ad2      	subs	r2, r2, r3
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	1aca      	subs	r2, r1, r3
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <SetMonth+0xb0>)
 8002620:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <SetMonth+0xb0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b04      	cmp	r3, #4
 8002628:	dc0c      	bgt.n	8002644 <SetMonth+0x48>
	    	lcd_ShowString(105, 130, "  ", GREEN, BLACK, 24, 0);
 800262a:	2300      	movs	r3, #0
 800262c:	9302      	str	r3, [sp, #8]
 800262e:	2318      	movs	r3, #24
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	2300      	movs	r3, #0
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <SetMonth+0xb8>)
 800263c:	2182      	movs	r1, #130	; 0x82
 800263e:	2069      	movs	r0, #105	; 0x69
 8002640:	f7fe fd48 	bl	80010d4 <lcd_ShowString>
	    if(IsButtonUp())
 8002644:	f7ff fdda 	bl	80021fc <IsButtonUp>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d012      	beq.n	8002674 <SetMonth+0x78>
	    {
	    	ds3231_month++;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <SetMonth+0xbc>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <SetMonth+0xbc>)
 8002658:	701a      	strb	r2, [r3, #0]
	        if(ds3231_month > 12)
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <SetMonth+0xbc>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d902      	bls.n	8002668 <SetMonth+0x6c>
	        	ds3231_month = 1;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <SetMonth+0xbc>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <SetMonth+0xbc>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	2005      	movs	r0, #5
 8002670:	f7fe f82a 	bl	80006c8 <ds3231_Write>
	    }
	    if(IsButtonDown())
 8002674:	f7ff fdde 	bl	8002234 <IsButtonDown>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <SetMonth+0xa8>
	    {
	    	ds3231_month--;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <SetMonth+0xbc>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	3b01      	subs	r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <SetMonth+0xbc>)
 8002688:	701a      	strb	r2, [r3, #0]
	        if(ds3231_month < 1)
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <SetMonth+0xbc>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <SetMonth+0x9c>
	        	ds3231_month = 12;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <SetMonth+0xbc>)
 8002694:	220c      	movs	r2, #12
 8002696:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <SetMonth+0xbc>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	2005      	movs	r0, #5
 80026a0:	f7fe f812 	bl	80006c8 <ds3231_Write>
	    }
	}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200000a4 	.word	0x200000a4
 80026b0:	66666667 	.word	0x66666667
 80026b4:	080088c4 	.word	0x080088c4
 80026b8:	20000102 	.word	0x20000102

080026bc <SetYear>:

	void SetYear()
	{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <SetYear+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <SetYear+0xa4>)
 80026ca:	fb83 2301 	smull	r2, r3, r3, r1
 80026ce:	10da      	asrs	r2, r3, #3
 80026d0:	17cb      	asrs	r3, r1, #31
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	1aca      	subs	r2, r1, r3
 80026de:	4b1f      	ldr	r3, [pc, #124]	; (800275c <SetYear+0xa0>)
 80026e0:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <SetYear+0xa0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	dc0c      	bgt.n	8002704 <SetYear+0x48>
	    	lcd_ShowString(176, 130, "  ", GREEN, BLACK, 24, 0);
 80026ea:	2300      	movs	r3, #0
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	2318      	movs	r3, #24
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <SetYear+0xa8>)
 80026fc:	2182      	movs	r1, #130	; 0x82
 80026fe:	20b0      	movs	r0, #176	; 0xb0
 8002700:	f7fe fce8 	bl	80010d4 <lcd_ShowString>
	    if(IsButtonUp())
 8002704:	f7ff fd7a 	bl	80021fc <IsButtonUp>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <SetYear+0x78>
	    {
	    	ds3231_year++;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <SetYear+0xac>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <SetYear+0xac>)
 8002718:	701a      	strb	r2, [r3, #0]
	        if(ds3231_year > 99)
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <SetYear+0xac>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b63      	cmp	r3, #99	; 0x63
 8002720:	d902      	bls.n	8002728 <SetYear+0x6c>
	        	ds3231_year = 0;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <SetYear+0xac>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <SetYear+0xac>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	2006      	movs	r0, #6
 8002730:	f7fd ffca 	bl	80006c8 <ds3231_Write>
	    }
	    if(IsButtonDown())
 8002734:	f7ff fd7e 	bl	8002234 <IsButtonDown>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <SetYear+0x9a>
	    {
	    	ds3231_year--;
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <SetYear+0xac>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	3b01      	subs	r3, #1
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <SetYear+0xac>)
 8002748:	701a      	strb	r2, [r3, #0]
	        if(ds3231_year < 0)
	        	ds3231_year = 99;
	        ds3231_Write(ADDRESS_YEAR, ds3231_year);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <SetYear+0xac>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	4619      	mov	r1, r3
 8002750:	2006      	movs	r0, #6
 8002752:	f7fd ffb9 	bl	80006c8 <ds3231_Write>
	    }
	}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200000a4 	.word	0x200000a4
 8002760:	66666667 	.word	0x66666667
 8002764:	080088c4 	.word	0x080088c4
 8002768:	200000fd 	.word	0x200000fd

0800276c <SetUartHour>:

	void SetUartHour()
	{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	af04      	add	r7, sp, #16
    	lcd_ShowString(20, 40, "Updating hours ...", GREEN, BLACK, 24, 0);
 8002772:	2300      	movs	r3, #0
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	2318      	movs	r3, #24
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	2300      	movs	r3, #0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <SetUartHour+0x60>)
 8002784:	2128      	movs	r1, #40	; 0x28
 8002786:	2014      	movs	r0, #20
 8002788:	f7fe fca4 	bl	80010d4 <lcd_ShowString>
    	while (!isRingBufferEmpty(&buffer))
 800278c:	e00d      	b.n	80027aa <SetUartHour+0x3e>
		{
    		uart_hour = uart_hour * 10 + getFromRingBuffer(&buffer);
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <SetUartHour+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	461c      	mov	r4, r3
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <SetUartHour+0x68>)
 800279e:	f000 f8fd 	bl	800299c <getFromRingBuffer>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4423      	add	r3, r4
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SetUartHour+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]
    	while (!isRingBufferEmpty(&buffer))
 80027aa:	480a      	ldr	r0, [pc, #40]	; (80027d4 <SetUartHour+0x68>)
 80027ac:	f000 f895 	bl	80028da <isRingBufferEmpty>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0eb      	beq.n	800278e <SetUartHour+0x22>
		}
    	ds3231_Write(ADDRESS_HOUR, uart_hour);
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <SetUartHour+0x64>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4619      	mov	r1, r3
 80027be:	2002      	movs	r0, #2
 80027c0:	f7fd ff82 	bl	80006c8 <ds3231_Write>
	}
 80027c4:	bf00      	nop
 80027c6:	3704      	adds	r7, #4
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	080088c8 	.word	0x080088c8
 80027d0:	200000b8 	.word	0x200000b8
 80027d4:	200002f0 	.word	0x200002f0

080027d8 <SetUartMin>:

	void SetUartMin()
	{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b085      	sub	sp, #20
 80027dc:	af04      	add	r7, sp, #16
    	lcd_ShowString(20, 40, "Updating min ...", GREEN, BLACK, 24, 0);
 80027de:	2300      	movs	r3, #0
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	2318      	movs	r3, #24
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	2300      	movs	r3, #0
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <SetUartMin+0x60>)
 80027f0:	2128      	movs	r1, #40	; 0x28
 80027f2:	2014      	movs	r0, #20
 80027f4:	f7fe fc6e 	bl	80010d4 <lcd_ShowString>
    	while (!isRingBufferEmpty(&buffer))
 80027f8:	e00d      	b.n	8002816 <SetUartMin+0x3e>
		{
//    		uart_min += getFromRingBuffer(&buffer);
    		uart_min = uart_min * 10 + getFromRingBuffer(&buffer);
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <SetUartMin+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	461c      	mov	r4, r3
 8002808:	480d      	ldr	r0, [pc, #52]	; (8002840 <SetUartMin+0x68>)
 800280a:	f000 f8c7 	bl	800299c <getFromRingBuffer>
 800280e:	4603      	mov	r3, r0
 8002810:	4423      	add	r3, r4
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SetUartMin+0x64>)
 8002814:	6013      	str	r3, [r2, #0]
    	while (!isRingBufferEmpty(&buffer))
 8002816:	480a      	ldr	r0, [pc, #40]	; (8002840 <SetUartMin+0x68>)
 8002818:	f000 f85f 	bl	80028da <isRingBufferEmpty>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0eb      	beq.n	80027fa <SetUartMin+0x22>
		}
//    	lcd_ShowIntNum(100, 240, uart_min, 2, YELLOW, BLACK, 16);
    	ds3231_Write(ADDRESS_MIN, uart_min);
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <SetUartMin+0x64>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	2001      	movs	r0, #1
 800282c:	f7fd ff4c 	bl	80006c8 <ds3231_Write>
	}
 8002830:	bf00      	nop
 8002832:	3704      	adds	r7, #4
 8002834:	46bd      	mov	sp, r7
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	080088dc 	.word	0x080088dc
 800283c:	200000bc 	.word	0x200000bc
 8002840:	200002f0 	.word	0x200002f0

08002844 <SetUartSec>:

	void SetUartSec()
	{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b085      	sub	sp, #20
 8002848:	af04      	add	r7, sp, #16
    	lcd_ShowString(20, 40, "Updating sec ...", GREEN, BLACK, 24, 0);
 800284a:	2300      	movs	r3, #0
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2318      	movs	r3, #24
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <SetUartSec+0x60>)
 800285c:	2128      	movs	r1, #40	; 0x28
 800285e:	2014      	movs	r0, #20
 8002860:	f7fe fc38 	bl	80010d4 <lcd_ShowString>
    	if (!isRingBufferEmpty(&buffer))
 8002864:	4810      	ldr	r0, [pc, #64]	; (80028a8 <SetUartSec+0x64>)
 8002866:	f000 f838 	bl	80028da <isRingBufferEmpty>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <SetUartSec+0x48>
		{
    		uart_sec = uart_sec * 10 + getFromRingBuffer(&buffer);
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <SetUartSec+0x68>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	461c      	mov	r4, r3
 800287e:	480a      	ldr	r0, [pc, #40]	; (80028a8 <SetUartSec+0x64>)
 8002880:	f000 f88c 	bl	800299c <getFromRingBuffer>
 8002884:	4603      	mov	r3, r0
 8002886:	4423      	add	r3, r4
 8002888:	4a08      	ldr	r2, [pc, #32]	; (80028ac <SetUartSec+0x68>)
 800288a:	6013      	str	r3, [r2, #0]
		}
    	ds3231_Write(ADDRESS_SEC, uart_sec);
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <SetUartSec+0x68>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	2000      	movs	r0, #0
 8002896:	f7fd ff17 	bl	80006c8 <ds3231_Write>
	}
 800289a:	bf00      	nop
 800289c:	3704      	adds	r7, #4
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd90      	pop	{r4, r7, pc}
 80028a2:	bf00      	nop
 80028a4:	080088f0 	.word	0x080088f0
 80028a8:	200002f0 	.word	0x200002f0
 80028ac:	200000c0 	.word	0x200000c0

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <Error_Handler+0x8>

080028ba <initRingBuffer>:
 */


#include "ring_buffer.h"

void initRingBuffer(RingBuffer *buffer) {
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  buffer->head = 0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
  buffer->tail = 0;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <isRingBufferEmpty>:

int isRingBufferEmpty(RingBuffer *buffer) {
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  return buffer->head == buffer->tail;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	429a      	cmp	r2, r3
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <isRingBufferFull>:

int isRingBufferFull(RingBuffer *buffer) {
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return (buffer->tail + 1) % BUFFER_SIZE == buffer->head;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	1c59      	adds	r1, r3, #1
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <isRingBufferFull+0x40>)
 8002910:	fb83 2301 	smull	r2, r3, r3, r1
 8002914:	109a      	asrs	r2, r3, #2
 8002916:	17cb      	asrs	r3, r1, #31
 8002918:	1ad2      	subs	r2, r2, r3
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	1aca      	subs	r2, r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	429a      	cmp	r2, r3
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	66666667 	.word	0x66666667

08002944 <addToRingBuffer>:

void addToRingBuffer(RingBuffer *buffer, int data) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  if (isRingBufferFull(buffer)) {
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffd6 	bl	8002900 <isRingBufferFull>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <addToRingBuffer+0x1e>
    printf("Ring buffer is full!\n");
 800295a:	480e      	ldr	r0, [pc, #56]	; (8002994 <addToRingBuffer+0x50>)
 800295c:	f004 ff96 	bl	800788c <puts>
    return;
 8002960:	e015      	b.n	800298e <addToRingBuffer+0x4a>
  }

  buffer->data[buffer->tail] = data;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	1c59      	adds	r1, r3, #1
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <addToRingBuffer+0x54>)
 8002976:	fb83 2301 	smull	r2, r3, r3, r1
 800297a:	109a      	asrs	r2, r3, #2
 800297c:	17cb      	asrs	r3, r1, #31
 800297e:	1ad2      	subs	r2, r2, r3
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	1aca      	subs	r2, r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	08008904 	.word	0x08008904
 8002998:	66666667 	.word	0x66666667

0800299c <getFromRingBuffer>:

int getFromRingBuffer(RingBuffer *buffer) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if (isRingBufferEmpty(buffer)) {
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff98 	bl	80028da <isRingBufferEmpty>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <getFromRingBuffer+0x20>
    printf("Ring buffer is empty!\n");
 80029b0:	4810      	ldr	r0, [pc, #64]	; (80029f4 <getFromRingBuffer+0x58>)
 80029b2:	f004 ff6b 	bl	800788c <puts>
    return -1;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ba:	e017      	b.n	80029ec <getFromRingBuffer+0x50>
  }

  int data = buffer->data[buffer->head] - 48;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c6:	3b30      	subs	r3, #48	; 0x30
 80029c8:	60fb      	str	r3, [r7, #12]
  buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	1c59      	adds	r1, r3, #1
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <getFromRingBuffer+0x5c>)
 80029d2:	fb83 2301 	smull	r2, r3, r3, r1
 80029d6:	109a      	asrs	r2, r3, #2
 80029d8:	17cb      	asrs	r3, r1, #31
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	1aca      	subs	r2, r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
  return data;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	0800891c 	.word	0x0800891c
 80029f8:	66666667 	.word	0x66666667

080029fc <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <timer_init+0x10>)
 8002a02:	f003 f9d9 	bl	8005db8 <HAL_TIM_Base_Start_IT>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000244 	.word	0x20000244

08002a10 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <setTimer2+0x2c>)
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <setTimer2+0x2c>)
 8002a22:	881a      	ldrh	r2, [r3, #0]
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <setTimer2+0x30>)
 8002a26:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <setTimer2+0x34>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	200000c8 	.word	0x200000c8
 8002a40:	200000c6 	.word	0x200000c6
 8002a44:	200000c4 	.word	0x200000c4

08002a48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d114      	bne.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(timer2_counter > 0){
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a6c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a82:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
//		led7_Scan();
	}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	200000c6 	.word	0x200000c6
 8002a94:	200000c4 	.word	0x200000c4
 8002a98:	200000c8 	.word	0x200000c8

08002a9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002aa2:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <MX_SPI1_Init+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002aa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aae:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002acc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002ae8:	220a      	movs	r2, #10
 8002aea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aec:	4804      	ldr	r0, [pc, #16]	; (8002b00 <MX_SPI1_Init+0x64>)
 8002aee:	f002 fc63 	bl	80053b8 <HAL_SPI_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002af8:	f7ff feda 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200001ec 	.word	0x200001ec
 8002b04:	40013000 	.word	0x40013000

08002b08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_SPI_MspInit+0x84>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d12b      	bne.n	8002b82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_SPI_MspInit+0x88>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_SPI_MspInit+0x88>)
 8002b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <HAL_SPI_MspInit+0x88>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_SPI_MspInit+0x88>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <HAL_SPI_MspInit+0x88>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_SPI_MspInit+0x88>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002b62:	2338      	movs	r3, #56	; 0x38
 8002b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b72:	2305      	movs	r3, #5
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <HAL_SPI_MspInit+0x8c>)
 8002b7e:	f000 fd03 	bl	8003588 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b82:	bf00      	nop
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40013000 	.word	0x40013000
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020400 	.word	0x40020400

08002b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_MspInit+0x4c>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <NMI_Handler+0x4>

08002bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <HardFault_Handler+0x4>

08002bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <MemManage_Handler+0x4>

08002bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <BusFault_Handler+0x4>

08002c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <UsageFault_Handler+0x4>

08002c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c34:	f000 fac0 	bl	80031b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <TIM2_IRQHandler+0x10>)
 8002c42:	f003 f929 	bl	8005e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000244 	.word	0x20000244

08002c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <USART1_IRQHandler+0x10>)
 8002c56:	f003 fdf1 	bl	800683c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000320 	.word	0x20000320

08002c64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e00a      	b.n	8002c8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c76:	f3af 8000 	nop.w
 8002c7a:	4601      	mov	r1, r0
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	60ba      	str	r2, [r7, #8]
 8002c82:	b2ca      	uxtb	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	dbf0      	blt.n	8002c76 <_read+0x12>
	}

return len;
 8002c94:	687b      	ldr	r3, [r7, #4]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	e009      	b.n	8002cc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	60ba      	str	r2, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	dbf1      	blt.n	8002cb0 <_write+0x12>
	}
	return len;
 8002ccc:	687b      	ldr	r3, [r7, #4]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <_close>:

int _close(int file)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
	return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cfe:	605a      	str	r2, [r3, #4]
	return 0;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <_isatty>:

int _isatty(int file)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
	return 1;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <_sbrk+0x5c>)
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <_sbrk+0x60>)
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <_sbrk+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d102      	bne.n	8002d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <_sbrk+0x64>)
 8002d5e:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <_sbrk+0x68>)
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <_sbrk+0x64>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d207      	bcs.n	8002d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d70:	f004 fcec 	bl	800774c <__errno>
 8002d74:	4603      	mov	r3, r0
 8002d76:	220c      	movs	r2, #12
 8002d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	e009      	b.n	8002d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <_sbrk+0x64>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <_sbrk+0x64>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <_sbrk+0x64>)
 8002d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20020000 	.word	0x20020000
 8002da0:	00000400 	.word	0x00000400
 8002da4:	200000cc 	.word	0x200000cc
 8002da8:	20000378 	.word	0x20000378

08002dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <SystemInit+0x20>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <SystemInit+0x20>)
 8002db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de4:	463b      	mov	r3, r7
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002df6:	f240 3247 	movw	r2, #839	; 0x347
 8002dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002e04:	2263      	movs	r2, #99	; 0x63
 8002e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e14:	4813      	ldr	r0, [pc, #76]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002e16:	f002 ff7f 	bl	8005d18 <HAL_TIM_Base_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e20:	f7ff fd46 	bl	80028b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	4619      	mov	r1, r3
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002e32:	f003 f939 	bl	80060a8 <HAL_TIM_ConfigClockSource>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e3c:	f7ff fd38 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e48:	463b      	mov	r3, r7
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_TIM2_Init+0x94>)
 8002e4e:	f003 fb55 	bl	80064fc <HAL_TIMEx_MasterConfigSynchronization>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e58:	f7ff fd2a 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000244 	.word	0x20000244

08002e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d115      	bne.n	8002ea6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_TIM_Base_MspInit+0x48>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <HAL_TIM_Base_MspInit+0x48>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_TIM_Base_MspInit+0x48>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	201c      	movs	r0, #28
 8002e9c:	f000 faab 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ea0:	201c      	movs	r0, #28
 8002ea2:	f000 fac4 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800

08002eb4 <uart_init_rs232>:
	while (n--)
		result *= m;
	return result;
}

void uart_init_rs232() {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <uart_init_rs232+0x14>)
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <uart_init_rs232+0x18>)
 8002ebe:	f003 fc8c 	bl	80067da <HAL_UART_Receive_IT>
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200000d0 	.word	0x200000d0
 8002ecc:	20000320 	.word	0x20000320

08002ed0 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t *str) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*) msg, sprintf((void*) msg, "%s", str),
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4907      	ldr	r1, [pc, #28]	; (8002ef8 <uart_Rs232SendString+0x28>)
 8002edc:	4807      	ldr	r0, [pc, #28]	; (8002efc <uart_Rs232SendString+0x2c>)
 8002ede:	f004 fcdd 	bl	800789c <siprintf>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	4904      	ldr	r1, [pc, #16]	; (8002efc <uart_Rs232SendString+0x2c>)
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <uart_Rs232SendString+0x30>)
 8002eec:	f003 fbe3 	bl	80066b6 <HAL_UART_Transmit>
			10);
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	08008934 	.word	0x08008934
 8002efc:	2000028c 	.word	0x2000028c
 8002f00:	20000320 	.word	0x20000320

08002f04 <HAL_UART_RxCpltCallback>:
	uart_Rs232SendString((void*)".");
	sprintf((void*) msg, "%ld", num % 100);
	uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_UART_RxCpltCallback+0x3c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d110      	bne.n	8002f38 <HAL_UART_RxCpltCallback+0x34>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002f16:	230a      	movs	r3, #10
 8002f18:	2201      	movs	r2, #1
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <HAL_UART_RxCpltCallback+0x40>)
 8002f1c:	480a      	ldr	r0, [pc, #40]	; (8002f48 <HAL_UART_RxCpltCallback+0x44>)
 8002f1e:	f003 fbca 	bl	80066b6 <HAL_UART_Transmit>


		// turn on the receice interrupt
		addToRingBuffer(&buffer, receive_buffer1);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_UART_RxCpltCallback+0x40>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4808      	ldr	r0, [pc, #32]	; (8002f4c <HAL_UART_RxCpltCallback+0x48>)
 8002f2a:	f7ff fd0b 	bl	8002944 <addToRingBuffer>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4904      	ldr	r1, [pc, #16]	; (8002f44 <HAL_UART_RxCpltCallback+0x40>)
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <HAL_UART_RxCpltCallback+0x44>)
 8002f34:	f003 fc51 	bl	80067da <HAL_UART_Receive_IT>
	}
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40011000 	.word	0x40011000
 8002f44:	200000d0 	.word	0x200000d0
 8002f48:	20000320 	.word	0x20000320
 8002f4c:	200002f0 	.word	0x200002f0

08002f50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <MX_USART1_UART_Init+0x50>)
 8002f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f76:	220c      	movs	r2, #12
 8002f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f88:	f003 fb48 	bl	800661c <HAL_UART_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f92:	f7ff fc8d 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000320 	.word	0x20000320
 8002fa0:	40011000 	.word	0x40011000

08002fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_UART_MspInit+0x94>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d134      	bne.n	8003030 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_UART_MspInit+0x98>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_UART_MspInit+0x98>)
 8002fd0:	f043 0310 	orr.w	r3, r3, #16
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_UART_MspInit+0x98>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_UART_MspInit+0x98>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_UART_MspInit+0x98>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_UART_MspInit+0x98>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003010:	2307      	movs	r3, #7
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4619      	mov	r1, r3
 800301a:	4809      	ldr	r0, [pc, #36]	; (8003040 <HAL_UART_MspInit+0x9c>)
 800301c:	f000 fab4 	bl	8003588 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	2025      	movs	r0, #37	; 0x25
 8003026:	f000 f9e6 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800302a:	2025      	movs	r0, #37	; 0x25
 800302c:	f000 f9ff 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40011000 	.word	0x40011000
 800303c:	40023800 	.word	0x40023800
 8003040:	40020000 	.word	0x40020000

08003044 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	0092      	lsls	r2, r2, #2
 8003058:	4413      	add	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4413      	add	r3, r2
 8003068:	b2db      	uxtb	r3, r3
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <DEC2BCD+0x44>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	b258      	sxtb	r0, r3
 8003092:	79fa      	ldrb	r2, [r7, #7]
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <DEC2BCD+0x44>)
 8003096:	fba3 1302 	umull	r1, r3, r3, r2
 800309a:	08d9      	lsrs	r1, r3, #3
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	4303      	orrs	r3, r0
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	cccccccd 	.word	0xcccccccd

080030c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030c4:	480d      	ldr	r0, [pc, #52]	; (80030fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030c6:	490e      	ldr	r1, [pc, #56]	; (8003100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030cc:	e002      	b.n	80030d4 <LoopCopyDataInit>

080030ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d2:	3304      	adds	r3, #4

080030d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d8:	d3f9      	bcc.n	80030ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030da:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030dc:	4c0b      	ldr	r4, [pc, #44]	; (800310c <LoopFillZerobss+0x26>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e0:	e001      	b.n	80030e6 <LoopFillZerobss>

080030e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e4:	3204      	adds	r2, #4

080030e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e8:	d3fb      	bcc.n	80030e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ea:	f7ff fe5f 	bl	8002dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ee:	f004 fb33 	bl	8007758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f2:	f7fe f9d7 	bl	80014a4 <main>
  bx  lr    
 80030f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003100:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003104:	0800b984 	.word	0x0800b984
  ldr r2, =_sbss
 8003108:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800310c:	20000378 	.word	0x20000378

08003110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC_IRQHandler>
	...

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_Init+0x40>)
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_Init+0x40>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_Init+0x40>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313c:	2003      	movs	r0, #3
 800313e:	f000 f94f 	bl	80033e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003142:	200f      	movs	r0, #15
 8003144:	f000 f808 	bl	8003158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003148:	f7ff fd26 	bl	8002b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_InitTick+0x54>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_InitTick+0x58>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f967 	bl	800344a <HAL_SYSTICK_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e00e      	b.n	80031a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d80a      	bhi.n	80031a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800318c:	2200      	movs	r2, #0
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f000 f92f 	bl	80033f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003198:	4a06      	ldr	r2, [pc, #24]	; (80031b4 <HAL_InitTick+0x5c>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	20000014 	.word	0x20000014
 80031b4:	20000010 	.word	0x20000010

080031b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x20>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_IncTick+0x24>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_IncTick+0x24>)
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000014 	.word	0x20000014
 80031dc:	20000364 	.word	0x20000364

080031e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return uwTick;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_GetTick+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000364 	.word	0x20000364

080031f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff ffee 	bl	80031e0 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d005      	beq.n	800321e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_Delay+0x44>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800321e:	bf00      	nop
 8003220:	f7ff ffde 	bl	80031e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	429a      	cmp	r2, r3
 800322e:	d8f7      	bhi.n	8003220 <HAL_Delay+0x28>
  {
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000014 	.word	0x20000014

08003240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800325c:	4013      	ands	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60d3      	str	r3, [r2, #12]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <__NVIC_GetPriorityGrouping+0x18>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	f003 0307 	and.w	r3, r3, #7
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	db0b      	blt.n	80032ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <__NVIC_EnableIRQ+0x38>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2001      	movs	r0, #1
 80032c6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	db0a      	blt.n	800330a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	490c      	ldr	r1, [pc, #48]	; (800332c <__NVIC_SetPriority+0x4c>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	440b      	add	r3, r1
 8003304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003308:	e00a      	b.n	8003320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4908      	ldr	r1, [pc, #32]	; (8003330 <__NVIC_SetPriority+0x50>)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	3b04      	subs	r3, #4
 8003318:	0112      	lsls	r2, r2, #4
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	440b      	add	r3, r1
 800331e:	761a      	strb	r2, [r3, #24]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000e100 	.word	0xe000e100
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f1c3 0307 	rsb	r3, r3, #7
 800334e:	2b04      	cmp	r3, #4
 8003350:	bf28      	it	cs
 8003352:	2304      	movcs	r3, #4
 8003354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3304      	adds	r3, #4
 800335a:	2b06      	cmp	r3, #6
 800335c:	d902      	bls.n	8003364 <NVIC_EncodePriority+0x30>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3b03      	subs	r3, #3
 8003362:	e000      	b.n	8003366 <NVIC_EncodePriority+0x32>
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	f04f 32ff 	mov.w	r2, #4294967295
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	401a      	ands	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800337c:	f04f 31ff 	mov.w	r1, #4294967295
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	43d9      	mvns	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	4313      	orrs	r3, r2
         );
}
 800338e:	4618      	mov	r0, r3
 8003390:	3724      	adds	r7, #36	; 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ac:	d301      	bcc.n	80033b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00f      	b.n	80033d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <SysTick_Config+0x40>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ba:	210f      	movs	r1, #15
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	f7ff ff8e 	bl	80032e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <SysTick_Config+0x40>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <SysTick_Config+0x40>)
 80033cc:	2207      	movs	r2, #7
 80033ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	e000e010 	.word	0xe000e010

080033e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff29 	bl	8003240 <__NVIC_SetPriorityGrouping>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003408:	f7ff ff3e 	bl	8003288 <__NVIC_GetPriorityGrouping>
 800340c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7ff ff8e 	bl	8003334 <NVIC_EncodePriority>
 8003418:	4602      	mov	r2, r0
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff5d 	bl	80032e0 <__NVIC_SetPriority>
}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff31 	bl	80032a4 <__NVIC_EnableIRQ>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffa2 	bl	800339c <SysTick_Config>
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff feb6 	bl	80031e0 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d008      	beq.n	8003494 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2280      	movs	r2, #128	; 0x80
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e052      	b.n	800353a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0216 	bic.w	r2, r2, #22
 80034a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <HAL_DMA_Abort+0x62>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0208 	bic.w	r2, r2, #8
 80034d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e4:	e013      	b.n	800350e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e6:	f7ff fe7b 	bl	80031e0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d90c      	bls.n	800350e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2203      	movs	r2, #3
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e015      	b.n	800353a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e4      	bne.n	80034e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	223f      	movs	r2, #63	; 0x3f
 8003522:	409a      	lsls	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d004      	beq.n	8003560 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e00c      	b.n	800357a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2205      	movs	r2, #5
 8003564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e16b      	b.n	800387c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f040 815a 	bne.w	8003876 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d005      	beq.n	80035da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d130      	bne.n	800363c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 0201 	and.w	r2, r3, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b03      	cmp	r3, #3
 8003646:	d017      	beq.n	8003678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d123      	bne.n	80036cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	08da      	lsrs	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80b4 	beq.w	8003876 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b60      	ldr	r3, [pc, #384]	; (8003894 <HAL_GPIO_Init+0x30c>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	4a5f      	ldr	r2, [pc, #380]	; (8003894 <HAL_GPIO_Init+0x30c>)
 8003718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800371c:	6453      	str	r3, [r2, #68]	; 0x44
 800371e:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_GPIO_Init+0x30c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372a:	4a5b      	ldr	r2, [pc, #364]	; (8003898 <HAL_GPIO_Init+0x310>)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	3302      	adds	r3, #2
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	220f      	movs	r2, #15
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a52      	ldr	r2, [pc, #328]	; (800389c <HAL_GPIO_Init+0x314>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02b      	beq.n	80037ae <HAL_GPIO_Init+0x226>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a51      	ldr	r2, [pc, #324]	; (80038a0 <HAL_GPIO_Init+0x318>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d025      	beq.n	80037aa <HAL_GPIO_Init+0x222>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a50      	ldr	r2, [pc, #320]	; (80038a4 <HAL_GPIO_Init+0x31c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <HAL_GPIO_Init+0x21e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4f      	ldr	r2, [pc, #316]	; (80038a8 <HAL_GPIO_Init+0x320>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d019      	beq.n	80037a2 <HAL_GPIO_Init+0x21a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4e      	ldr	r2, [pc, #312]	; (80038ac <HAL_GPIO_Init+0x324>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0x216>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4d      	ldr	r2, [pc, #308]	; (80038b0 <HAL_GPIO_Init+0x328>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00d      	beq.n	800379a <HAL_GPIO_Init+0x212>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4c      	ldr	r2, [pc, #304]	; (80038b4 <HAL_GPIO_Init+0x32c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_GPIO_Init+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4b      	ldr	r2, [pc, #300]	; (80038b8 <HAL_GPIO_Init+0x330>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_GPIO_Init+0x20a>
 800378e:	2307      	movs	r3, #7
 8003790:	e00e      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 8003792:	2308      	movs	r3, #8
 8003794:	e00c      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 8003796:	2306      	movs	r3, #6
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 800379a:	2305      	movs	r3, #5
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 800379e:	2304      	movs	r3, #4
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	; (8003898 <HAL_GPIO_Init+0x310>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_GPIO_Init+0x334>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f2:	4a32      	ldr	r2, [pc, #200]	; (80038bc <HAL_GPIO_Init+0x334>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037f8:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_GPIO_Init+0x334>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800381c:	4a27      	ldr	r2, [pc, #156]	; (80038bc <HAL_GPIO_Init+0x334>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_GPIO_Init+0x334>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_GPIO_Init+0x334>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_GPIO_Init+0x334>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <HAL_GPIO_Init+0x334>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f ae90 	bls.w	80035a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40021c00 	.word	0x40021c00
 80038bc:	40013c00 	.word	0x40013c00

080038c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
 80038cc:	4613      	mov	r3, r2
 80038ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d0:	787b      	ldrb	r3, [r7, #1]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038dc:	e003      	b.n	80038e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	041a      	lsls	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	619a      	str	r2, [r3, #24]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e12b      	b.n	8003b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd f960 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	; 0x24
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003958:	f001 fd06 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 800395c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a81      	ldr	r2, [pc, #516]	; (8003b68 <HAL_I2C_Init+0x274>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d807      	bhi.n	8003978 <HAL_I2C_Init+0x84>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <HAL_I2C_Init+0x278>)
 800396c:	4293      	cmp	r3, r2
 800396e:	bf94      	ite	ls
 8003970:	2301      	movls	r3, #1
 8003972:	2300      	movhi	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e006      	b.n	8003986 <HAL_I2C_Init+0x92>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a7d      	ldr	r2, [pc, #500]	; (8003b70 <HAL_I2C_Init+0x27c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	bf94      	ite	ls
 8003980:	2301      	movls	r3, #1
 8003982:	2300      	movhi	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0e7      	b.n	8003b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a78      	ldr	r2, [pc, #480]	; (8003b74 <HAL_I2C_Init+0x280>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0c9b      	lsrs	r3, r3, #18
 8003998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a6a      	ldr	r2, [pc, #424]	; (8003b68 <HAL_I2C_Init+0x274>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d802      	bhi.n	80039c8 <HAL_I2C_Init+0xd4>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3301      	adds	r3, #1
 80039c6:	e009      	b.n	80039dc <HAL_I2C_Init+0xe8>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <HAL_I2C_Init+0x284>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	3301      	adds	r3, #1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	495c      	ldr	r1, [pc, #368]	; (8003b68 <HAL_I2C_Init+0x274>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d819      	bhi.n	8003a30 <HAL_I2C_Init+0x13c>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e59      	subs	r1, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a10:	400b      	ands	r3, r1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_I2C_Init+0x138>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1e59      	subs	r1, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2a:	e051      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	e04f      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d111      	bne.n	8003a5c <HAL_I2C_Init+0x168>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e012      	b.n	8003a82 <HAL_I2C_Init+0x18e>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e58      	subs	r0, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	0099      	lsls	r1, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Init+0x196>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e022      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10e      	bne.n	8003ab0 <HAL_I2C_Init+0x1bc>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e58      	subs	r0, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	440b      	add	r3, r1
 8003aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aae:	e00f      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	0099      	lsls	r1, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	6809      	ldr	r1, [r1, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6911      	ldr	r1, [r2, #16]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	000186a0 	.word	0x000186a0
 8003b6c:	001e847f 	.word	0x001e847f
 8003b70:	003d08ff 	.word	0x003d08ff
 8003b74:	431bde83 	.word	0x431bde83
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	817b      	strh	r3, [r7, #10]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	813b      	strh	r3, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b96:	f7ff fb23 	bl	80031e0 <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	f040 80d9 	bne.w	8003d5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2319      	movs	r3, #25
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	496d      	ldr	r1, [pc, #436]	; (8003d68 <HAL_I2C_Mem_Write+0x1ec>)
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fdad 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e0cc      	b.n	8003d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2C_Mem_Write+0x56>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0c5      	b.n	8003d5e <HAL_I2C_Mem_Write+0x1e2>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d007      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2221      	movs	r2, #33	; 0x21
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a4d      	ldr	r2, [pc, #308]	; (8003d6c <HAL_I2C_Mem_Write+0x1f0>)
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c3a:	88f8      	ldrh	r0, [r7, #6]
 8003c3c:	893a      	ldrh	r2, [r7, #8]
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4603      	mov	r3, r0
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fbe4 	bl	8004418 <I2C_RequestMemoryWrite>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d052      	beq.n	8003cfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e081      	b.n	8003d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fe2e 	bl	80048c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d107      	bne.n	8003c82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e06b      	b.n	8003d5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	781a      	ldrb	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d11b      	bne.n	8003cfc <HAL_I2C_Mem_Write+0x180>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d017      	beq.n	8003cfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1aa      	bne.n	8003c5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fe1a 	bl	8004942 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d107      	bne.n	8003d2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e016      	b.n	8003d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	00100002 	.word	0x00100002
 8003d6c:	ffff0000 	.word	0xffff0000

08003d70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	; 0x30
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	817b      	strh	r3, [r7, #10]
 8003d82:	460b      	mov	r3, r1
 8003d84:	813b      	strh	r3, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d8a:	f7ff fa29 	bl	80031e0 <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	f040 8208 	bne.w	80041ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2319      	movs	r3, #25
 8003da4:	2201      	movs	r2, #1
 8003da6:	497b      	ldr	r1, [pc, #492]	; (8003f94 <HAL_I2C_Mem_Read+0x224>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fcb3 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
 8003db6:	e1fb      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x56>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e1f4      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d007      	beq.n	8003dec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2222      	movs	r2, #34	; 0x22
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a5b      	ldr	r2, [pc, #364]	; (8003f98 <HAL_I2C_Mem_Read+0x228>)
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e2e:	88f8      	ldrh	r0, [r7, #6]
 8003e30:	893a      	ldrh	r2, [r7, #8]
 8003e32:	8979      	ldrh	r1, [r7, #10]
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fb80 	bl	8004544 <I2C_RequestMemoryRead>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1b0      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d113      	bne.n	8003e7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e184      	b.n	8004188 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d11b      	bne.n	8003ebe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e164      	b.n	8004188 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d11b      	bne.n	8003efe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	e144      	b.n	8004188 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f14:	e138      	b.n	8004188 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	f200 80f1 	bhi.w	8004102 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d123      	bne.n	8003f70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fd49 	bl	80049c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e139      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f6e:	e10b      	b.n	8004188 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d14e      	bne.n	8004016 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4906      	ldr	r1, [pc, #24]	; (8003f9c <HAL_I2C_Mem_Read+0x22c>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fbc6 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e10e      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
 8003f92:	bf00      	nop
 8003f94:	00100002 	.word	0x00100002
 8003f98:	ffff0000 	.word	0xffff0000
 8003f9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004014:	e0b8      	b.n	8004188 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	2200      	movs	r2, #0
 800401e:	4966      	ldr	r1, [pc, #408]	; (80041b8 <HAL_I2C_Mem_Read+0x448>)
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fb77 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0bf      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	2200      	movs	r2, #0
 800407a:	494f      	ldr	r1, [pc, #316]	; (80041b8 <HAL_I2C_Mem_Read+0x448>)
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fb49 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e091      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004100:	e042      	b.n	8004188 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fc5c 	bl	80049c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e04c      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d118      	bne.n	8004188 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	f47f aec2 	bne.w	8003f16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	00010004 	.word	0x00010004

080041bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	460b      	mov	r3, r1
 80041ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff f808 	bl	80031e0 <HAL_GetTick>
 80041d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f040 8111 	bne.w	8004406 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2319      	movs	r3, #25
 80041ea:	2201      	movs	r2, #1
 80041ec:	4988      	ldr	r1, [pc, #544]	; (8004410 <HAL_I2C_IsDeviceReady+0x254>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fa90 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
 80041fc:	e104      	b.n	8004408 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_I2C_IsDeviceReady+0x50>
 8004208:	2302      	movs	r3, #2
 800420a:	e0fd      	b.n	8004408 <HAL_I2C_IsDeviceReady+0x24c>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d007      	beq.n	8004232 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004240:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2224      	movs	r2, #36	; 0x24
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a70      	ldr	r2, [pc, #448]	; (8004414 <HAL_I2C_IsDeviceReady+0x258>)
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004264:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fa4e 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428c:	d103      	bne.n	8004296 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0b6      	b.n	8004408 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042aa:	f7fe ff99 	bl	80031e0 <HAL_GetTick>
 80042ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042de:	e025      	b.n	800432c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	f7fe ff7e 	bl	80031e0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <HAL_I2C_IsDeviceReady+0x13a>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22a0      	movs	r2, #160	; 0xa0
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2ba0      	cmp	r3, #160	; 0xa0
 8004336:	d005      	beq.n	8004344 <HAL_I2C_IsDeviceReady+0x188>
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <HAL_I2C_IsDeviceReady+0x188>
 800433e:	7dbb      	ldrb	r3, [r7, #22]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0cd      	beq.n	80042e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d129      	bne.n	80043ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004368:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2319      	movs	r3, #25
 8004386:	2201      	movs	r2, #1
 8004388:	4921      	ldr	r1, [pc, #132]	; (8004410 <HAL_I2C_IsDeviceReady+0x254>)
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f9c2 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e036      	b.n	8004408 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e02c      	b.n	8004408 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2319      	movs	r3, #25
 80043ce:	2201      	movs	r2, #1
 80043d0:	490f      	ldr	r1, [pc, #60]	; (8004410 <HAL_I2C_IsDeviceReady+0x254>)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f99e 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e012      	b.n	8004408 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	f4ff af32 	bcc.w	8004256 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	00100002 	.word	0x00100002
 8004414:	ffff0000 	.word	0xffff0000

08004418 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	461a      	mov	r2, r3
 8004426:	4603      	mov	r3, r0
 8004428:	817b      	strh	r3, [r7, #10]
 800442a:	460b      	mov	r3, r1
 800442c:	813b      	strh	r3, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004440:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	2200      	movs	r2, #0
 800444a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f960 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004468:	d103      	bne.n	8004472 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e05f      	b.n	8004536 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004476:	897b      	ldrh	r3, [r7, #10]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004484:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	492d      	ldr	r1, [pc, #180]	; (8004540 <I2C_RequestMemoryWrite+0x128>)
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f998 	bl	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e04c      	b.n	8004536 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa02 	bl	80048c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d107      	bne.n	80044da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e02b      	b.n	8004536 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e4:	893b      	ldrh	r3, [r7, #8]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	611a      	str	r2, [r3, #16]
 80044ee:	e021      	b.n	8004534 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f9dc 	bl	80048c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b04      	cmp	r3, #4
 8004514:	d107      	bne.n	8004526 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004524:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e005      	b.n	8004536 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	00010002 	.word	0x00010002

08004544 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4603      	mov	r3, r0
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	460b      	mov	r3, r1
 8004558:	813b      	strh	r3, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800456c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	2200      	movs	r2, #0
 8004586:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f8c2 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a4:	d103      	bne.n	80045ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0aa      	b.n	8004708 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	6a3a      	ldr	r2, [r7, #32]
 80045c6:	4952      	ldr	r1, [pc, #328]	; (8004710 <I2C_RequestMemoryRead+0x1cc>)
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f8fa 	bl	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e097      	b.n	8004708 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	6a39      	ldr	r1, [r7, #32]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f964 	bl	80048c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b04      	cmp	r3, #4
 8004604:	d107      	bne.n	8004616 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004614:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e076      	b.n	8004708 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d105      	bne.n	800462c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004620:	893b      	ldrh	r3, [r7, #8]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	611a      	str	r2, [r3, #16]
 800462a:	e021      	b.n	8004670 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800462c:	893b      	ldrh	r3, [r7, #8]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	b29b      	uxth	r3, r3
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	6a39      	ldr	r1, [r7, #32]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f93e 	bl	80048c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b04      	cmp	r3, #4
 8004650:	d107      	bne.n	8004662 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004660:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e050      	b.n	8004708 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004666:	893b      	ldrh	r3, [r7, #8]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	6a39      	ldr	r1, [r7, #32]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f923 	bl	80048c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b04      	cmp	r3, #4
 8004686:	d107      	bne.n	8004698 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e035      	b.n	8004708 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f82b 	bl	8004714 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d2:	d103      	bne.n	80046dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e013      	b.n	8004708 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046e0:	897b      	ldrh	r3, [r7, #10]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	6a3a      	ldr	r2, [r7, #32]
 80046f4:	4906      	ldr	r1, [pc, #24]	; (8004710 <I2C_RequestMemoryRead+0x1cc>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f863 	bl	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	00010002 	.word	0x00010002

08004714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004724:	e025      	b.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d021      	beq.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fe fd57 	bl	80031e0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <I2C_WaitOnFlagUntilTimeout+0x30>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0220 	orr.w	r2, r3, #32
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e023      	b.n	80047ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10d      	bne.n	8004798 <I2C_WaitOnFlagUntilTimeout+0x84>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	e00c      	b.n	80047b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d0b6      	beq.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d0:	e051      	b.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e0:	d123      	bne.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0204 	orr.w	r2, r3, #4
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e046      	b.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d021      	beq.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004832:	f7fe fcd5 	bl	80031e0 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d116      	bne.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e020      	b.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10c      	bne.n	800489a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e00b      	b.n	80048b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf14      	ite	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	2300      	moveq	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d18d      	bne.n	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048cc:	e02d      	b.n	800492a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f8ce 	bl	8004a70 <I2C_IsAcknowledgeFailed>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e02d      	b.n	800493a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d021      	beq.n	800492a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e6:	f7fe fc7b 	bl	80031e0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d302      	bcc.n	80048fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0220 	orr.w	r2, r3, #32
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e007      	b.n	800493a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	2b80      	cmp	r3, #128	; 0x80
 8004936:	d1ca      	bne.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800494e:	e02d      	b.n	80049ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f88d 	bl	8004a70 <I2C_IsAcknowledgeFailed>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e02d      	b.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d021      	beq.n	80049ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004968:	f7fe fc3a 	bl	80031e0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d116      	bne.n	80049ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e007      	b.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d1ca      	bne.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d0:	e042      	b.n	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d119      	bne.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e029      	b.n	8004a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fe fbe4 	bl	80031e0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d116      	bne.n	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d1b5      	bne.n	80049d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a86:	d11b      	bne.n	8004ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e264      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d075      	beq.n	8004bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aee:	4ba3      	ldr	r3, [pc, #652]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d00c      	beq.n	8004b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afa:	4ba0      	ldr	r3, [pc, #640]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d112      	bne.n	8004b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b06:	4b9d      	ldr	r3, [pc, #628]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b12:	d10b      	bne.n	8004b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	4b99      	ldr	r3, [pc, #612]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d05b      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x108>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d157      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e23f      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_OscConfig+0x74>
 8004b36:	4b91      	ldr	r3, [pc, #580]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a90      	ldr	r2, [pc, #576]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e01d      	b.n	8004b80 <HAL_RCC_OscConfig+0xb0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x98>
 8004b4e:	4b8b      	ldr	r3, [pc, #556]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a8a      	ldr	r2, [pc, #552]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	4b88      	ldr	r3, [pc, #544]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a87      	ldr	r2, [pc, #540]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e00b      	b.n	8004b80 <HAL_RCC_OscConfig+0xb0>
 8004b68:	4b84      	ldr	r3, [pc, #528]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a83      	ldr	r2, [pc, #524]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b81      	ldr	r3, [pc, #516]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a80      	ldr	r2, [pc, #512]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7fe fb2a 	bl	80031e0 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fe fb26 	bl	80031e0 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e204      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b76      	ldr	r3, [pc, #472]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0xc0>
 8004bae:	e014      	b.n	8004bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fe fb16 	bl	80031e0 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fe fb12 	bl	80031e0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e1f0      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	4b6c      	ldr	r3, [pc, #432]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0xe8>
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d063      	beq.n	8004cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be6:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf2:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d11c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfe:	4b5f      	ldr	r3, [pc, #380]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d116      	bne.n	8004c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0a:	4b5c      	ldr	r3, [pc, #368]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_RCC_OscConfig+0x152>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e1c4      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c22:	4b56      	ldr	r3, [pc, #344]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4952      	ldr	r1, [pc, #328]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c36:	e03a      	b.n	8004cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c40:	4b4f      	ldr	r3, [pc, #316]	; (8004d80 <HAL_RCC_OscConfig+0x2b0>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fe facb 	bl	80031e0 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fe fac7 	bl	80031e0 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e1a5      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4940      	ldr	r1, [pc, #256]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
 8004c80:	e015      	b.n	8004cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b3f      	ldr	r3, [pc, #252]	; (8004d80 <HAL_RCC_OscConfig+0x2b0>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fe faaa 	bl	80031e0 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fe faa6 	bl	80031e0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e184      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d030      	beq.n	8004d1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <HAL_RCC_OscConfig+0x2b4>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fe fa8a 	bl	80031e0 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fe fa86 	bl	80031e0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e164      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x200>
 8004cee:	e015      	b.n	8004d1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf0:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <HAL_RCC_OscConfig+0x2b4>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fe fa73 	bl	80031e0 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfe:	f7fe fa6f 	bl	80031e0 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e14d      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80a0 	beq.w	8004e6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_RCC_OscConfig+0x2b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d121      	bne.n	8004daa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <HAL_RCC_OscConfig+0x2b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_RCC_OscConfig+0x2b8>)
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d72:	f7fe fa35 	bl	80031e0 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	e011      	b.n	8004d9e <HAL_RCC_OscConfig+0x2ce>
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	42470000 	.word	0x42470000
 8004d84:	42470e80 	.word	0x42470e80
 8004d88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8c:	f7fe fa28 	bl	80031e0 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e106      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9e:	4b85      	ldr	r3, [pc, #532]	; (8004fb4 <HAL_RCC_OscConfig+0x4e4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x2f0>
 8004db2:	4b81      	ldr	r3, [pc, #516]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	4a80      	ldr	r2, [pc, #512]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dbe:	e01c      	b.n	8004dfa <HAL_RCC_OscConfig+0x32a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d10c      	bne.n	8004de2 <HAL_RCC_OscConfig+0x312>
 8004dc8:	4b7b      	ldr	r3, [pc, #492]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a7a      	ldr	r2, [pc, #488]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004dce:	f043 0304 	orr.w	r3, r3, #4
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd4:	4b78      	ldr	r3, [pc, #480]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	4a77      	ldr	r2, [pc, #476]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	6713      	str	r3, [r2, #112]	; 0x70
 8004de0:	e00b      	b.n	8004dfa <HAL_RCC_OscConfig+0x32a>
 8004de2:	4b75      	ldr	r3, [pc, #468]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a74      	ldr	r2, [pc, #464]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
 8004dee:	4b72      	ldr	r3, [pc, #456]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a71      	ldr	r2, [pc, #452]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d015      	beq.n	8004e2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fe f9ed 	bl	80031e0 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e08:	e00a      	b.n	8004e20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fe f9e9 	bl	80031e0 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0c5      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	4b65      	ldr	r3, [pc, #404]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ee      	beq.n	8004e0a <HAL_RCC_OscConfig+0x33a>
 8004e2c:	e014      	b.n	8004e58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2e:	f7fe f9d7 	bl	80031e0 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e34:	e00a      	b.n	8004e4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fe f9d3 	bl	80031e0 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e0af      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	4b5a      	ldr	r3, [pc, #360]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ee      	bne.n	8004e36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d105      	bne.n	8004e6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5e:	4b56      	ldr	r3, [pc, #344]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	4a55      	ldr	r2, [pc, #340]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 809b 	beq.w	8004faa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e74:	4b50      	ldr	r3, [pc, #320]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d05c      	beq.n	8004f3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d141      	bne.n	8004f0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e88:	4b4c      	ldr	r3, [pc, #304]	; (8004fbc <HAL_RCC_OscConfig+0x4ec>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fe f9a7 	bl	80031e0 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fe f9a3 	bl	80031e0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e081      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	019b      	lsls	r3, r3, #6
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	4937      	ldr	r1, [pc, #220]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ede:	4b37      	ldr	r3, [pc, #220]	; (8004fbc <HAL_RCC_OscConfig+0x4ec>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe f97c 	bl	80031e0 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eec:	f7fe f978 	bl	80031e0 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e056      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efe:	4b2e      	ldr	r3, [pc, #184]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0x41c>
 8004f0a:	e04e      	b.n	8004faa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_RCC_OscConfig+0x4ec>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f12:	f7fe f965 	bl	80031e0 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fe f961 	bl	80031e0 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e03f      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2c:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x44a>
 8004f38:	e037      	b.n	8004faa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e032      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f46:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <HAL_RCC_OscConfig+0x4e8>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d028      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d121      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d11a      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f76:	4013      	ands	r3, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d111      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	42470060 	.word	0x42470060

08004fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0cc      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b68      	ldr	r3, [pc, #416]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d90c      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b65      	ldr	r3, [pc, #404]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fea:	4b63      	ldr	r3, [pc, #396]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0b8      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a58      	ldr	r2, [pc, #352]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800501e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800502c:	4b53      	ldr	r3, [pc, #332]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4a52      	ldr	r2, [pc, #328]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	494d      	ldr	r1, [pc, #308]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d044      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b47      	ldr	r3, [pc, #284]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d119      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e07f      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d003      	beq.n	800507e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507a:	2b03      	cmp	r3, #3
 800507c:	d107      	bne.n	800508e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e06f      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508e:	4b3b      	ldr	r3, [pc, #236]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e067      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800509e:	4b37      	ldr	r3, [pc, #220]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f023 0203 	bic.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4934      	ldr	r1, [pc, #208]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b0:	f7fe f896 	bl	80031e0 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b8:	f7fe f892 	bl	80031e0 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e04f      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ce:	4b2b      	ldr	r3, [pc, #172]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 020c 	and.w	r2, r3, #12
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	429a      	cmp	r2, r3
 80050de:	d1eb      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e0:	4b25      	ldr	r3, [pc, #148]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d20c      	bcs.n	8005108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ee:	4b22      	ldr	r3, [pc, #136]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e032      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005114:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4916      	ldr	r1, [pc, #88]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	490e      	ldr	r1, [pc, #56]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005146:	f000 f821 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800514a:	4602      	mov	r2, r0
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	490a      	ldr	r1, [pc, #40]	; (8005180 <HAL_RCC_ClockConfig+0x1c0>)
 8005158:	5ccb      	ldrb	r3, [r1, r3]
 800515a:	fa22 f303 	lsr.w	r3, r2, r3
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_ClockConfig+0x1c8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd fff6 	bl	8003158 <HAL_InitTick>

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023c00 	.word	0x40023c00
 800517c:	40023800 	.word	0x40023800
 8005180:	0800b8c4 	.word	0x0800b8c4
 8005184:	2000000c 	.word	0x2000000c
 8005188:	20000010 	.word	0x20000010

0800518c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800518c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	2300      	movs	r3, #0
 800519e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a4:	4b67      	ldr	r3, [pc, #412]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d00d      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x40>
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	f200 80bd 	bhi.w	8005330 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d003      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051be:	e0b7      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b61      	ldr	r3, [pc, #388]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051c2:	60bb      	str	r3, [r7, #8]
       break;
 80051c4:	e0b7      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c6:	4b61      	ldr	r3, [pc, #388]	; (800534c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051c8:	60bb      	str	r3, [r7, #8]
      break;
 80051ca:	e0b4      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051cc:	4b5d      	ldr	r3, [pc, #372]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d6:	4b5b      	ldr	r3, [pc, #364]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04d      	beq.n	800527e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e2:	4b58      	ldr	r3, [pc, #352]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	461a      	mov	r2, r3
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	ea02 0800 	and.w	r8, r2, r0
 80051fa:	ea03 0901 	and.w	r9, r3, r1
 80051fe:	4640      	mov	r0, r8
 8005200:	4649      	mov	r1, r9
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	014b      	lsls	r3, r1, #5
 800520c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005210:	0142      	lsls	r2, r0, #5
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	ebb0 0008 	subs.w	r0, r0, r8
 800521a:	eb61 0109 	sbc.w	r1, r1, r9
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800522c:	0182      	lsls	r2, r0, #6
 800522e:	1a12      	subs	r2, r2, r0
 8005230:	eb63 0301 	sbc.w	r3, r3, r1
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	00d9      	lsls	r1, r3, #3
 800523e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005242:	00d0      	lsls	r0, r2, #3
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	eb12 0208 	adds.w	r2, r2, r8
 800524c:	eb43 0309 	adc.w	r3, r3, r9
 8005250:	f04f 0000 	mov.w	r0, #0
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	0259      	lsls	r1, r3, #9
 800525a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800525e:	0250      	lsls	r0, r2, #9
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	f7fa fffe 	bl	8000270 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4613      	mov	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e04a      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527e:	4b31      	ldr	r3, [pc, #196]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	461a      	mov	r2, r3
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800528e:	f04f 0100 	mov.w	r1, #0
 8005292:	ea02 0400 	and.w	r4, r2, r0
 8005296:	ea03 0501 	and.w	r5, r3, r1
 800529a:	4620      	mov	r0, r4
 800529c:	4629      	mov	r1, r5
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	014b      	lsls	r3, r1, #5
 80052a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052ac:	0142      	lsls	r2, r0, #5
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	1b00      	subs	r0, r0, r4
 80052b4:	eb61 0105 	sbc.w	r1, r1, r5
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	018b      	lsls	r3, r1, #6
 80052c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052c6:	0182      	lsls	r2, r0, #6
 80052c8:	1a12      	subs	r2, r2, r0
 80052ca:	eb63 0301 	sbc.w	r3, r3, r1
 80052ce:	f04f 0000 	mov.w	r0, #0
 80052d2:	f04f 0100 	mov.w	r1, #0
 80052d6:	00d9      	lsls	r1, r3, #3
 80052d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052dc:	00d0      	lsls	r0, r2, #3
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	1912      	adds	r2, r2, r4
 80052e4:	eb45 0303 	adc.w	r3, r5, r3
 80052e8:	f04f 0000 	mov.w	r0, #0
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	0299      	lsls	r1, r3, #10
 80052f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052f6:	0290      	lsls	r0, r2, #10
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	461a      	mov	r2, r3
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	f7fa ffb2 	bl	8000270 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4613      	mov	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	60bb      	str	r3, [r7, #8]
      break;
 800532e:	e002      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005332:	60bb      	str	r3, [r7, #8]
      break;
 8005334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005336:	68bb      	ldr	r3, [r7, #8]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
 8005348:	00f42400 	.word	0x00f42400
 800534c:	007a1200 	.word	0x007a1200

08005350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_RCC_GetHCLKFreq+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	2000000c 	.word	0x2000000c

08005368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800536c:	f7ff fff0 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0a9b      	lsrs	r3, r3, #10
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4903      	ldr	r1, [pc, #12]	; (800538c <HAL_RCC_GetPCLK1Freq+0x24>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40023800 	.word	0x40023800
 800538c:	0800b8d4 	.word	0x0800b8d4

08005390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005394:	f7ff ffdc 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0b5b      	lsrs	r3, r3, #13
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4903      	ldr	r1, [pc, #12]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40023800 	.word	0x40023800
 80053b4:	0800b8d4 	.word	0x0800b8d4

080053b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e07b      	b.n	80054c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d108      	bne.n	80053e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053da:	d009      	beq.n	80053f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	61da      	str	r2, [r3, #28]
 80053e2:	e005      	b.n	80053f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fd fb7c 	bl	8002b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005426:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	ea42 0103 	orr.w	r1, r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	f003 0104 	and.w	r1, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0210 	and.w	r2, r3, #16
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b088      	sub	sp, #32
 80054ce:	af02      	add	r7, sp, #8
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d112      	bne.n	800550e <HAL_SPI_Receive+0x44>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10e      	bne.n	800550e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2204      	movs	r2, #4
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	4613      	mov	r3, r2
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f8f1 	bl	80056ec <HAL_SPI_TransmitReceive>
 800550a:	4603      	mov	r3, r0
 800550c:	e0ea      	b.n	80056e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_SPI_Receive+0x52>
 8005518:	2302      	movs	r3, #2
 800551a:	e0e3      	b.n	80056e4 <HAL_SPI_Receive+0x21a>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005524:	f7fd fe5c 	bl	80031e0 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d002      	beq.n	800553c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005536:	2302      	movs	r3, #2
 8005538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800553a:	e0ca      	b.n	80056d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Receive+0x7e>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800554c:	e0c1      	b.n	80056d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2204      	movs	r2, #4
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005594:	d10f      	bne.n	80055b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d007      	beq.n	80055d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d162      	bne.n	80056a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055dc:	e02e      	b.n	800563c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d115      	bne.n	8005618 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f103 020c 	add.w	r2, r3, #12
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005616:	e011      	b.n	800563c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005618:	f7fd fde2 	bl	80031e0 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d803      	bhi.n	8005630 <HAL_SPI_Receive+0x166>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d102      	bne.n	8005636 <HAL_SPI_Receive+0x16c>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	75fb      	strb	r3, [r7, #23]
          goto error;
 800563a:	e04a      	b.n	80056d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1cb      	bne.n	80055de <HAL_SPI_Receive+0x114>
 8005646:	e031      	b.n	80056ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b01      	cmp	r3, #1
 8005654:	d113      	bne.n	800567e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	b292      	uxth	r2, r2
 8005662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567c:	e011      	b.n	80056a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567e:	f7fd fdaf 	bl	80031e0 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d803      	bhi.n	8005696 <HAL_SPI_Receive+0x1cc>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d102      	bne.n	800569c <HAL_SPI_Receive+0x1d2>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056a0:	e017      	b.n	80056d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1cd      	bne.n	8005648 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fa45 	bl	8005b40 <SPI_EndRxTransaction>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
 80056ce:	e000      	b.n	80056d2 <HAL_SPI_Receive+0x208>
  }

error :
 80056d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	; 0x30
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056fa:	2301      	movs	r3, #1
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_SPI_TransmitReceive+0x26>
 800570e:	2302      	movs	r3, #2
 8005710:	e18a      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x33c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800571a:	f7fd fd61 	bl	80031e0 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005738:	2b01      	cmp	r3, #1
 800573a:	d00f      	beq.n	800575c <HAL_SPI_TransmitReceive+0x70>
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005742:	d107      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x68>
 800574c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005750:	2b04      	cmp	r3, #4
 8005752:	d003      	beq.n	800575c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005754:	2302      	movs	r3, #2
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800575a:	e15b      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_SPI_TransmitReceive+0x82>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_TransmitReceive+0x82>
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005774:	e14e      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b04      	cmp	r3, #4
 8005780:	d003      	beq.n	800578a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2205      	movs	r2, #5
 8005786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	887a      	ldrh	r2, [r7, #2]
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d007      	beq.n	80057de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e6:	d178      	bne.n	80058da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_SPI_TransmitReceive+0x10a>
 80057f0:	8b7b      	ldrh	r3, [r7, #26]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d166      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	881a      	ldrh	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	1c9a      	adds	r2, r3, #2
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800581a:	e053      	b.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d11b      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x176>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x176>
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d113      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d119      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x1b8>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d014      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	b292      	uxth	r2, r2
 8005886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058a0:	2301      	movs	r3, #1
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058a4:	f7fd fc9c 	bl	80031e0 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d807      	bhi.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d003      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058c2:	e0a7      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1a6      	bne.n	800581c <HAL_SPI_TransmitReceive+0x130>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1a1      	bne.n	800581c <HAL_SPI_TransmitReceive+0x130>
 80058d8:	e07c      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x1fc>
 80058e2:	8b7b      	ldrh	r3, [r7, #26]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d16b      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	e057      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d11c      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x26c>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d017      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x26c>
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d114      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	7812      	ldrb	r2, [r2, #0]
 800593a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d119      	bne.n	800599a <HAL_SPI_TransmitReceive+0x2ae>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d014      	beq.n	800599a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005996:	2301      	movs	r3, #1
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800599a:	f7fd fc21 	bl	80031e0 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d803      	bhi.n	80059b2 <HAL_SPI_TransmitReceive+0x2c6>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d102      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x2cc>
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059be:	e029      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1a2      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x224>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d19d      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f917 	bl	8005c0c <SPI_EndRxTxTransaction>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059f0:	e010      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	e000      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3730      	adds	r7, #48	; 0x30
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a40:	f7fd fbce 	bl	80031e0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a50:	f7fd fbc6 	bl	80031e0 <HAL_GetTick>
 8005a54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a56:	4b39      	ldr	r3, [pc, #228]	; (8005b3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	015b      	lsls	r3, r3, #5
 8005a5c:	0d1b      	lsrs	r3, r3, #20
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a66:	e054      	b.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d050      	beq.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a70:	f7fd fbb6 	bl	80031e0 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d902      	bls.n	8005a86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d13d      	bne.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9e:	d111      	bne.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa8:	d004      	beq.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d107      	bne.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005acc:	d10f      	bne.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e017      	b.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d19b      	bne.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000000c 	.word	0x2000000c

08005b40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b54:	d111      	bne.n	8005b7a <SPI_EndRxTransaction+0x3a>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5e:	d004      	beq.n	8005b6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b68:	d107      	bne.n	8005b7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b82:	d12a      	bne.n	8005bda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8c:	d012      	beq.n	8005bb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ff49 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02d      	beq.n	8005c00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	f043 0220 	orr.w	r2, r3, #32
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e026      	b.n	8005c02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff ff36 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d01a      	beq.n	8005c00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e013      	b.n	8005c02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2101      	movs	r1, #1
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff ff23 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf4:	f043 0220 	orr.w	r2, r3, #32
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e000      	b.n	8005c02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c18:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <SPI_EndRxTxTransaction+0x7c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <SPI_EndRxTxTransaction+0x80>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	0d5b      	lsrs	r3, r3, #21
 8005c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c36:	d112      	bne.n	8005c5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2180      	movs	r1, #128	; 0x80
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f7ff fef4 	bl	8005a30 <SPI_WaitFlagStateUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f043 0220 	orr.w	r2, r3, #32
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00f      	b.n	8005c7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b80      	cmp	r3, #128	; 0x80
 8005c76:	d0f2      	beq.n	8005c5e <SPI_EndRxTxTransaction+0x52>
 8005c78:	e000      	b.n	8005c7c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c7a:	bf00      	nop
  }

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	2000000c 	.word	0x2000000c
 8005c8c:	165e9f81 	.word	0x165e9f81

08005c90 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e034      	b.n	8005d10 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7fa fe50 	bl	8000960 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f001 fc6e 	bl	80075ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	f001 fcb8 	bl	8007650 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6858      	ldr	r0, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	f001 fced 	bl	80076cc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	6892      	ldr	r2, [r2, #8]
 8005cfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	6892      	ldr	r2, [r2, #8]
 8005d06:	f041 0101 	orr.w	r1, r1, #1
 8005d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e041      	b.n	8005dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fd f892 	bl	8002e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f000 fa96 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e04e      	b.n	8005e6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a23      	ldr	r2, [pc, #140]	; (8005e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d022      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d01d      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d018      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00e      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1b      	ldr	r2, [pc, #108]	; (8005e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x80>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d111      	bne.n	8005e5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d010      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5a:	e007      	b.n	8005e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40001800 	.word	0x40001800

08005e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0202 	mvn.w	r2, #2
 8005ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f9b5 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9a7 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f9b8 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0204 	mvn.w	r2, #4
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f98b 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f97d 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f98e 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0208 	mvn.w	r2, #8
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f961 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f953 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f964 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0210 	mvn.w	r2, #16
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f937 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f929 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f93a 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10e      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d107      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0201 	mvn.w	r2, #1
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fc fd16 	bl	8002a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fae0 	bl	8006608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8ff 	bl	8006272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b20      	cmp	r3, #32
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0220 	mvn.w	r2, #32
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 faaa 	bl	80065f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e0b4      	b.n	800622e <HAL_TIM_ConfigClockSource+0x186>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fc:	d03e      	beq.n	800617c <HAL_TIM_ConfigClockSource+0xd4>
 80060fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006102:	f200 8087 	bhi.w	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	f000 8086 	beq.w	800621a <HAL_TIM_ConfigClockSource+0x172>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	d87f      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b70      	cmp	r3, #112	; 0x70
 8006116:	d01a      	beq.n	800614e <HAL_TIM_ConfigClockSource+0xa6>
 8006118:	2b70      	cmp	r3, #112	; 0x70
 800611a:	d87b      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b60      	cmp	r3, #96	; 0x60
 800611e:	d050      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006120:	2b60      	cmp	r3, #96	; 0x60
 8006122:	d877      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b50      	cmp	r3, #80	; 0x50
 8006126:	d03c      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006128:	2b50      	cmp	r3, #80	; 0x50
 800612a:	d873      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d058      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d86f      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b30      	cmp	r3, #48	; 0x30
 8006136:	d064      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006138:	2b30      	cmp	r3, #48	; 0x30
 800613a:	d86b      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b20      	cmp	r3, #32
 800613e:	d060      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	2b20      	cmp	r3, #32
 8006142:	d867      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d05c      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006148:	2b10      	cmp	r3, #16
 800614a:	d05a      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 800614c:	e062      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6899      	ldr	r1, [r3, #8]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f000 f9ad 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	609a      	str	r2, [r3, #8]
      break;
 800617a:	e04f      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6899      	ldr	r1, [r3, #8]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f000 f996 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800619e:	609a      	str	r2, [r3, #8]
      break;
 80061a0:	e03c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 f90a 	bl	80063c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2150      	movs	r1, #80	; 0x50
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f963 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 80061c0:	e02c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 f929 	bl	8006426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2160      	movs	r1, #96	; 0x60
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f953 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 80061e0:	e01c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6859      	ldr	r1, [r3, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f000 f8ea 	bl	80063c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2140      	movs	r1, #64	; 0x40
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f943 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8006200:	e00c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f000 f93a 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8006212:	e003      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e000      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800621a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a40      	ldr	r2, [pc, #256]	; (800639c <TIM_Base_SetConfig+0x114>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d00f      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3d      	ldr	r2, [pc, #244]	; (80063a0 <TIM_Base_SetConfig+0x118>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3c      	ldr	r2, [pc, #240]	; (80063a4 <TIM_Base_SetConfig+0x11c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3b      	ldr	r2, [pc, #236]	; (80063a8 <TIM_Base_SetConfig+0x120>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a3a      	ldr	r2, [pc, #232]	; (80063ac <TIM_Base_SetConfig+0x124>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2f      	ldr	r2, [pc, #188]	; (800639c <TIM_Base_SetConfig+0x114>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02b      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e8:	d027      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2c      	ldr	r2, [pc, #176]	; (80063a0 <TIM_Base_SetConfig+0x118>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d023      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2b      	ldr	r2, [pc, #172]	; (80063a4 <TIM_Base_SetConfig+0x11c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01f      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <TIM_Base_SetConfig+0x120>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01b      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a29      	ldr	r2, [pc, #164]	; (80063ac <TIM_Base_SetConfig+0x124>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d017      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <TIM_Base_SetConfig+0x128>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <TIM_Base_SetConfig+0x12c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00f      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <TIM_Base_SetConfig+0x130>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00b      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a25      	ldr	r2, [pc, #148]	; (80063bc <TIM_Base_SetConfig+0x134>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d007      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a24      	ldr	r2, [pc, #144]	; (80063c0 <TIM_Base_SetConfig+0x138>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a23      	ldr	r2, [pc, #140]	; (80063c4 <TIM_Base_SetConfig+0x13c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d108      	bne.n	800634c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a0a      	ldr	r2, [pc, #40]	; (800639c <TIM_Base_SetConfig+0x114>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0xf8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0c      	ldr	r2, [pc, #48]	; (80063ac <TIM_Base_SetConfig+0x124>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	615a      	str	r2, [r3, #20]
}
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40010000 	.word	0x40010000
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40010400 	.word	0x40010400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800
 80063bc:	40001800 	.word	0x40001800
 80063c0:	40001c00 	.word	0x40001c00
 80063c4:	40002000 	.word	0x40002000

080063c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 030a 	bic.w	r3, r3, #10
 8006404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0210 	bic.w	r2, r3, #16
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	031b      	lsls	r3, r3, #12
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f043 0307 	orr.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	431a      	orrs	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e05a      	b.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d022      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006560:	d01d      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d018      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00e      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a17      	ldr	r2, [pc, #92]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d004      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d10c      	bne.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40000c00 	.word	0x40000c00
 80065e8:	40010400 	.word	0x40010400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40001800 	.word	0x40001800

080065f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e03f      	b.n	80066ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fc fcae 	bl	8002fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800665e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fddb 	bl	800721c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b08a      	sub	sp, #40	; 0x28
 80066ba:	af02      	add	r7, sp, #8
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d17c      	bne.n	80067d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_UART_Transmit+0x2c>
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e075      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_UART_Transmit+0x3e>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e06e      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2221      	movs	r2, #33	; 0x21
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800670a:	f7fc fd69 	bl	80031e0 <HAL_GetTick>
 800670e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	d108      	bne.n	8006738 <HAL_UART_Transmit+0x82>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e003      	b.n	8006740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800673c:	2300      	movs	r3, #0
 800673e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006748:	e02a      	b.n	80067a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2200      	movs	r2, #0
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fb1f 	bl	8006d98 <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e036      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	3302      	adds	r3, #2
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	e007      	b.n	8006792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	3301      	adds	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1cf      	bne.n	800674a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2140      	movs	r1, #64	; 0x40
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 faef 	bl	8006d98 <UART_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e006      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067d0:	2302      	movs	r3, #2
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	4613      	mov	r3, r2
 80067e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d11d      	bne.n	8006830 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <HAL_UART_Receive_IT+0x26>
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e016      	b.n	8006832 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_UART_Receive_IT+0x38>
 800680e:	2302      	movs	r3, #2
 8006810:	e00f      	b.n	8006832 <HAL_UART_Receive_IT+0x58>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	461a      	mov	r2, r3
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fb24 	bl	8006e74 <UART_Start_Receive_IT>
 800682c:	4603      	mov	r3, r0
 800682e:	e000      	b.n	8006832 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b0ba      	sub	sp, #232	; 0xe8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800687a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
 800688e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fc03 	bl	80070a6 <UART_Receive_IT>
      return;
 80068a0:	e256      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80de 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
 80068ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80d1 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0201 	orr.w	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f043 0202 	orr.w	r2, r3, #2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
 800691a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f043 0204 	orr.w	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800694a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f043 0208 	orr.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 81ed 	beq.w	8006d46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb8e 	bl	80070a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <HAL_UART_IRQHandler+0x17a>
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d04f      	beq.n	8006a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa96 	bl	8006ee8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d141      	bne.n	8006a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d013      	beq.n	8006a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	4a7d      	ldr	r2, [pc, #500]	; (8006c18 <HAL_UART_IRQHandler+0x3dc>)
 8006a24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fc fd89 	bl	8003542 <HAL_DMA_Abort_IT>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e00e      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f990 	bl	8006d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	e00a      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f98c 	bl	8006d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	e006      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f988 	bl	8006d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a62:	e170      	b.n	8006d46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	bf00      	nop
    return;
 8006a66:	e16e      	b.n	8006d46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	f040 814a 	bne.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8143 	beq.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 813c 	beq.w	8006d06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	f040 80b4 	bne.w	8006c1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8140 	beq.w	8006d4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	f080 8139 	bcs.w	8006d4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ade:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	f000 8088 	beq.w	8006bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1d9      	bne.n	8006aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e1      	bne.n	8006b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e3      	bne.n	8006b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e3      	bne.n	8006bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fc fc32 	bl	8003462 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8b6 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c14:	e099      	b.n	8006d4a <HAL_UART_IRQHandler+0x50e>
 8006c16:	bf00      	nop
 8006c18:	08006faf 	.word	0x08006faf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 808b 	beq.w	8006d4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8086 	beq.w	8006d4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c66:	647a      	str	r2, [r7, #68]	; 0x44
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0310 	bic.w	r3, r3, #16
 8006cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ce4:	61fa      	str	r2, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f83e 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d04:	e023      	b.n	8006d4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_UART_IRQHandler+0x4ea>
 8006d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f959 	bl	8006fd6 <UART_Transmit_IT>
    return;
 8006d24:	e014      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <HAL_UART_IRQHandler+0x514>
 8006d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f999 	bl	8007076 <UART_EndTransmit_IT>
    return;
 8006d44:	e004      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
    return;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
      return;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
      return;
 8006d4e:	bf00      	nop
  }
}
 8006d50:	37e8      	adds	r7, #232	; 0xe8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop

08006d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b090      	sub	sp, #64	; 0x40
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da8:	e050      	b.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d04c      	beq.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006db8:	f7fc fa12 	bl	80031e0 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d241      	bcs.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006de8:	637a      	str	r2, [r7, #52]	; 0x34
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e5      	bne.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3314      	adds	r3, #20
 8006e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e1c:	623a      	str	r2, [r7, #32]
 8006e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e00f      	b.n	8006e6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4013      	ands	r3, r2
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d09f      	beq.n	8006daa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3740      	adds	r7, #64	; 0x40
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	88fa      	ldrh	r2, [r7, #6]
 8006e92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2222      	movs	r2, #34	; 0x22
 8006e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0220 	orr.w	r2, r2, #32
 8006ed8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b095      	sub	sp, #84	; 0x54
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f10:	643a      	str	r2, [r7, #64]	; 0x40
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3314      	adds	r3, #20
 8006f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3314      	adds	r3, #20
 8006f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d119      	bne.n	8006f94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f023 0310 	bic.w	r3, r3, #16
 8006f76:	647b      	str	r3, [r7, #68]	; 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f80:	61ba      	str	r2, [r7, #24]
 8006f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6979      	ldr	r1, [r7, #20]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e5      	bne.n	8006f60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fa2:	bf00      	nop
 8006fa4:	3754      	adds	r7, #84	; 0x54
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fecf 	bl	8006d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b21      	cmp	r3, #33	; 0x21
 8006fe8:	d13e      	bne.n	8007068 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff2:	d114      	bne.n	800701e <UART_Transmit_IT+0x48>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d110      	bne.n	800701e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007010:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	621a      	str	r2, [r3, #32]
 800701c:	e008      	b.n	8007030 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	1c59      	adds	r1, r3, #1
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6211      	str	r1, [r2, #32]
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29b      	uxth	r3, r3
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4619      	mov	r1, r3
 800703e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10f      	bne.n	8007064 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007052:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007062:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	e000      	b.n	800706a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007068:	2302      	movs	r3, #2
  }
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800708c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fe5e 	bl	8006d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b08c      	sub	sp, #48	; 0x30
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b22      	cmp	r3, #34	; 0x22
 80070b8:	f040 80ab 	bne.w	8007212 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c4:	d117      	bne.n	80070f6 <UART_Receive_IT+0x50>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d113      	bne.n	80070f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28
 80070f4:	e026      	b.n	8007144 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070fc:	2300      	movs	r3, #0
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007108:	d007      	beq.n	800711a <UART_Receive_IT+0x74>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <UART_Receive_IT+0x82>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	b2da      	uxtb	r2, r3
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e008      	b.n	800713a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007134:	b2da      	uxtb	r2, r3
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29b      	uxth	r3, r3
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	4619      	mov	r1, r3
 8007152:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007154:	2b00      	cmp	r3, #0
 8007156:	d15a      	bne.n	800720e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0220 	bic.w	r2, r2, #32
 8007166:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695a      	ldr	r2, [r3, #20]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007194:	2b01      	cmp	r3, #1
 8007196:	d135      	bne.n	8007204 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	613b      	str	r3, [r7, #16]
   return(result);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f023 0310 	bic.w	r3, r3, #16
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071be:	623a      	str	r2, [r7, #32]
 80071c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	69f9      	ldr	r1, [r7, #28]
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e5      	bne.n	800719e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d10a      	bne.n	80071f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff fdbf 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
 8007202:	e002      	b.n	800720a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fb fe7d 	bl	8002f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	e002      	b.n	8007214 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3730      	adds	r7, #48	; 0x30
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	b09f      	sub	sp, #124	; 0x7c
 8007222:	af00      	add	r7, sp, #0
 8007224:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007232:	68d9      	ldr	r1, [r3, #12]
 8007234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	ea40 0301 	orr.w	r3, r0, r1
 800723c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800723e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	431a      	orrs	r2, r3
 8007248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	431a      	orrs	r2, r3
 800724e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	4313      	orrs	r3, r2
 8007254:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007260:	f021 010c 	bic.w	r1, r1, #12
 8007264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800726a:	430b      	orrs	r3, r1
 800726c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800726e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727a:	6999      	ldr	r1, [r3, #24]
 800727c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	ea40 0301 	orr.w	r3, r0, r1
 8007284:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4bc5      	ldr	r3, [pc, #788]	; (80075a0 <UART_SetConfig+0x384>)
 800728c:	429a      	cmp	r2, r3
 800728e:	d004      	beq.n	800729a <UART_SetConfig+0x7e>
 8007290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4bc3      	ldr	r3, [pc, #780]	; (80075a4 <UART_SetConfig+0x388>)
 8007296:	429a      	cmp	r2, r3
 8007298:	d103      	bne.n	80072a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800729a:	f7fe f879 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 800729e:	6778      	str	r0, [r7, #116]	; 0x74
 80072a0:	e002      	b.n	80072a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a2:	f7fe f861 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 80072a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b0:	f040 80b6 	bne.w	8007420 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b6:	461c      	mov	r4, r3
 80072b8:	f04f 0500 	mov.w	r5, #0
 80072bc:	4622      	mov	r2, r4
 80072be:	462b      	mov	r3, r5
 80072c0:	1891      	adds	r1, r2, r2
 80072c2:	6439      	str	r1, [r7, #64]	; 0x40
 80072c4:	415b      	adcs	r3, r3
 80072c6:	647b      	str	r3, [r7, #68]	; 0x44
 80072c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072cc:	1912      	adds	r2, r2, r4
 80072ce:	eb45 0303 	adc.w	r3, r5, r3
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f04f 0100 	mov.w	r1, #0
 80072da:	00d9      	lsls	r1, r3, #3
 80072dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072e0:	00d0      	lsls	r0, r2, #3
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	1911      	adds	r1, r2, r4
 80072e8:	6639      	str	r1, [r7, #96]	; 0x60
 80072ea:	416b      	adcs	r3, r5
 80072ec:	667b      	str	r3, [r7, #100]	; 0x64
 80072ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	461a      	mov	r2, r3
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	1891      	adds	r1, r2, r2
 80072fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80072fc:	415b      	adcs	r3, r3
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007304:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007308:	f7f8 ffb2 	bl	8000270 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4ba5      	ldr	r3, [pc, #660]	; (80075a8 <UART_SetConfig+0x38c>)
 8007312:	fba3 2302 	umull	r2, r3, r3, r2
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	011e      	lsls	r6, r3, #4
 800731a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800731c:	461c      	mov	r4, r3
 800731e:	f04f 0500 	mov.w	r5, #0
 8007322:	4622      	mov	r2, r4
 8007324:	462b      	mov	r3, r5
 8007326:	1891      	adds	r1, r2, r2
 8007328:	6339      	str	r1, [r7, #48]	; 0x30
 800732a:	415b      	adcs	r3, r3
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
 800732e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007332:	1912      	adds	r2, r2, r4
 8007334:	eb45 0303 	adc.w	r3, r5, r3
 8007338:	f04f 0000 	mov.w	r0, #0
 800733c:	f04f 0100 	mov.w	r1, #0
 8007340:	00d9      	lsls	r1, r3, #3
 8007342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007346:	00d0      	lsls	r0, r2, #3
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	1911      	adds	r1, r2, r4
 800734e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007350:	416b      	adcs	r3, r5
 8007352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	461a      	mov	r2, r3
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	1891      	adds	r1, r2, r2
 8007360:	62b9      	str	r1, [r7, #40]	; 0x28
 8007362:	415b      	adcs	r3, r3
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800736a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800736e:	f7f8 ff7f 	bl	8000270 <__aeabi_uldivmod>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4b8c      	ldr	r3, [pc, #560]	; (80075a8 <UART_SetConfig+0x38c>)
 8007378:	fba3 1302 	umull	r1, r3, r3, r2
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	2164      	movs	r1, #100	; 0x64
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	3332      	adds	r3, #50	; 0x32
 800738a:	4a87      	ldr	r2, [pc, #540]	; (80075a8 <UART_SetConfig+0x38c>)
 800738c:	fba2 2303 	umull	r2, r3, r2, r3
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007398:	441e      	add	r6, r3
 800739a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800739c:	4618      	mov	r0, r3
 800739e:	f04f 0100 	mov.w	r1, #0
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	1894      	adds	r4, r2, r2
 80073a8:	623c      	str	r4, [r7, #32]
 80073aa:	415b      	adcs	r3, r3
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
 80073ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073b2:	1812      	adds	r2, r2, r0
 80073b4:	eb41 0303 	adc.w	r3, r1, r3
 80073b8:	f04f 0400 	mov.w	r4, #0
 80073bc:	f04f 0500 	mov.w	r5, #0
 80073c0:	00dd      	lsls	r5, r3, #3
 80073c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073c6:	00d4      	lsls	r4, r2, #3
 80073c8:	4622      	mov	r2, r4
 80073ca:	462b      	mov	r3, r5
 80073cc:	1814      	adds	r4, r2, r0
 80073ce:	653c      	str	r4, [r7, #80]	; 0x50
 80073d0:	414b      	adcs	r3, r1
 80073d2:	657b      	str	r3, [r7, #84]	; 0x54
 80073d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	461a      	mov	r2, r3
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	1891      	adds	r1, r2, r2
 80073e0:	61b9      	str	r1, [r7, #24]
 80073e2:	415b      	adcs	r3, r3
 80073e4:	61fb      	str	r3, [r7, #28]
 80073e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80073ee:	f7f8 ff3f 	bl	8000270 <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4b6c      	ldr	r3, [pc, #432]	; (80075a8 <UART_SetConfig+0x38c>)
 80073f8:	fba3 1302 	umull	r1, r3, r3, r2
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	2164      	movs	r1, #100	; 0x64
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	3332      	adds	r3, #50	; 0x32
 800740a:	4a67      	ldr	r2, [pc, #412]	; (80075a8 <UART_SetConfig+0x38c>)
 800740c:	fba2 2303 	umull	r2, r3, r2, r3
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f003 0207 	and.w	r2, r3, #7
 8007416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4432      	add	r2, r6
 800741c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800741e:	e0b9      	b.n	8007594 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007422:	461c      	mov	r4, r3
 8007424:	f04f 0500 	mov.w	r5, #0
 8007428:	4622      	mov	r2, r4
 800742a:	462b      	mov	r3, r5
 800742c:	1891      	adds	r1, r2, r2
 800742e:	6139      	str	r1, [r7, #16]
 8007430:	415b      	adcs	r3, r3
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007438:	1912      	adds	r2, r2, r4
 800743a:	eb45 0303 	adc.w	r3, r5, r3
 800743e:	f04f 0000 	mov.w	r0, #0
 8007442:	f04f 0100 	mov.w	r1, #0
 8007446:	00d9      	lsls	r1, r3, #3
 8007448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800744c:	00d0      	lsls	r0, r2, #3
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	eb12 0804 	adds.w	r8, r2, r4
 8007456:	eb43 0905 	adc.w	r9, r3, r5
 800745a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	4618      	mov	r0, r3
 8007460:	f04f 0100 	mov.w	r1, #0
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	008b      	lsls	r3, r1, #2
 800746e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007472:	0082      	lsls	r2, r0, #2
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f8 fefa 	bl	8000270 <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4b49      	ldr	r3, [pc, #292]	; (80075a8 <UART_SetConfig+0x38c>)
 8007482:	fba3 2302 	umull	r2, r3, r3, r2
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	011e      	lsls	r6, r3, #4
 800748a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800748c:	4618      	mov	r0, r3
 800748e:	f04f 0100 	mov.w	r1, #0
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	1894      	adds	r4, r2, r2
 8007498:	60bc      	str	r4, [r7, #8]
 800749a:	415b      	adcs	r3, r3
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074a2:	1812      	adds	r2, r2, r0
 80074a4:	eb41 0303 	adc.w	r3, r1, r3
 80074a8:	f04f 0400 	mov.w	r4, #0
 80074ac:	f04f 0500 	mov.w	r5, #0
 80074b0:	00dd      	lsls	r5, r3, #3
 80074b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074b6:	00d4      	lsls	r4, r2, #3
 80074b8:	4622      	mov	r2, r4
 80074ba:	462b      	mov	r3, r5
 80074bc:	1814      	adds	r4, r2, r0
 80074be:	64bc      	str	r4, [r7, #72]	; 0x48
 80074c0:	414b      	adcs	r3, r1
 80074c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f04f 0100 	mov.w	r1, #0
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	008b      	lsls	r3, r1, #2
 80074d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074dc:	0082      	lsls	r2, r0, #2
 80074de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80074e2:	f7f8 fec5 	bl	8000270 <__aeabi_uldivmod>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4b2f      	ldr	r3, [pc, #188]	; (80075a8 <UART_SetConfig+0x38c>)
 80074ec:	fba3 1302 	umull	r1, r3, r3, r2
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	2164      	movs	r1, #100	; 0x64
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	3332      	adds	r3, #50	; 0x32
 80074fe:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <UART_SetConfig+0x38c>)
 8007500:	fba2 2303 	umull	r2, r3, r2, r3
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800750a:	441e      	add	r6, r3
 800750c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750e:	4618      	mov	r0, r3
 8007510:	f04f 0100 	mov.w	r1, #0
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	1894      	adds	r4, r2, r2
 800751a:	603c      	str	r4, [r7, #0]
 800751c:	415b      	adcs	r3, r3
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007524:	1812      	adds	r2, r2, r0
 8007526:	eb41 0303 	adc.w	r3, r1, r3
 800752a:	f04f 0400 	mov.w	r4, #0
 800752e:	f04f 0500 	mov.w	r5, #0
 8007532:	00dd      	lsls	r5, r3, #3
 8007534:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007538:	00d4      	lsls	r4, r2, #3
 800753a:	4622      	mov	r2, r4
 800753c:	462b      	mov	r3, r5
 800753e:	eb12 0a00 	adds.w	sl, r2, r0
 8007542:	eb43 0b01 	adc.w	fp, r3, r1
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4618      	mov	r0, r3
 800754c:	f04f 0100 	mov.w	r1, #0
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	008b      	lsls	r3, r1, #2
 800755a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800755e:	0082      	lsls	r2, r0, #2
 8007560:	4650      	mov	r0, sl
 8007562:	4659      	mov	r1, fp
 8007564:	f7f8 fe84 	bl	8000270 <__aeabi_uldivmod>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <UART_SetConfig+0x38c>)
 800756e:	fba3 1302 	umull	r1, r3, r3, r2
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	2164      	movs	r1, #100	; 0x64
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	3332      	adds	r3, #50	; 0x32
 8007580:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <UART_SetConfig+0x38c>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	f003 020f 	and.w	r2, r3, #15
 800758c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4432      	add	r2, r6
 8007592:	609a      	str	r2, [r3, #8]
}
 8007594:	bf00      	nop
 8007596:	377c      	adds	r7, #124	; 0x7c
 8007598:	46bd      	mov	sp, r7
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	bf00      	nop
 80075a0:	40011000 	.word	0x40011000
 80075a4:	40011400 	.word	0x40011400
 80075a8:	51eb851f 	.word	0x51eb851f

080075ac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4b20      	ldr	r3, [pc, #128]	; (800764c <FSMC_NORSRAM_Init+0xa0>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80075d6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80075dc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80075e2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80075e8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80075ee:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80075f4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80075fa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007600:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007606:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800760c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007612:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007618:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b08      	cmp	r3, #8
 8007626:	d103      	bne.n	8007630 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	fff00080 	.word	0xfff00080

08007650 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007672:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800767e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007686:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800768e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007698:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	3b02      	subs	r3, #2
 80076a0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80076a2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80076a8:	4313      	orrs	r3, r2
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6979      	ldr	r1, [r7, #20]
 80076b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
	...

080076cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e4:	d122      	bne.n	800772c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007702:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800770a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007712:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007718:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6979      	ldr	r1, [r7, #20]
 8007726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800772a:	e005      	b.n	8007738 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	cff00000 	.word	0xcff00000

0800774c <__errno>:
 800774c:	4b01      	ldr	r3, [pc, #4]	; (8007754 <__errno+0x8>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000018 	.word	0x20000018

08007758 <__libc_init_array>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	4d0d      	ldr	r5, [pc, #52]	; (8007790 <__libc_init_array+0x38>)
 800775c:	4c0d      	ldr	r4, [pc, #52]	; (8007794 <__libc_init_array+0x3c>)
 800775e:	1b64      	subs	r4, r4, r5
 8007760:	10a4      	asrs	r4, r4, #2
 8007762:	2600      	movs	r6, #0
 8007764:	42a6      	cmp	r6, r4
 8007766:	d109      	bne.n	800777c <__libc_init_array+0x24>
 8007768:	4d0b      	ldr	r5, [pc, #44]	; (8007798 <__libc_init_array+0x40>)
 800776a:	4c0c      	ldr	r4, [pc, #48]	; (800779c <__libc_init_array+0x44>)
 800776c:	f001 f84c 	bl	8008808 <_init>
 8007770:	1b64      	subs	r4, r4, r5
 8007772:	10a4      	asrs	r4, r4, #2
 8007774:	2600      	movs	r6, #0
 8007776:	42a6      	cmp	r6, r4
 8007778:	d105      	bne.n	8007786 <__libc_init_array+0x2e>
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007780:	4798      	blx	r3
 8007782:	3601      	adds	r6, #1
 8007784:	e7ee      	b.n	8007764 <__libc_init_array+0xc>
 8007786:	f855 3b04 	ldr.w	r3, [r5], #4
 800778a:	4798      	blx	r3
 800778c:	3601      	adds	r6, #1
 800778e:	e7f2      	b.n	8007776 <__libc_init_array+0x1e>
 8007790:	0800b97c 	.word	0x0800b97c
 8007794:	0800b97c 	.word	0x0800b97c
 8007798:	0800b97c 	.word	0x0800b97c
 800779c:	0800b980 	.word	0x0800b980

080077a0 <memset>:
 80077a0:	4402      	add	r2, r0
 80077a2:	4603      	mov	r3, r0
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d100      	bne.n	80077aa <memset+0xa>
 80077a8:	4770      	bx	lr
 80077aa:	f803 1b01 	strb.w	r1, [r3], #1
 80077ae:	e7f9      	b.n	80077a4 <memset+0x4>

080077b0 <_puts_r>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	460e      	mov	r6, r1
 80077b4:	4605      	mov	r5, r0
 80077b6:	b118      	cbz	r0, 80077c0 <_puts_r+0x10>
 80077b8:	6983      	ldr	r3, [r0, #24]
 80077ba:	b90b      	cbnz	r3, 80077c0 <_puts_r+0x10>
 80077bc:	f000 fa68 	bl	8007c90 <__sinit>
 80077c0:	69ab      	ldr	r3, [r5, #24]
 80077c2:	68ac      	ldr	r4, [r5, #8]
 80077c4:	b913      	cbnz	r3, 80077cc <_puts_r+0x1c>
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 fa62 	bl	8007c90 <__sinit>
 80077cc:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <_puts_r+0xd0>)
 80077ce:	429c      	cmp	r4, r3
 80077d0:	d120      	bne.n	8007814 <_puts_r+0x64>
 80077d2:	686c      	ldr	r4, [r5, #4]
 80077d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077d6:	07db      	lsls	r3, r3, #31
 80077d8:	d405      	bmi.n	80077e6 <_puts_r+0x36>
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	0598      	lsls	r0, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_puts_r+0x36>
 80077e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e2:	f000 faf3 	bl	8007dcc <__retarget_lock_acquire_recursive>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	0719      	lsls	r1, r3, #28
 80077ea:	d51d      	bpl.n	8007828 <_puts_r+0x78>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	b1db      	cbz	r3, 8007828 <_puts_r+0x78>
 80077f0:	3e01      	subs	r6, #1
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60a3      	str	r3, [r4, #8]
 80077fc:	bb39      	cbnz	r1, 800784e <_puts_r+0x9e>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da38      	bge.n	8007874 <_puts_r+0xc4>
 8007802:	4622      	mov	r2, r4
 8007804:	210a      	movs	r1, #10
 8007806:	4628      	mov	r0, r5
 8007808:	f000 f868 	bl	80078dc <__swbuf_r>
 800780c:	3001      	adds	r0, #1
 800780e:	d011      	beq.n	8007834 <_puts_r+0x84>
 8007810:	250a      	movs	r5, #10
 8007812:	e011      	b.n	8007838 <_puts_r+0x88>
 8007814:	4b1b      	ldr	r3, [pc, #108]	; (8007884 <_puts_r+0xd4>)
 8007816:	429c      	cmp	r4, r3
 8007818:	d101      	bne.n	800781e <_puts_r+0x6e>
 800781a:	68ac      	ldr	r4, [r5, #8]
 800781c:	e7da      	b.n	80077d4 <_puts_r+0x24>
 800781e:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <_puts_r+0xd8>)
 8007820:	429c      	cmp	r4, r3
 8007822:	bf08      	it	eq
 8007824:	68ec      	ldreq	r4, [r5, #12]
 8007826:	e7d5      	b.n	80077d4 <_puts_r+0x24>
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f000 f8a8 	bl	8007980 <__swsetup_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	d0dd      	beq.n	80077f0 <_puts_r+0x40>
 8007834:	f04f 35ff 	mov.w	r5, #4294967295
 8007838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800783a:	07da      	lsls	r2, r3, #31
 800783c:	d405      	bmi.n	800784a <_puts_r+0x9a>
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	059b      	lsls	r3, r3, #22
 8007842:	d402      	bmi.n	800784a <_puts_r+0x9a>
 8007844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007846:	f000 fac2 	bl	8007dce <__retarget_lock_release_recursive>
 800784a:	4628      	mov	r0, r5
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	2b00      	cmp	r3, #0
 8007850:	da04      	bge.n	800785c <_puts_r+0xac>
 8007852:	69a2      	ldr	r2, [r4, #24]
 8007854:	429a      	cmp	r2, r3
 8007856:	dc06      	bgt.n	8007866 <_puts_r+0xb6>
 8007858:	290a      	cmp	r1, #10
 800785a:	d004      	beq.n	8007866 <_puts_r+0xb6>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	7019      	strb	r1, [r3, #0]
 8007864:	e7c5      	b.n	80077f2 <_puts_r+0x42>
 8007866:	4622      	mov	r2, r4
 8007868:	4628      	mov	r0, r5
 800786a:	f000 f837 	bl	80078dc <__swbuf_r>
 800786e:	3001      	adds	r0, #1
 8007870:	d1bf      	bne.n	80077f2 <_puts_r+0x42>
 8007872:	e7df      	b.n	8007834 <_puts_r+0x84>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	250a      	movs	r5, #10
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	6022      	str	r2, [r4, #0]
 800787c:	701d      	strb	r5, [r3, #0]
 800787e:	e7db      	b.n	8007838 <_puts_r+0x88>
 8007880:	0800b900 	.word	0x0800b900
 8007884:	0800b920 	.word	0x0800b920
 8007888:	0800b8e0 	.word	0x0800b8e0

0800788c <puts>:
 800788c:	4b02      	ldr	r3, [pc, #8]	; (8007898 <puts+0xc>)
 800788e:	4601      	mov	r1, r0
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	f7ff bf8d 	b.w	80077b0 <_puts_r>
 8007896:	bf00      	nop
 8007898:	20000018 	.word	0x20000018

0800789c <siprintf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b500      	push	{lr}
 80078a0:	b09c      	sub	sp, #112	; 0x70
 80078a2:	ab1d      	add	r3, sp, #116	; 0x74
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078ac:	4809      	ldr	r0, [pc, #36]	; (80078d4 <siprintf+0x38>)
 80078ae:	9107      	str	r1, [sp, #28]
 80078b0:	9104      	str	r1, [sp, #16]
 80078b2:	4909      	ldr	r1, [pc, #36]	; (80078d8 <siprintf+0x3c>)
 80078b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	a902      	add	r1, sp, #8
 80078c0:	f000 fbf0 	bl	80080a4 <_svfiprintf_r>
 80078c4:	9b02      	ldr	r3, [sp, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	b01c      	add	sp, #112	; 0x70
 80078cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d0:	b003      	add	sp, #12
 80078d2:	4770      	bx	lr
 80078d4:	20000018 	.word	0x20000018
 80078d8:	ffff0208 	.word	0xffff0208

080078dc <__swbuf_r>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	460e      	mov	r6, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	4605      	mov	r5, r0
 80078e4:	b118      	cbz	r0, 80078ee <__swbuf_r+0x12>
 80078e6:	6983      	ldr	r3, [r0, #24]
 80078e8:	b90b      	cbnz	r3, 80078ee <__swbuf_r+0x12>
 80078ea:	f000 f9d1 	bl	8007c90 <__sinit>
 80078ee:	4b21      	ldr	r3, [pc, #132]	; (8007974 <__swbuf_r+0x98>)
 80078f0:	429c      	cmp	r4, r3
 80078f2:	d12b      	bne.n	800794c <__swbuf_r+0x70>
 80078f4:	686c      	ldr	r4, [r5, #4]
 80078f6:	69a3      	ldr	r3, [r4, #24]
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	071a      	lsls	r2, r3, #28
 80078fe:	d52f      	bpl.n	8007960 <__swbuf_r+0x84>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	b36b      	cbz	r3, 8007960 <__swbuf_r+0x84>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1ac0      	subs	r0, r0, r3
 800790a:	6963      	ldr	r3, [r4, #20]
 800790c:	b2f6      	uxtb	r6, r6
 800790e:	4283      	cmp	r3, r0
 8007910:	4637      	mov	r7, r6
 8007912:	dc04      	bgt.n	800791e <__swbuf_r+0x42>
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f926 	bl	8007b68 <_fflush_r>
 800791c:	bb30      	cbnz	r0, 800796c <__swbuf_r+0x90>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	3b01      	subs	r3, #1
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	701e      	strb	r6, [r3, #0]
 800792c:	6963      	ldr	r3, [r4, #20]
 800792e:	3001      	adds	r0, #1
 8007930:	4283      	cmp	r3, r0
 8007932:	d004      	beq.n	800793e <__swbuf_r+0x62>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	07db      	lsls	r3, r3, #31
 8007938:	d506      	bpl.n	8007948 <__swbuf_r+0x6c>
 800793a:	2e0a      	cmp	r6, #10
 800793c:	d104      	bne.n	8007948 <__swbuf_r+0x6c>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f911 	bl	8007b68 <_fflush_r>
 8007946:	b988      	cbnz	r0, 800796c <__swbuf_r+0x90>
 8007948:	4638      	mov	r0, r7
 800794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <__swbuf_r+0x9c>)
 800794e:	429c      	cmp	r4, r3
 8007950:	d101      	bne.n	8007956 <__swbuf_r+0x7a>
 8007952:	68ac      	ldr	r4, [r5, #8]
 8007954:	e7cf      	b.n	80078f6 <__swbuf_r+0x1a>
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <__swbuf_r+0xa0>)
 8007958:	429c      	cmp	r4, r3
 800795a:	bf08      	it	eq
 800795c:	68ec      	ldreq	r4, [r5, #12]
 800795e:	e7ca      	b.n	80078f6 <__swbuf_r+0x1a>
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f80c 	bl	8007980 <__swsetup_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	d0cb      	beq.n	8007904 <__swbuf_r+0x28>
 800796c:	f04f 37ff 	mov.w	r7, #4294967295
 8007970:	e7ea      	b.n	8007948 <__swbuf_r+0x6c>
 8007972:	bf00      	nop
 8007974:	0800b900 	.word	0x0800b900
 8007978:	0800b920 	.word	0x0800b920
 800797c:	0800b8e0 	.word	0x0800b8e0

08007980 <__swsetup_r>:
 8007980:	4b32      	ldr	r3, [pc, #200]	; (8007a4c <__swsetup_r+0xcc>)
 8007982:	b570      	push	{r4, r5, r6, lr}
 8007984:	681d      	ldr	r5, [r3, #0]
 8007986:	4606      	mov	r6, r0
 8007988:	460c      	mov	r4, r1
 800798a:	b125      	cbz	r5, 8007996 <__swsetup_r+0x16>
 800798c:	69ab      	ldr	r3, [r5, #24]
 800798e:	b913      	cbnz	r3, 8007996 <__swsetup_r+0x16>
 8007990:	4628      	mov	r0, r5
 8007992:	f000 f97d 	bl	8007c90 <__sinit>
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <__swsetup_r+0xd0>)
 8007998:	429c      	cmp	r4, r3
 800799a:	d10f      	bne.n	80079bc <__swsetup_r+0x3c>
 800799c:	686c      	ldr	r4, [r5, #4]
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a4:	0719      	lsls	r1, r3, #28
 80079a6:	d42c      	bmi.n	8007a02 <__swsetup_r+0x82>
 80079a8:	06dd      	lsls	r5, r3, #27
 80079aa:	d411      	bmi.n	80079d0 <__swsetup_r+0x50>
 80079ac:	2309      	movs	r3, #9
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ba:	e03e      	b.n	8007a3a <__swsetup_r+0xba>
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <__swsetup_r+0xd4>)
 80079be:	429c      	cmp	r4, r3
 80079c0:	d101      	bne.n	80079c6 <__swsetup_r+0x46>
 80079c2:	68ac      	ldr	r4, [r5, #8]
 80079c4:	e7eb      	b.n	800799e <__swsetup_r+0x1e>
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <__swsetup_r+0xd8>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	bf08      	it	eq
 80079cc:	68ec      	ldreq	r4, [r5, #12]
 80079ce:	e7e6      	b.n	800799e <__swsetup_r+0x1e>
 80079d0:	0758      	lsls	r0, r3, #29
 80079d2:	d512      	bpl.n	80079fa <__swsetup_r+0x7a>
 80079d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079d6:	b141      	cbz	r1, 80079ea <__swsetup_r+0x6a>
 80079d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079dc:	4299      	cmp	r1, r3
 80079de:	d002      	beq.n	80079e6 <__swsetup_r+0x66>
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 fa59 	bl	8007e98 <_free_r>
 80079e6:	2300      	movs	r3, #0
 80079e8:	6363      	str	r3, [r4, #52]	; 0x34
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	2300      	movs	r3, #0
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f043 0308 	orr.w	r3, r3, #8
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	b94b      	cbnz	r3, 8007a1a <__swsetup_r+0x9a>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a10:	d003      	beq.n	8007a1a <__swsetup_r+0x9a>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4630      	mov	r0, r6
 8007a16:	f000 f9ff 	bl	8007e18 <__smakebuf_r>
 8007a1a:	89a0      	ldrh	r0, [r4, #12]
 8007a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a20:	f010 0301 	ands.w	r3, r0, #1
 8007a24:	d00a      	beq.n	8007a3c <__swsetup_r+0xbc>
 8007a26:	2300      	movs	r3, #0
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	6963      	ldr	r3, [r4, #20]
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	61a3      	str	r3, [r4, #24]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b943      	cbnz	r3, 8007a46 <__swsetup_r+0xc6>
 8007a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a38:	d1ba      	bne.n	80079b0 <__swsetup_r+0x30>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	0781      	lsls	r1, r0, #30
 8007a3e:	bf58      	it	pl
 8007a40:	6963      	ldrpl	r3, [r4, #20]
 8007a42:	60a3      	str	r3, [r4, #8]
 8007a44:	e7f4      	b.n	8007a30 <__swsetup_r+0xb0>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e7f7      	b.n	8007a3a <__swsetup_r+0xba>
 8007a4a:	bf00      	nop
 8007a4c:	20000018 	.word	0x20000018
 8007a50:	0800b900 	.word	0x0800b900
 8007a54:	0800b920 	.word	0x0800b920
 8007a58:	0800b8e0 	.word	0x0800b8e0

08007a5c <__sflush_r>:
 8007a5c:	898a      	ldrh	r2, [r1, #12]
 8007a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	4605      	mov	r5, r0
 8007a64:	0710      	lsls	r0, r2, #28
 8007a66:	460c      	mov	r4, r1
 8007a68:	d458      	bmi.n	8007b1c <__sflush_r+0xc0>
 8007a6a:	684b      	ldr	r3, [r1, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dc05      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dc02      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	d0f9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a88:	682f      	ldr	r7, [r5, #0]
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	d032      	beq.n	8007af4 <__sflush_r+0x98>
 8007a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	075a      	lsls	r2, r3, #29
 8007a94:	d505      	bpl.n	8007aa2 <__sflush_r+0x46>
 8007a96:	6863      	ldr	r3, [r4, #4]
 8007a98:	1ac0      	subs	r0, r0, r3
 8007a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a9c:	b10b      	cbz	r3, 8007aa2 <__sflush_r+0x46>
 8007a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa0:	1ac0      	subs	r0, r0, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa8:	6a21      	ldr	r1, [r4, #32]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	47b0      	blx	r6
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	d106      	bne.n	8007ac2 <__sflush_r+0x66>
 8007ab4:	6829      	ldr	r1, [r5, #0]
 8007ab6:	291d      	cmp	r1, #29
 8007ab8:	d82c      	bhi.n	8007b14 <__sflush_r+0xb8>
 8007aba:	4a2a      	ldr	r2, [pc, #168]	; (8007b64 <__sflush_r+0x108>)
 8007abc:	40ca      	lsrs	r2, r1
 8007abe:	07d6      	lsls	r6, r2, #31
 8007ac0:	d528      	bpl.n	8007b14 <__sflush_r+0xb8>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	6062      	str	r2, [r4, #4]
 8007ac6:	04d9      	lsls	r1, r3, #19
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	d504      	bpl.n	8007ad8 <__sflush_r+0x7c>
 8007ace:	1c42      	adds	r2, r0, #1
 8007ad0:	d101      	bne.n	8007ad6 <__sflush_r+0x7a>
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	b903      	cbnz	r3, 8007ad8 <__sflush_r+0x7c>
 8007ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ada:	602f      	str	r7, [r5, #0]
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d0ca      	beq.n	8007a76 <__sflush_r+0x1a>
 8007ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	d002      	beq.n	8007aee <__sflush_r+0x92>
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 f9d5 	bl	8007e98 <_free_r>
 8007aee:	2000      	movs	r0, #0
 8007af0:	6360      	str	r0, [r4, #52]	; 0x34
 8007af2:	e7c1      	b.n	8007a78 <__sflush_r+0x1c>
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	2301      	movs	r3, #1
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b0      	blx	r6
 8007afc:	1c41      	adds	r1, r0, #1
 8007afe:	d1c7      	bne.n	8007a90 <__sflush_r+0x34>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c4      	beq.n	8007a90 <__sflush_r+0x34>
 8007b06:	2b1d      	cmp	r3, #29
 8007b08:	d001      	beq.n	8007b0e <__sflush_r+0xb2>
 8007b0a:	2b16      	cmp	r3, #22
 8007b0c:	d101      	bne.n	8007b12 <__sflush_r+0xb6>
 8007b0e:	602f      	str	r7, [r5, #0]
 8007b10:	e7b1      	b.n	8007a76 <__sflush_r+0x1a>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	e7ad      	b.n	8007a78 <__sflush_r+0x1c>
 8007b1c:	690f      	ldr	r7, [r1, #16]
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	d0a9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007b22:	0793      	lsls	r3, r2, #30
 8007b24:	680e      	ldr	r6, [r1, #0]
 8007b26:	bf08      	it	eq
 8007b28:	694b      	ldreq	r3, [r1, #20]
 8007b2a:	600f      	str	r7, [r1, #0]
 8007b2c:	bf18      	it	ne
 8007b2e:	2300      	movne	r3, #0
 8007b30:	eba6 0807 	sub.w	r8, r6, r7
 8007b34:	608b      	str	r3, [r1, #8]
 8007b36:	f1b8 0f00 	cmp.w	r8, #0
 8007b3a:	dd9c      	ble.n	8007a76 <__sflush_r+0x1a>
 8007b3c:	6a21      	ldr	r1, [r4, #32]
 8007b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b40:	4643      	mov	r3, r8
 8007b42:	463a      	mov	r2, r7
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b0      	blx	r6
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	dc06      	bgt.n	8007b5a <__sflush_r+0xfe>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e78e      	b.n	8007a78 <__sflush_r+0x1c>
 8007b5a:	4407      	add	r7, r0
 8007b5c:	eba8 0800 	sub.w	r8, r8, r0
 8007b60:	e7e9      	b.n	8007b36 <__sflush_r+0xda>
 8007b62:	bf00      	nop
 8007b64:	20400001 	.word	0x20400001

08007b68 <_fflush_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	b913      	cbnz	r3, 8007b78 <_fflush_r+0x10>
 8007b72:	2500      	movs	r5, #0
 8007b74:	4628      	mov	r0, r5
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	b118      	cbz	r0, 8007b82 <_fflush_r+0x1a>
 8007b7a:	6983      	ldr	r3, [r0, #24]
 8007b7c:	b90b      	cbnz	r3, 8007b82 <_fflush_r+0x1a>
 8007b7e:	f000 f887 	bl	8007c90 <__sinit>
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <_fflush_r+0x6c>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d11b      	bne.n	8007bc0 <_fflush_r+0x58>
 8007b88:	686c      	ldr	r4, [r5, #4]
 8007b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ef      	beq.n	8007b72 <_fflush_r+0xa>
 8007b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b94:	07d0      	lsls	r0, r2, #31
 8007b96:	d404      	bmi.n	8007ba2 <_fflush_r+0x3a>
 8007b98:	0599      	lsls	r1, r3, #22
 8007b9a:	d402      	bmi.n	8007ba2 <_fflush_r+0x3a>
 8007b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b9e:	f000 f915 	bl	8007dcc <__retarget_lock_acquire_recursive>
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	f7ff ff59 	bl	8007a5c <__sflush_r>
 8007baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bac:	07da      	lsls	r2, r3, #31
 8007bae:	4605      	mov	r5, r0
 8007bb0:	d4e0      	bmi.n	8007b74 <_fflush_r+0xc>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	059b      	lsls	r3, r3, #22
 8007bb6:	d4dd      	bmi.n	8007b74 <_fflush_r+0xc>
 8007bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bba:	f000 f908 	bl	8007dce <__retarget_lock_release_recursive>
 8007bbe:	e7d9      	b.n	8007b74 <_fflush_r+0xc>
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <_fflush_r+0x70>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d101      	bne.n	8007bca <_fflush_r+0x62>
 8007bc6:	68ac      	ldr	r4, [r5, #8]
 8007bc8:	e7df      	b.n	8007b8a <_fflush_r+0x22>
 8007bca:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <_fflush_r+0x74>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	bf08      	it	eq
 8007bd0:	68ec      	ldreq	r4, [r5, #12]
 8007bd2:	e7da      	b.n	8007b8a <_fflush_r+0x22>
 8007bd4:	0800b900 	.word	0x0800b900
 8007bd8:	0800b920 	.word	0x0800b920
 8007bdc:	0800b8e0 	.word	0x0800b8e0

08007be0 <std>:
 8007be0:	2300      	movs	r3, #0
 8007be2:	b510      	push	{r4, lr}
 8007be4:	4604      	mov	r4, r0
 8007be6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bee:	6083      	str	r3, [r0, #8]
 8007bf0:	8181      	strh	r1, [r0, #12]
 8007bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8007bf4:	81c2      	strh	r2, [r0, #14]
 8007bf6:	6183      	str	r3, [r0, #24]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	305c      	adds	r0, #92	; 0x5c
 8007bfe:	f7ff fdcf 	bl	80077a0 <memset>
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <std+0x38>)
 8007c04:	6263      	str	r3, [r4, #36]	; 0x24
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <std+0x3c>)
 8007c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <std+0x40>)
 8007c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c0e:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <std+0x44>)
 8007c10:	6224      	str	r4, [r4, #32]
 8007c12:	6323      	str	r3, [r4, #48]	; 0x30
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	080085ed 	.word	0x080085ed
 8007c1c:	0800860f 	.word	0x0800860f
 8007c20:	08008647 	.word	0x08008647
 8007c24:	0800866b 	.word	0x0800866b

08007c28 <_cleanup_r>:
 8007c28:	4901      	ldr	r1, [pc, #4]	; (8007c30 <_cleanup_r+0x8>)
 8007c2a:	f000 b8af 	b.w	8007d8c <_fwalk_reent>
 8007c2e:	bf00      	nop
 8007c30:	08007b69 	.word	0x08007b69

08007c34 <__sfmoreglue>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	1e4a      	subs	r2, r1, #1
 8007c38:	2568      	movs	r5, #104	; 0x68
 8007c3a:	4355      	muls	r5, r2
 8007c3c:	460e      	mov	r6, r1
 8007c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c42:	f000 f979 	bl	8007f38 <_malloc_r>
 8007c46:	4604      	mov	r4, r0
 8007c48:	b140      	cbz	r0, 8007c5c <__sfmoreglue+0x28>
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c50:	300c      	adds	r0, #12
 8007c52:	60a0      	str	r0, [r4, #8]
 8007c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c58:	f7ff fda2 	bl	80077a0 <memset>
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}

08007c60 <__sfp_lock_acquire>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__sfp_lock_acquire+0x8>)
 8007c62:	f000 b8b3 	b.w	8007dcc <__retarget_lock_acquire_recursive>
 8007c66:	bf00      	nop
 8007c68:	20000370 	.word	0x20000370

08007c6c <__sfp_lock_release>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	; (8007c74 <__sfp_lock_release+0x8>)
 8007c6e:	f000 b8ae 	b.w	8007dce <__retarget_lock_release_recursive>
 8007c72:	bf00      	nop
 8007c74:	20000370 	.word	0x20000370

08007c78 <__sinit_lock_acquire>:
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <__sinit_lock_acquire+0x8>)
 8007c7a:	f000 b8a7 	b.w	8007dcc <__retarget_lock_acquire_recursive>
 8007c7e:	bf00      	nop
 8007c80:	2000036b 	.word	0x2000036b

08007c84 <__sinit_lock_release>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__sinit_lock_release+0x8>)
 8007c86:	f000 b8a2 	b.w	8007dce <__retarget_lock_release_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	2000036b 	.word	0x2000036b

08007c90 <__sinit>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	4604      	mov	r4, r0
 8007c94:	f7ff fff0 	bl	8007c78 <__sinit_lock_acquire>
 8007c98:	69a3      	ldr	r3, [r4, #24]
 8007c9a:	b11b      	cbz	r3, 8007ca4 <__sinit+0x14>
 8007c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca0:	f7ff bff0 	b.w	8007c84 <__sinit_lock_release>
 8007ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8007caa:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <__sinit+0x68>)
 8007cac:	4a13      	ldr	r2, [pc, #76]	; (8007cfc <__sinit+0x6c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	bf04      	itt	eq
 8007cb6:	2301      	moveq	r3, #1
 8007cb8:	61a3      	streq	r3, [r4, #24]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 f820 	bl	8007d00 <__sfp>
 8007cc0:	6060      	str	r0, [r4, #4]
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f81c 	bl	8007d00 <__sfp>
 8007cc8:	60a0      	str	r0, [r4, #8]
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f818 	bl	8007d00 <__sfp>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	60e0      	str	r0, [r4, #12]
 8007cd4:	2104      	movs	r1, #4
 8007cd6:	6860      	ldr	r0, [r4, #4]
 8007cd8:	f7ff ff82 	bl	8007be0 <std>
 8007cdc:	68a0      	ldr	r0, [r4, #8]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	2109      	movs	r1, #9
 8007ce2:	f7ff ff7d 	bl	8007be0 <std>
 8007ce6:	68e0      	ldr	r0, [r4, #12]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	2112      	movs	r1, #18
 8007cec:	f7ff ff78 	bl	8007be0 <std>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	61a3      	str	r3, [r4, #24]
 8007cf4:	e7d2      	b.n	8007c9c <__sinit+0xc>
 8007cf6:	bf00      	nop
 8007cf8:	0800b8dc 	.word	0x0800b8dc
 8007cfc:	08007c29 	.word	0x08007c29

08007d00 <__sfp>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	4607      	mov	r7, r0
 8007d04:	f7ff ffac 	bl	8007c60 <__sfp_lock_acquire>
 8007d08:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <__sfp+0x84>)
 8007d0a:	681e      	ldr	r6, [r3, #0]
 8007d0c:	69b3      	ldr	r3, [r6, #24]
 8007d0e:	b913      	cbnz	r3, 8007d16 <__sfp+0x16>
 8007d10:	4630      	mov	r0, r6
 8007d12:	f7ff ffbd 	bl	8007c90 <__sinit>
 8007d16:	3648      	adds	r6, #72	; 0x48
 8007d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	d503      	bpl.n	8007d28 <__sfp+0x28>
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	b30b      	cbz	r3, 8007d68 <__sfp+0x68>
 8007d24:	6836      	ldr	r6, [r6, #0]
 8007d26:	e7f7      	b.n	8007d18 <__sfp+0x18>
 8007d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d2c:	b9d5      	cbnz	r5, 8007d64 <__sfp+0x64>
 8007d2e:	4b16      	ldr	r3, [pc, #88]	; (8007d88 <__sfp+0x88>)
 8007d30:	60e3      	str	r3, [r4, #12]
 8007d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d36:	6665      	str	r5, [r4, #100]	; 0x64
 8007d38:	f000 f847 	bl	8007dca <__retarget_lock_init_recursive>
 8007d3c:	f7ff ff96 	bl	8007c6c <__sfp_lock_release>
 8007d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d48:	6025      	str	r5, [r4, #0]
 8007d4a:	61a5      	str	r5, [r4, #24]
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	4629      	mov	r1, r5
 8007d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d54:	f7ff fd24 	bl	80077a0 <memset>
 8007d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d60:	4620      	mov	r0, r4
 8007d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d64:	3468      	adds	r4, #104	; 0x68
 8007d66:	e7d9      	b.n	8007d1c <__sfp+0x1c>
 8007d68:	2104      	movs	r1, #4
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f7ff ff62 	bl	8007c34 <__sfmoreglue>
 8007d70:	4604      	mov	r4, r0
 8007d72:	6030      	str	r0, [r6, #0]
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d1d5      	bne.n	8007d24 <__sfp+0x24>
 8007d78:	f7ff ff78 	bl	8007c6c <__sfp_lock_release>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	e7ee      	b.n	8007d60 <__sfp+0x60>
 8007d82:	bf00      	nop
 8007d84:	0800b8dc 	.word	0x0800b8dc
 8007d88:	ffff0001 	.word	0xffff0001

08007d8c <_fwalk_reent>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	4606      	mov	r6, r0
 8007d92:	4688      	mov	r8, r1
 8007d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d98:	2700      	movs	r7, #0
 8007d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8007da2:	d505      	bpl.n	8007db0 <_fwalk_reent+0x24>
 8007da4:	6824      	ldr	r4, [r4, #0]
 8007da6:	2c00      	cmp	r4, #0
 8007da8:	d1f7      	bne.n	8007d9a <_fwalk_reent+0xe>
 8007daa:	4638      	mov	r0, r7
 8007dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db0:	89ab      	ldrh	r3, [r5, #12]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d907      	bls.n	8007dc6 <_fwalk_reent+0x3a>
 8007db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	d003      	beq.n	8007dc6 <_fwalk_reent+0x3a>
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	47c0      	blx	r8
 8007dc4:	4307      	orrs	r7, r0
 8007dc6:	3568      	adds	r5, #104	; 0x68
 8007dc8:	e7e9      	b.n	8007d9e <_fwalk_reent+0x12>

08007dca <__retarget_lock_init_recursive>:
 8007dca:	4770      	bx	lr

08007dcc <__retarget_lock_acquire_recursive>:
 8007dcc:	4770      	bx	lr

08007dce <__retarget_lock_release_recursive>:
 8007dce:	4770      	bx	lr

08007dd0 <__swhatbuf_r>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	460e      	mov	r6, r1
 8007dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd8:	2900      	cmp	r1, #0
 8007dda:	b096      	sub	sp, #88	; 0x58
 8007ddc:	4614      	mov	r4, r2
 8007dde:	461d      	mov	r5, r3
 8007de0:	da07      	bge.n	8007df2 <__swhatbuf_r+0x22>
 8007de2:	2300      	movs	r3, #0
 8007de4:	602b      	str	r3, [r5, #0]
 8007de6:	89b3      	ldrh	r3, [r6, #12]
 8007de8:	061a      	lsls	r2, r3, #24
 8007dea:	d410      	bmi.n	8007e0e <__swhatbuf_r+0x3e>
 8007dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df0:	e00e      	b.n	8007e10 <__swhatbuf_r+0x40>
 8007df2:	466a      	mov	r2, sp
 8007df4:	f000 fc60 	bl	80086b8 <_fstat_r>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	dbf2      	blt.n	8007de2 <__swhatbuf_r+0x12>
 8007dfc:	9a01      	ldr	r2, [sp, #4]
 8007dfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e06:	425a      	negs	r2, r3
 8007e08:	415a      	adcs	r2, r3
 8007e0a:	602a      	str	r2, [r5, #0]
 8007e0c:	e7ee      	b.n	8007dec <__swhatbuf_r+0x1c>
 8007e0e:	2340      	movs	r3, #64	; 0x40
 8007e10:	2000      	movs	r0, #0
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	b016      	add	sp, #88	; 0x58
 8007e16:	bd70      	pop	{r4, r5, r6, pc}

08007e18 <__smakebuf_r>:
 8007e18:	898b      	ldrh	r3, [r1, #12]
 8007e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e1c:	079d      	lsls	r5, r3, #30
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460c      	mov	r4, r1
 8007e22:	d507      	bpl.n	8007e34 <__smakebuf_r+0x1c>
 8007e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	6123      	str	r3, [r4, #16]
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	6163      	str	r3, [r4, #20]
 8007e30:	b002      	add	sp, #8
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	ab01      	add	r3, sp, #4
 8007e36:	466a      	mov	r2, sp
 8007e38:	f7ff ffca 	bl	8007dd0 <__swhatbuf_r>
 8007e3c:	9900      	ldr	r1, [sp, #0]
 8007e3e:	4605      	mov	r5, r0
 8007e40:	4630      	mov	r0, r6
 8007e42:	f000 f879 	bl	8007f38 <_malloc_r>
 8007e46:	b948      	cbnz	r0, 8007e5c <__smakebuf_r+0x44>
 8007e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4c:	059a      	lsls	r2, r3, #22
 8007e4e:	d4ef      	bmi.n	8007e30 <__smakebuf_r+0x18>
 8007e50:	f023 0303 	bic.w	r3, r3, #3
 8007e54:	f043 0302 	orr.w	r3, r3, #2
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	e7e3      	b.n	8007e24 <__smakebuf_r+0xc>
 8007e5c:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <__smakebuf_r+0x7c>)
 8007e5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	6020      	str	r0, [r4, #0]
 8007e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	9b00      	ldr	r3, [sp, #0]
 8007e6c:	6163      	str	r3, [r4, #20]
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	6120      	str	r0, [r4, #16]
 8007e72:	b15b      	cbz	r3, 8007e8c <__smakebuf_r+0x74>
 8007e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f000 fc2f 	bl	80086dc <_isatty_r>
 8007e7e:	b128      	cbz	r0, 8007e8c <__smakebuf_r+0x74>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	89a0      	ldrh	r0, [r4, #12]
 8007e8e:	4305      	orrs	r5, r0
 8007e90:	81a5      	strh	r5, [r4, #12]
 8007e92:	e7cd      	b.n	8007e30 <__smakebuf_r+0x18>
 8007e94:	08007c29 	.word	0x08007c29

08007e98 <_free_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d048      	beq.n	8007f30 <_free_r+0x98>
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eaa:	bfb8      	it	lt
 8007eac:	18e4      	addlt	r4, r4, r3
 8007eae:	f000 fc5f 	bl	8008770 <__malloc_lock>
 8007eb2:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <_free_r+0x9c>)
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	4615      	mov	r5, r2
 8007eba:	b933      	cbnz	r3, 8007eca <_free_r+0x32>
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6014      	str	r4, [r2, #0]
 8007ec0:	b003      	add	sp, #12
 8007ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec6:	f000 bc59 	b.w	800877c <__malloc_unlock>
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	d90b      	bls.n	8007ee6 <_free_r+0x4e>
 8007ece:	6821      	ldr	r1, [r4, #0]
 8007ed0:	1862      	adds	r2, r4, r1
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf04      	itt	eq
 8007ed6:	681a      	ldreq	r2, [r3, #0]
 8007ed8:	685b      	ldreq	r3, [r3, #4]
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	bf04      	itt	eq
 8007ede:	1852      	addeq	r2, r2, r1
 8007ee0:	6022      	streq	r2, [r4, #0]
 8007ee2:	602c      	str	r4, [r5, #0]
 8007ee4:	e7ec      	b.n	8007ec0 <_free_r+0x28>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b10b      	cbz	r3, 8007ef0 <_free_r+0x58>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x4e>
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	1855      	adds	r5, r2, r1
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x78>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	4421      	add	r1, r4
 8007efc:	1854      	adds	r4, r2, r1
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	d1dd      	bne.n	8007ec0 <_free_r+0x28>
 8007f04:	681c      	ldr	r4, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	4421      	add	r1, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	e7d7      	b.n	8007ec0 <_free_r+0x28>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x80>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	e7d3      	b.n	8007ec0 <_free_r+0x28>
 8007f18:	6825      	ldr	r5, [r4, #0]
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1949      	addeq	r1, r1, r5
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	6054      	str	r4, [r2, #4]
 8007f2e:	e7c7      	b.n	8007ec0 <_free_r+0x28>
 8007f30:	b003      	add	sp, #12
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	200000d4 	.word	0x200000d4

08007f38 <_malloc_r>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	1ccd      	adds	r5, r1, #3
 8007f3c:	f025 0503 	bic.w	r5, r5, #3
 8007f40:	3508      	adds	r5, #8
 8007f42:	2d0c      	cmp	r5, #12
 8007f44:	bf38      	it	cc
 8007f46:	250c      	movcc	r5, #12
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	db01      	blt.n	8007f52 <_malloc_r+0x1a>
 8007f4e:	42a9      	cmp	r1, r5
 8007f50:	d903      	bls.n	8007f5a <_malloc_r+0x22>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	2000      	movs	r0, #0
 8007f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5a:	f000 fc09 	bl	8008770 <__malloc_lock>
 8007f5e:	4921      	ldr	r1, [pc, #132]	; (8007fe4 <_malloc_r+0xac>)
 8007f60:	680a      	ldr	r2, [r1, #0]
 8007f62:	4614      	mov	r4, r2
 8007f64:	b99c      	cbnz	r4, 8007f8e <_malloc_r+0x56>
 8007f66:	4f20      	ldr	r7, [pc, #128]	; (8007fe8 <_malloc_r+0xb0>)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	b923      	cbnz	r3, 8007f76 <_malloc_r+0x3e>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 fb2c 	bl	80085cc <_sbrk_r>
 8007f74:	6038      	str	r0, [r7, #0]
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 fb27 	bl	80085cc <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d123      	bne.n	8007fca <_malloc_r+0x92>
 8007f82:	230c      	movs	r3, #12
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	4630      	mov	r0, r6
 8007f88:	f000 fbf8 	bl	800877c <__malloc_unlock>
 8007f8c:	e7e3      	b.n	8007f56 <_malloc_r+0x1e>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	1b5b      	subs	r3, r3, r5
 8007f92:	d417      	bmi.n	8007fc4 <_malloc_r+0x8c>
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d903      	bls.n	8007fa0 <_malloc_r+0x68>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	441c      	add	r4, r3
 8007f9c:	6025      	str	r5, [r4, #0]
 8007f9e:	e004      	b.n	8007faa <_malloc_r+0x72>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	42a2      	cmp	r2, r4
 8007fa4:	bf0c      	ite	eq
 8007fa6:	600b      	streq	r3, [r1, #0]
 8007fa8:	6053      	strne	r3, [r2, #4]
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 fbe6 	bl	800877c <__malloc_unlock>
 8007fb0:	f104 000b 	add.w	r0, r4, #11
 8007fb4:	1d23      	adds	r3, r4, #4
 8007fb6:	f020 0007 	bic.w	r0, r0, #7
 8007fba:	1ac2      	subs	r2, r0, r3
 8007fbc:	d0cc      	beq.n	8007f58 <_malloc_r+0x20>
 8007fbe:	1a1b      	subs	r3, r3, r0
 8007fc0:	50a3      	str	r3, [r4, r2]
 8007fc2:	e7c9      	b.n	8007f58 <_malloc_r+0x20>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	6864      	ldr	r4, [r4, #4]
 8007fc8:	e7cc      	b.n	8007f64 <_malloc_r+0x2c>
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d0e3      	beq.n	8007f9c <_malloc_r+0x64>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 faf8 	bl	80085cc <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1dd      	bne.n	8007f9c <_malloc_r+0x64>
 8007fe0:	e7cf      	b.n	8007f82 <_malloc_r+0x4a>
 8007fe2:	bf00      	nop
 8007fe4:	200000d4 	.word	0x200000d4
 8007fe8:	200000d8 	.word	0x200000d8

08007fec <__ssputs_r>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	688e      	ldr	r6, [r1, #8]
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	4690      	mov	r8, r2
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	d838      	bhi.n	8008070 <__ssputs_r+0x84>
 8007ffe:	898a      	ldrh	r2, [r1, #12]
 8008000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008004:	d032      	beq.n	800806c <__ssputs_r+0x80>
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	6909      	ldr	r1, [r1, #16]
 800800a:	eba5 0901 	sub.w	r9, r5, r1
 800800e:	6965      	ldr	r5, [r4, #20]
 8008010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008018:	3301      	adds	r3, #1
 800801a:	444b      	add	r3, r9
 800801c:	106d      	asrs	r5, r5, #1
 800801e:	429d      	cmp	r5, r3
 8008020:	bf38      	it	cc
 8008022:	461d      	movcc	r5, r3
 8008024:	0553      	lsls	r3, r2, #21
 8008026:	d531      	bpl.n	800808c <__ssputs_r+0xa0>
 8008028:	4629      	mov	r1, r5
 800802a:	f7ff ff85 	bl	8007f38 <_malloc_r>
 800802e:	4606      	mov	r6, r0
 8008030:	b950      	cbnz	r0, 8008048 <__ssputs_r+0x5c>
 8008032:	230c      	movs	r3, #12
 8008034:	f8ca 3000 	str.w	r3, [sl]
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008048:	6921      	ldr	r1, [r4, #16]
 800804a:	464a      	mov	r2, r9
 800804c:	f000 fb68 	bl	8008720 <memcpy>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	6126      	str	r6, [r4, #16]
 800805e:	6165      	str	r5, [r4, #20]
 8008060:	444e      	add	r6, r9
 8008062:	eba5 0509 	sub.w	r5, r5, r9
 8008066:	6026      	str	r6, [r4, #0]
 8008068:	60a5      	str	r5, [r4, #8]
 800806a:	463e      	mov	r6, r7
 800806c:	42be      	cmp	r6, r7
 800806e:	d900      	bls.n	8008072 <__ssputs_r+0x86>
 8008070:	463e      	mov	r6, r7
 8008072:	4632      	mov	r2, r6
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	4641      	mov	r1, r8
 8008078:	f000 fb60 	bl	800873c <memmove>
 800807c:	68a3      	ldr	r3, [r4, #8]
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	1b9b      	subs	r3, r3, r6
 8008082:	4432      	add	r2, r6
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	2000      	movs	r0, #0
 800808a:	e7db      	b.n	8008044 <__ssputs_r+0x58>
 800808c:	462a      	mov	r2, r5
 800808e:	f000 fb7b 	bl	8008788 <_realloc_r>
 8008092:	4606      	mov	r6, r0
 8008094:	2800      	cmp	r0, #0
 8008096:	d1e1      	bne.n	800805c <__ssputs_r+0x70>
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	4650      	mov	r0, sl
 800809c:	f7ff fefc 	bl	8007e98 <_free_r>
 80080a0:	e7c7      	b.n	8008032 <__ssputs_r+0x46>
	...

080080a4 <_svfiprintf_r>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	4698      	mov	r8, r3
 80080aa:	898b      	ldrh	r3, [r1, #12]
 80080ac:	061b      	lsls	r3, r3, #24
 80080ae:	b09d      	sub	sp, #116	; 0x74
 80080b0:	4607      	mov	r7, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	d50e      	bpl.n	80080d6 <_svfiprintf_r+0x32>
 80080b8:	690b      	ldr	r3, [r1, #16]
 80080ba:	b963      	cbnz	r3, 80080d6 <_svfiprintf_r+0x32>
 80080bc:	2140      	movs	r1, #64	; 0x40
 80080be:	f7ff ff3b 	bl	8007f38 <_malloc_r>
 80080c2:	6028      	str	r0, [r5, #0]
 80080c4:	6128      	str	r0, [r5, #16]
 80080c6:	b920      	cbnz	r0, 80080d2 <_svfiprintf_r+0x2e>
 80080c8:	230c      	movs	r3, #12
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	e0d1      	b.n	8008276 <_svfiprintf_r+0x1d2>
 80080d2:	2340      	movs	r3, #64	; 0x40
 80080d4:	616b      	str	r3, [r5, #20]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9309      	str	r3, [sp, #36]	; 0x24
 80080da:	2320      	movs	r3, #32
 80080dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e4:	2330      	movs	r3, #48	; 0x30
 80080e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008290 <_svfiprintf_r+0x1ec>
 80080ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ee:	f04f 0901 	mov.w	r9, #1
 80080f2:	4623      	mov	r3, r4
 80080f4:	469a      	mov	sl, r3
 80080f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080fa:	b10a      	cbz	r2, 8008100 <_svfiprintf_r+0x5c>
 80080fc:	2a25      	cmp	r2, #37	; 0x25
 80080fe:	d1f9      	bne.n	80080f4 <_svfiprintf_r+0x50>
 8008100:	ebba 0b04 	subs.w	fp, sl, r4
 8008104:	d00b      	beq.n	800811e <_svfiprintf_r+0x7a>
 8008106:	465b      	mov	r3, fp
 8008108:	4622      	mov	r2, r4
 800810a:	4629      	mov	r1, r5
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff ff6d 	bl	8007fec <__ssputs_r>
 8008112:	3001      	adds	r0, #1
 8008114:	f000 80aa 	beq.w	800826c <_svfiprintf_r+0x1c8>
 8008118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811a:	445a      	add	r2, fp
 800811c:	9209      	str	r2, [sp, #36]	; 0x24
 800811e:	f89a 3000 	ldrb.w	r3, [sl]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80a2 	beq.w	800826c <_svfiprintf_r+0x1c8>
 8008128:	2300      	movs	r3, #0
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008132:	f10a 0a01 	add.w	sl, sl, #1
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	9307      	str	r3, [sp, #28]
 800813a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800813e:	931a      	str	r3, [sp, #104]	; 0x68
 8008140:	4654      	mov	r4, sl
 8008142:	2205      	movs	r2, #5
 8008144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008148:	4851      	ldr	r0, [pc, #324]	; (8008290 <_svfiprintf_r+0x1ec>)
 800814a:	f7f8 f841 	bl	80001d0 <memchr>
 800814e:	9a04      	ldr	r2, [sp, #16]
 8008150:	b9d8      	cbnz	r0, 800818a <_svfiprintf_r+0xe6>
 8008152:	06d0      	lsls	r0, r2, #27
 8008154:	bf44      	itt	mi
 8008156:	2320      	movmi	r3, #32
 8008158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800815c:	0711      	lsls	r1, r2, #28
 800815e:	bf44      	itt	mi
 8008160:	232b      	movmi	r3, #43	; 0x2b
 8008162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008166:	f89a 3000 	ldrb.w	r3, [sl]
 800816a:	2b2a      	cmp	r3, #42	; 0x2a
 800816c:	d015      	beq.n	800819a <_svfiprintf_r+0xf6>
 800816e:	9a07      	ldr	r2, [sp, #28]
 8008170:	4654      	mov	r4, sl
 8008172:	2000      	movs	r0, #0
 8008174:	f04f 0c0a 	mov.w	ip, #10
 8008178:	4621      	mov	r1, r4
 800817a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817e:	3b30      	subs	r3, #48	; 0x30
 8008180:	2b09      	cmp	r3, #9
 8008182:	d94e      	bls.n	8008222 <_svfiprintf_r+0x17e>
 8008184:	b1b0      	cbz	r0, 80081b4 <_svfiprintf_r+0x110>
 8008186:	9207      	str	r2, [sp, #28]
 8008188:	e014      	b.n	80081b4 <_svfiprintf_r+0x110>
 800818a:	eba0 0308 	sub.w	r3, r0, r8
 800818e:	fa09 f303 	lsl.w	r3, r9, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	46a2      	mov	sl, r4
 8008198:	e7d2      	b.n	8008140 <_svfiprintf_r+0x9c>
 800819a:	9b03      	ldr	r3, [sp, #12]
 800819c:	1d19      	adds	r1, r3, #4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	9103      	str	r1, [sp, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bfbb      	ittet	lt
 80081a6:	425b      	neglt	r3, r3
 80081a8:	f042 0202 	orrlt.w	r2, r2, #2
 80081ac:	9307      	strge	r3, [sp, #28]
 80081ae:	9307      	strlt	r3, [sp, #28]
 80081b0:	bfb8      	it	lt
 80081b2:	9204      	strlt	r2, [sp, #16]
 80081b4:	7823      	ldrb	r3, [r4, #0]
 80081b6:	2b2e      	cmp	r3, #46	; 0x2e
 80081b8:	d10c      	bne.n	80081d4 <_svfiprintf_r+0x130>
 80081ba:	7863      	ldrb	r3, [r4, #1]
 80081bc:	2b2a      	cmp	r3, #42	; 0x2a
 80081be:	d135      	bne.n	800822c <_svfiprintf_r+0x188>
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	1d1a      	adds	r2, r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	9203      	str	r2, [sp, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bfb8      	it	lt
 80081cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80081d0:	3402      	adds	r4, #2
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082a0 <_svfiprintf_r+0x1fc>
 80081d8:	7821      	ldrb	r1, [r4, #0]
 80081da:	2203      	movs	r2, #3
 80081dc:	4650      	mov	r0, sl
 80081de:	f7f7 fff7 	bl	80001d0 <memchr>
 80081e2:	b140      	cbz	r0, 80081f6 <_svfiprintf_r+0x152>
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	eba0 000a 	sub.w	r0, r0, sl
 80081ea:	fa03 f000 	lsl.w	r0, r3, r0
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	4303      	orrs	r3, r0
 80081f2:	3401      	adds	r4, #1
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	4826      	ldr	r0, [pc, #152]	; (8008294 <_svfiprintf_r+0x1f0>)
 80081fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008200:	2206      	movs	r2, #6
 8008202:	f7f7 ffe5 	bl	80001d0 <memchr>
 8008206:	2800      	cmp	r0, #0
 8008208:	d038      	beq.n	800827c <_svfiprintf_r+0x1d8>
 800820a:	4b23      	ldr	r3, [pc, #140]	; (8008298 <_svfiprintf_r+0x1f4>)
 800820c:	bb1b      	cbnz	r3, 8008256 <_svfiprintf_r+0x1b2>
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	3307      	adds	r3, #7
 8008212:	f023 0307 	bic.w	r3, r3, #7
 8008216:	3308      	adds	r3, #8
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821c:	4433      	add	r3, r6
 800821e:	9309      	str	r3, [sp, #36]	; 0x24
 8008220:	e767      	b.n	80080f2 <_svfiprintf_r+0x4e>
 8008222:	fb0c 3202 	mla	r2, ip, r2, r3
 8008226:	460c      	mov	r4, r1
 8008228:	2001      	movs	r0, #1
 800822a:	e7a5      	b.n	8008178 <_svfiprintf_r+0xd4>
 800822c:	2300      	movs	r3, #0
 800822e:	3401      	adds	r4, #1
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	4619      	mov	r1, r3
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	4620      	mov	r0, r4
 800823a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800823e:	3a30      	subs	r2, #48	; 0x30
 8008240:	2a09      	cmp	r2, #9
 8008242:	d903      	bls.n	800824c <_svfiprintf_r+0x1a8>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0c5      	beq.n	80081d4 <_svfiprintf_r+0x130>
 8008248:	9105      	str	r1, [sp, #20]
 800824a:	e7c3      	b.n	80081d4 <_svfiprintf_r+0x130>
 800824c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008250:	4604      	mov	r4, r0
 8008252:	2301      	movs	r3, #1
 8008254:	e7f0      	b.n	8008238 <_svfiprintf_r+0x194>
 8008256:	ab03      	add	r3, sp, #12
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	462a      	mov	r2, r5
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <_svfiprintf_r+0x1f8>)
 800825e:	a904      	add	r1, sp, #16
 8008260:	4638      	mov	r0, r7
 8008262:	f3af 8000 	nop.w
 8008266:	1c42      	adds	r2, r0, #1
 8008268:	4606      	mov	r6, r0
 800826a:	d1d6      	bne.n	800821a <_svfiprintf_r+0x176>
 800826c:	89ab      	ldrh	r3, [r5, #12]
 800826e:	065b      	lsls	r3, r3, #25
 8008270:	f53f af2c 	bmi.w	80080cc <_svfiprintf_r+0x28>
 8008274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008276:	b01d      	add	sp, #116	; 0x74
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	ab03      	add	r3, sp, #12
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	462a      	mov	r2, r5
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <_svfiprintf_r+0x1f8>)
 8008284:	a904      	add	r1, sp, #16
 8008286:	4638      	mov	r0, r7
 8008288:	f000 f87a 	bl	8008380 <_printf_i>
 800828c:	e7eb      	b.n	8008266 <_svfiprintf_r+0x1c2>
 800828e:	bf00      	nop
 8008290:	0800b940 	.word	0x0800b940
 8008294:	0800b94a 	.word	0x0800b94a
 8008298:	00000000 	.word	0x00000000
 800829c:	08007fed 	.word	0x08007fed
 80082a0:	0800b946 	.word	0x0800b946

080082a4 <_printf_common>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	4616      	mov	r6, r2
 80082aa:	4699      	mov	r9, r3
 80082ac:	688a      	ldr	r2, [r1, #8]
 80082ae:	690b      	ldr	r3, [r1, #16]
 80082b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082b4:	4293      	cmp	r3, r2
 80082b6:	bfb8      	it	lt
 80082b8:	4613      	movlt	r3, r2
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c0:	4607      	mov	r7, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b10a      	cbz	r2, 80082ca <_printf_common+0x26>
 80082c6:	3301      	adds	r3, #1
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	0699      	lsls	r1, r3, #26
 80082ce:	bf42      	ittt	mi
 80082d0:	6833      	ldrmi	r3, [r6, #0]
 80082d2:	3302      	addmi	r3, #2
 80082d4:	6033      	strmi	r3, [r6, #0]
 80082d6:	6825      	ldr	r5, [r4, #0]
 80082d8:	f015 0506 	ands.w	r5, r5, #6
 80082dc:	d106      	bne.n	80082ec <_printf_common+0x48>
 80082de:	f104 0a19 	add.w	sl, r4, #25
 80082e2:	68e3      	ldr	r3, [r4, #12]
 80082e4:	6832      	ldr	r2, [r6, #0]
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dc26      	bgt.n	800833a <_printf_common+0x96>
 80082ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082f0:	1e13      	subs	r3, r2, #0
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	bf18      	it	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	0692      	lsls	r2, r2, #26
 80082fa:	d42b      	bmi.n	8008354 <_printf_common+0xb0>
 80082fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008300:	4649      	mov	r1, r9
 8008302:	4638      	mov	r0, r7
 8008304:	47c0      	blx	r8
 8008306:	3001      	adds	r0, #1
 8008308:	d01e      	beq.n	8008348 <_printf_common+0xa4>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	68e5      	ldr	r5, [r4, #12]
 800830e:	6832      	ldr	r2, [r6, #0]
 8008310:	f003 0306 	and.w	r3, r3, #6
 8008314:	2b04      	cmp	r3, #4
 8008316:	bf08      	it	eq
 8008318:	1aad      	subeq	r5, r5, r2
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	bf0c      	ite	eq
 8008320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008324:	2500      	movne	r5, #0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfc4      	itt	gt
 800832a:	1a9b      	subgt	r3, r3, r2
 800832c:	18ed      	addgt	r5, r5, r3
 800832e:	2600      	movs	r6, #0
 8008330:	341a      	adds	r4, #26
 8008332:	42b5      	cmp	r5, r6
 8008334:	d11a      	bne.n	800836c <_printf_common+0xc8>
 8008336:	2000      	movs	r0, #0
 8008338:	e008      	b.n	800834c <_printf_common+0xa8>
 800833a:	2301      	movs	r3, #1
 800833c:	4652      	mov	r2, sl
 800833e:	4649      	mov	r1, r9
 8008340:	4638      	mov	r0, r7
 8008342:	47c0      	blx	r8
 8008344:	3001      	adds	r0, #1
 8008346:	d103      	bne.n	8008350 <_printf_common+0xac>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	3501      	adds	r5, #1
 8008352:	e7c6      	b.n	80082e2 <_printf_common+0x3e>
 8008354:	18e1      	adds	r1, r4, r3
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	2030      	movs	r0, #48	; 0x30
 800835a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800835e:	4422      	add	r2, r4
 8008360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008368:	3302      	adds	r3, #2
 800836a:	e7c7      	b.n	80082fc <_printf_common+0x58>
 800836c:	2301      	movs	r3, #1
 800836e:	4622      	mov	r2, r4
 8008370:	4649      	mov	r1, r9
 8008372:	4638      	mov	r0, r7
 8008374:	47c0      	blx	r8
 8008376:	3001      	adds	r0, #1
 8008378:	d0e6      	beq.n	8008348 <_printf_common+0xa4>
 800837a:	3601      	adds	r6, #1
 800837c:	e7d9      	b.n	8008332 <_printf_common+0x8e>
	...

08008380 <_printf_i>:
 8008380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	460c      	mov	r4, r1
 8008386:	4691      	mov	r9, r2
 8008388:	7e27      	ldrb	r7, [r4, #24]
 800838a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800838c:	2f78      	cmp	r7, #120	; 0x78
 800838e:	4680      	mov	r8, r0
 8008390:	469a      	mov	sl, r3
 8008392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008396:	d807      	bhi.n	80083a8 <_printf_i+0x28>
 8008398:	2f62      	cmp	r7, #98	; 0x62
 800839a:	d80a      	bhi.n	80083b2 <_printf_i+0x32>
 800839c:	2f00      	cmp	r7, #0
 800839e:	f000 80d8 	beq.w	8008552 <_printf_i+0x1d2>
 80083a2:	2f58      	cmp	r7, #88	; 0x58
 80083a4:	f000 80a3 	beq.w	80084ee <_printf_i+0x16e>
 80083a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083b0:	e03a      	b.n	8008428 <_printf_i+0xa8>
 80083b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083b6:	2b15      	cmp	r3, #21
 80083b8:	d8f6      	bhi.n	80083a8 <_printf_i+0x28>
 80083ba:	a001      	add	r0, pc, #4	; (adr r0, 80083c0 <_printf_i+0x40>)
 80083bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083c0:	08008419 	.word	0x08008419
 80083c4:	0800842d 	.word	0x0800842d
 80083c8:	080083a9 	.word	0x080083a9
 80083cc:	080083a9 	.word	0x080083a9
 80083d0:	080083a9 	.word	0x080083a9
 80083d4:	080083a9 	.word	0x080083a9
 80083d8:	0800842d 	.word	0x0800842d
 80083dc:	080083a9 	.word	0x080083a9
 80083e0:	080083a9 	.word	0x080083a9
 80083e4:	080083a9 	.word	0x080083a9
 80083e8:	080083a9 	.word	0x080083a9
 80083ec:	08008539 	.word	0x08008539
 80083f0:	0800845d 	.word	0x0800845d
 80083f4:	0800851b 	.word	0x0800851b
 80083f8:	080083a9 	.word	0x080083a9
 80083fc:	080083a9 	.word	0x080083a9
 8008400:	0800855b 	.word	0x0800855b
 8008404:	080083a9 	.word	0x080083a9
 8008408:	0800845d 	.word	0x0800845d
 800840c:	080083a9 	.word	0x080083a9
 8008410:	080083a9 	.word	0x080083a9
 8008414:	08008523 	.word	0x08008523
 8008418:	680b      	ldr	r3, [r1, #0]
 800841a:	1d1a      	adds	r2, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	600a      	str	r2, [r1, #0]
 8008420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008428:	2301      	movs	r3, #1
 800842a:	e0a3      	b.n	8008574 <_printf_i+0x1f4>
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	6808      	ldr	r0, [r1, #0]
 8008430:	062e      	lsls	r6, r5, #24
 8008432:	f100 0304 	add.w	r3, r0, #4
 8008436:	d50a      	bpl.n	800844e <_printf_i+0xce>
 8008438:	6805      	ldr	r5, [r0, #0]
 800843a:	600b      	str	r3, [r1, #0]
 800843c:	2d00      	cmp	r5, #0
 800843e:	da03      	bge.n	8008448 <_printf_i+0xc8>
 8008440:	232d      	movs	r3, #45	; 0x2d
 8008442:	426d      	negs	r5, r5
 8008444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008448:	485e      	ldr	r0, [pc, #376]	; (80085c4 <_printf_i+0x244>)
 800844a:	230a      	movs	r3, #10
 800844c:	e019      	b.n	8008482 <_printf_i+0x102>
 800844e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008452:	6805      	ldr	r5, [r0, #0]
 8008454:	600b      	str	r3, [r1, #0]
 8008456:	bf18      	it	ne
 8008458:	b22d      	sxthne	r5, r5
 800845a:	e7ef      	b.n	800843c <_printf_i+0xbc>
 800845c:	680b      	ldr	r3, [r1, #0]
 800845e:	6825      	ldr	r5, [r4, #0]
 8008460:	1d18      	adds	r0, r3, #4
 8008462:	6008      	str	r0, [r1, #0]
 8008464:	0628      	lsls	r0, r5, #24
 8008466:	d501      	bpl.n	800846c <_printf_i+0xec>
 8008468:	681d      	ldr	r5, [r3, #0]
 800846a:	e002      	b.n	8008472 <_printf_i+0xf2>
 800846c:	0669      	lsls	r1, r5, #25
 800846e:	d5fb      	bpl.n	8008468 <_printf_i+0xe8>
 8008470:	881d      	ldrh	r5, [r3, #0]
 8008472:	4854      	ldr	r0, [pc, #336]	; (80085c4 <_printf_i+0x244>)
 8008474:	2f6f      	cmp	r7, #111	; 0x6f
 8008476:	bf0c      	ite	eq
 8008478:	2308      	moveq	r3, #8
 800847a:	230a      	movne	r3, #10
 800847c:	2100      	movs	r1, #0
 800847e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008482:	6866      	ldr	r6, [r4, #4]
 8008484:	60a6      	str	r6, [r4, #8]
 8008486:	2e00      	cmp	r6, #0
 8008488:	bfa2      	ittt	ge
 800848a:	6821      	ldrge	r1, [r4, #0]
 800848c:	f021 0104 	bicge.w	r1, r1, #4
 8008490:	6021      	strge	r1, [r4, #0]
 8008492:	b90d      	cbnz	r5, 8008498 <_printf_i+0x118>
 8008494:	2e00      	cmp	r6, #0
 8008496:	d04d      	beq.n	8008534 <_printf_i+0x1b4>
 8008498:	4616      	mov	r6, r2
 800849a:	fbb5 f1f3 	udiv	r1, r5, r3
 800849e:	fb03 5711 	mls	r7, r3, r1, r5
 80084a2:	5dc7      	ldrb	r7, [r0, r7]
 80084a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084a8:	462f      	mov	r7, r5
 80084aa:	42bb      	cmp	r3, r7
 80084ac:	460d      	mov	r5, r1
 80084ae:	d9f4      	bls.n	800849a <_printf_i+0x11a>
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d10b      	bne.n	80084cc <_printf_i+0x14c>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	07df      	lsls	r7, r3, #31
 80084b8:	d508      	bpl.n	80084cc <_printf_i+0x14c>
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	4299      	cmp	r1, r3
 80084c0:	bfde      	ittt	le
 80084c2:	2330      	movle	r3, #48	; 0x30
 80084c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084cc:	1b92      	subs	r2, r2, r6
 80084ce:	6122      	str	r2, [r4, #16]
 80084d0:	f8cd a000 	str.w	sl, [sp]
 80084d4:	464b      	mov	r3, r9
 80084d6:	aa03      	add	r2, sp, #12
 80084d8:	4621      	mov	r1, r4
 80084da:	4640      	mov	r0, r8
 80084dc:	f7ff fee2 	bl	80082a4 <_printf_common>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d14c      	bne.n	800857e <_printf_i+0x1fe>
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	b004      	add	sp, #16
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	4835      	ldr	r0, [pc, #212]	; (80085c4 <_printf_i+0x244>)
 80084f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	680e      	ldr	r6, [r1, #0]
 80084f8:	061f      	lsls	r7, r3, #24
 80084fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80084fe:	600e      	str	r6, [r1, #0]
 8008500:	d514      	bpl.n	800852c <_printf_i+0x1ac>
 8008502:	07d9      	lsls	r1, r3, #31
 8008504:	bf44      	itt	mi
 8008506:	f043 0320 	orrmi.w	r3, r3, #32
 800850a:	6023      	strmi	r3, [r4, #0]
 800850c:	b91d      	cbnz	r5, 8008516 <_printf_i+0x196>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	f023 0320 	bic.w	r3, r3, #32
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	2310      	movs	r3, #16
 8008518:	e7b0      	b.n	800847c <_printf_i+0xfc>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f043 0320 	orr.w	r3, r3, #32
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	2378      	movs	r3, #120	; 0x78
 8008524:	4828      	ldr	r0, [pc, #160]	; (80085c8 <_printf_i+0x248>)
 8008526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800852a:	e7e3      	b.n	80084f4 <_printf_i+0x174>
 800852c:	065e      	lsls	r6, r3, #25
 800852e:	bf48      	it	mi
 8008530:	b2ad      	uxthmi	r5, r5
 8008532:	e7e6      	b.n	8008502 <_printf_i+0x182>
 8008534:	4616      	mov	r6, r2
 8008536:	e7bb      	b.n	80084b0 <_printf_i+0x130>
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	6826      	ldr	r6, [r4, #0]
 800853c:	6960      	ldr	r0, [r4, #20]
 800853e:	1d1d      	adds	r5, r3, #4
 8008540:	600d      	str	r5, [r1, #0]
 8008542:	0635      	lsls	r5, r6, #24
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	d501      	bpl.n	800854c <_printf_i+0x1cc>
 8008548:	6018      	str	r0, [r3, #0]
 800854a:	e002      	b.n	8008552 <_printf_i+0x1d2>
 800854c:	0671      	lsls	r1, r6, #25
 800854e:	d5fb      	bpl.n	8008548 <_printf_i+0x1c8>
 8008550:	8018      	strh	r0, [r3, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	4616      	mov	r6, r2
 8008558:	e7ba      	b.n	80084d0 <_printf_i+0x150>
 800855a:	680b      	ldr	r3, [r1, #0]
 800855c:	1d1a      	adds	r2, r3, #4
 800855e:	600a      	str	r2, [r1, #0]
 8008560:	681e      	ldr	r6, [r3, #0]
 8008562:	6862      	ldr	r2, [r4, #4]
 8008564:	2100      	movs	r1, #0
 8008566:	4630      	mov	r0, r6
 8008568:	f7f7 fe32 	bl	80001d0 <memchr>
 800856c:	b108      	cbz	r0, 8008572 <_printf_i+0x1f2>
 800856e:	1b80      	subs	r0, r0, r6
 8008570:	6060      	str	r0, [r4, #4]
 8008572:	6863      	ldr	r3, [r4, #4]
 8008574:	6123      	str	r3, [r4, #16]
 8008576:	2300      	movs	r3, #0
 8008578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800857c:	e7a8      	b.n	80084d0 <_printf_i+0x150>
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	4632      	mov	r2, r6
 8008582:	4649      	mov	r1, r9
 8008584:	4640      	mov	r0, r8
 8008586:	47d0      	blx	sl
 8008588:	3001      	adds	r0, #1
 800858a:	d0ab      	beq.n	80084e4 <_printf_i+0x164>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	079b      	lsls	r3, r3, #30
 8008590:	d413      	bmi.n	80085ba <_printf_i+0x23a>
 8008592:	68e0      	ldr	r0, [r4, #12]
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	4298      	cmp	r0, r3
 8008598:	bfb8      	it	lt
 800859a:	4618      	movlt	r0, r3
 800859c:	e7a4      	b.n	80084e8 <_printf_i+0x168>
 800859e:	2301      	movs	r3, #1
 80085a0:	4632      	mov	r2, r6
 80085a2:	4649      	mov	r1, r9
 80085a4:	4640      	mov	r0, r8
 80085a6:	47d0      	blx	sl
 80085a8:	3001      	adds	r0, #1
 80085aa:	d09b      	beq.n	80084e4 <_printf_i+0x164>
 80085ac:	3501      	adds	r5, #1
 80085ae:	68e3      	ldr	r3, [r4, #12]
 80085b0:	9903      	ldr	r1, [sp, #12]
 80085b2:	1a5b      	subs	r3, r3, r1
 80085b4:	42ab      	cmp	r3, r5
 80085b6:	dcf2      	bgt.n	800859e <_printf_i+0x21e>
 80085b8:	e7eb      	b.n	8008592 <_printf_i+0x212>
 80085ba:	2500      	movs	r5, #0
 80085bc:	f104 0619 	add.w	r6, r4, #25
 80085c0:	e7f5      	b.n	80085ae <_printf_i+0x22e>
 80085c2:	bf00      	nop
 80085c4:	0800b951 	.word	0x0800b951
 80085c8:	0800b962 	.word	0x0800b962

080085cc <_sbrk_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4d06      	ldr	r5, [pc, #24]	; (80085e8 <_sbrk_r+0x1c>)
 80085d0:	2300      	movs	r3, #0
 80085d2:	4604      	mov	r4, r0
 80085d4:	4608      	mov	r0, r1
 80085d6:	602b      	str	r3, [r5, #0]
 80085d8:	f7fa fbb2 	bl	8002d40 <_sbrk>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d102      	bne.n	80085e6 <_sbrk_r+0x1a>
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	b103      	cbz	r3, 80085e6 <_sbrk_r+0x1a>
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	20000374 	.word	0x20000374

080085ec <__sread>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	460c      	mov	r4, r1
 80085f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f4:	f000 f8ee 	bl	80087d4 <_read_r>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	bfab      	itete	ge
 80085fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008600:	181b      	addge	r3, r3, r0
 8008602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008606:	bfac      	ite	ge
 8008608:	6563      	strge	r3, [r4, #84]	; 0x54
 800860a:	81a3      	strhlt	r3, [r4, #12]
 800860c:	bd10      	pop	{r4, pc}

0800860e <__swrite>:
 800860e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008612:	461f      	mov	r7, r3
 8008614:	898b      	ldrh	r3, [r1, #12]
 8008616:	05db      	lsls	r3, r3, #23
 8008618:	4605      	mov	r5, r0
 800861a:	460c      	mov	r4, r1
 800861c:	4616      	mov	r6, r2
 800861e:	d505      	bpl.n	800862c <__swrite+0x1e>
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	2302      	movs	r3, #2
 8008626:	2200      	movs	r2, #0
 8008628:	f000 f868 	bl	80086fc <_lseek_r>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	4632      	mov	r2, r6
 800863a:	463b      	mov	r3, r7
 800863c:	4628      	mov	r0, r5
 800863e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	f000 b817 	b.w	8008674 <_write_r>

08008646 <__sseek>:
 8008646:	b510      	push	{r4, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864e:	f000 f855 	bl	80086fc <_lseek_r>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	bf15      	itete	ne
 8008658:	6560      	strne	r0, [r4, #84]	; 0x54
 800865a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800865e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008662:	81a3      	strheq	r3, [r4, #12]
 8008664:	bf18      	it	ne
 8008666:	81a3      	strhne	r3, [r4, #12]
 8008668:	bd10      	pop	{r4, pc}

0800866a <__sclose>:
 800866a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866e:	f000 b813 	b.w	8008698 <_close_r>
	...

08008674 <_write_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d07      	ldr	r5, [pc, #28]	; (8008694 <_write_r+0x20>)
 8008678:	4604      	mov	r4, r0
 800867a:	4608      	mov	r0, r1
 800867c:	4611      	mov	r1, r2
 800867e:	2200      	movs	r2, #0
 8008680:	602a      	str	r2, [r5, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	f7fa fb0b 	bl	8002c9e <_write>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d102      	bne.n	8008692 <_write_r+0x1e>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	b103      	cbz	r3, 8008692 <_write_r+0x1e>
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	20000374 	.word	0x20000374

08008698 <_close_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d06      	ldr	r5, [pc, #24]	; (80086b4 <_close_r+0x1c>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	f7fa fb17 	bl	8002cd6 <_close>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_close_r+0x1a>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_close_r+0x1a>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	20000374 	.word	0x20000374

080086b8 <_fstat_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d07      	ldr	r5, [pc, #28]	; (80086d8 <_fstat_r+0x20>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	f7fa fb12 	bl	8002cee <_fstat>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d102      	bne.n	80086d4 <_fstat_r+0x1c>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b103      	cbz	r3, 80086d4 <_fstat_r+0x1c>
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	20000374 	.word	0x20000374

080086dc <_isatty_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d06      	ldr	r5, [pc, #24]	; (80086f8 <_isatty_r+0x1c>)
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7fa fb11 	bl	8002d0e <_isatty>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_isatty_r+0x1a>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_isatty_r+0x1a>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	20000374 	.word	0x20000374

080086fc <_lseek_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	; (800871c <_lseek_r+0x20>)
 8008700:	4604      	mov	r4, r0
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	2200      	movs	r2, #0
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f7fa fb0a 	bl	8002d24 <_lseek>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_lseek_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_lseek_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	20000374 	.word	0x20000374

08008720 <memcpy>:
 8008720:	440a      	add	r2, r1
 8008722:	4291      	cmp	r1, r2
 8008724:	f100 33ff 	add.w	r3, r0, #4294967295
 8008728:	d100      	bne.n	800872c <memcpy+0xc>
 800872a:	4770      	bx	lr
 800872c:	b510      	push	{r4, lr}
 800872e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008736:	4291      	cmp	r1, r2
 8008738:	d1f9      	bne.n	800872e <memcpy+0xe>
 800873a:	bd10      	pop	{r4, pc}

0800873c <memmove>:
 800873c:	4288      	cmp	r0, r1
 800873e:	b510      	push	{r4, lr}
 8008740:	eb01 0402 	add.w	r4, r1, r2
 8008744:	d902      	bls.n	800874c <memmove+0x10>
 8008746:	4284      	cmp	r4, r0
 8008748:	4623      	mov	r3, r4
 800874a:	d807      	bhi.n	800875c <memmove+0x20>
 800874c:	1e43      	subs	r3, r0, #1
 800874e:	42a1      	cmp	r1, r4
 8008750:	d008      	beq.n	8008764 <memmove+0x28>
 8008752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800875a:	e7f8      	b.n	800874e <memmove+0x12>
 800875c:	4402      	add	r2, r0
 800875e:	4601      	mov	r1, r0
 8008760:	428a      	cmp	r2, r1
 8008762:	d100      	bne.n	8008766 <memmove+0x2a>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800876a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800876e:	e7f7      	b.n	8008760 <memmove+0x24>

08008770 <__malloc_lock>:
 8008770:	4801      	ldr	r0, [pc, #4]	; (8008778 <__malloc_lock+0x8>)
 8008772:	f7ff bb2b 	b.w	8007dcc <__retarget_lock_acquire_recursive>
 8008776:	bf00      	nop
 8008778:	2000036c 	.word	0x2000036c

0800877c <__malloc_unlock>:
 800877c:	4801      	ldr	r0, [pc, #4]	; (8008784 <__malloc_unlock+0x8>)
 800877e:	f7ff bb26 	b.w	8007dce <__retarget_lock_release_recursive>
 8008782:	bf00      	nop
 8008784:	2000036c 	.word	0x2000036c

08008788 <_realloc_r>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	4607      	mov	r7, r0
 800878c:	4614      	mov	r4, r2
 800878e:	460e      	mov	r6, r1
 8008790:	b921      	cbnz	r1, 800879c <_realloc_r+0x14>
 8008792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008796:	4611      	mov	r1, r2
 8008798:	f7ff bbce 	b.w	8007f38 <_malloc_r>
 800879c:	b922      	cbnz	r2, 80087a8 <_realloc_r+0x20>
 800879e:	f7ff fb7b 	bl	8007e98 <_free_r>
 80087a2:	4625      	mov	r5, r4
 80087a4:	4628      	mov	r0, r5
 80087a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a8:	f000 f826 	bl	80087f8 <_malloc_usable_size_r>
 80087ac:	42a0      	cmp	r0, r4
 80087ae:	d20f      	bcs.n	80087d0 <_realloc_r+0x48>
 80087b0:	4621      	mov	r1, r4
 80087b2:	4638      	mov	r0, r7
 80087b4:	f7ff fbc0 	bl	8007f38 <_malloc_r>
 80087b8:	4605      	mov	r5, r0
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d0f2      	beq.n	80087a4 <_realloc_r+0x1c>
 80087be:	4631      	mov	r1, r6
 80087c0:	4622      	mov	r2, r4
 80087c2:	f7ff ffad 	bl	8008720 <memcpy>
 80087c6:	4631      	mov	r1, r6
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff fb65 	bl	8007e98 <_free_r>
 80087ce:	e7e9      	b.n	80087a4 <_realloc_r+0x1c>
 80087d0:	4635      	mov	r5, r6
 80087d2:	e7e7      	b.n	80087a4 <_realloc_r+0x1c>

080087d4 <_read_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_read_r+0x20>)
 80087d8:	4604      	mov	r4, r0
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	602a      	str	r2, [r5, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f7fa fa3e 	bl	8002c64 <_read>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_read_r+0x1e>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_read_r+0x1e>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20000374 	.word	0x20000374

080087f8 <_malloc_usable_size_r>:
 80087f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087fc:	1f18      	subs	r0, r3, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfbc      	itt	lt
 8008802:	580b      	ldrlt	r3, [r1, r0]
 8008804:	18c0      	addlt	r0, r0, r3
 8008806:	4770      	bx	lr

08008808 <_init>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	bf00      	nop
 800880c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880e:	bc08      	pop	{r3}
 8008810:	469e      	mov	lr, r3
 8008812:	4770      	bx	lr

08008814 <_fini>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	bf00      	nop
 8008818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881a:	bc08      	pop	{r3}
 800881c:	469e      	mov	lr, r3
 800881e:	4770      	bx	lr


Bai1_GPIO_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe8  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d64  08008d64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d6c  08008d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000204  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153f1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f39  00000000  00000000  0003542d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00038368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  00039540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233be  00000000  00000000  0003a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001676f  00000000  00000000  0005d976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d08c0  00000000  00000000  000740e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001449a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049a8  00000000  00000000  001449f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d64 	.word	0x08005d64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005d64 	.word	0x08005d64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	482f      	ldr	r0, [pc, #188]	; (8000588 <button_Scan+0xc8>)
 80004cc:	f002 fc9a 	bl	8002e04 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	482c      	ldr	r0, [pc, #176]	; (8000588 <button_Scan+0xc8>)
 80004d6:	f002 fc95 	bl	8002e04 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004da:	230a      	movs	r3, #10
 80004dc:	2202      	movs	r2, #2
 80004de:	492b      	ldr	r1, [pc, #172]	; (800058c <button_Scan+0xcc>)
 80004e0:	482b      	ldr	r0, [pc, #172]	; (8000590 <button_Scan+0xd0>)
 80004e2:	f004 fa9a 	bl	8004a1a <HAL_SPI_Receive>
	  int button_index = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80004ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e03f      	b.n	8000576 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db06      	blt.n	800050a <button_Scan+0x4a>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	dc03      	bgt.n	800050a <button_Scan+0x4a>
			  button_index = i + 4;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3304      	adds	r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	e018      	b.n	800053c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b03      	cmp	r3, #3
 800050e:	dd07      	ble.n	8000520 <button_Scan+0x60>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b07      	cmp	r3, #7
 8000514:	dc04      	bgt.n	8000520 <button_Scan+0x60>
			  button_index = 7 - i;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f1c3 0307 	rsb	r3, r3, #7
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	e00d      	b.n	800053c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b07      	cmp	r3, #7
 8000524:	dd06      	ble.n	8000534 <button_Scan+0x74>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0b      	cmp	r3, #11
 800052a:	dc03      	bgt.n	8000534 <button_Scan+0x74>
			  button_index = i + 4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3304      	adds	r3, #4
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	e003      	b.n	800053c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f1c3 0317 	rsb	r3, r3, #23
 800053a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <button_Scan+0xcc>)
 800053e:	881a      	ldrh	r2, [r3, #0]
 8000540:	897b      	ldrh	r3, [r7, #10]
 8000542:	4013      	ands	r3, r2
 8000544:	b29b      	uxth	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <button_Scan+0x96>
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <button_Scan+0xd4>)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2100      	movs	r1, #0
 8000550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000554:	e009      	b.n	800056a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <button_Scan+0xd4>)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	3301      	adds	r3, #1
 8000560:	b299      	uxth	r1, r3
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800056a:	897b      	ldrh	r3, [r7, #10]
 800056c:	085b      	lsrs	r3, r3, #1
 800056e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	ddbc      	ble.n	80004f6 <button_Scan+0x36>
	  }
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00
 800058c:	20000028 	.word	0x20000028
 8000590:	2000016c 	.word	0x2000016c
 8000594:	20000044 	.word	0x20000044

08000598 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 800059c:	201e      	movs	r0, #30
 800059e:	f002 f89f 	bl	80026e0 <DEC2BCD>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <ds3231_init+0x80>)
 80005a8:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005aa:	2016      	movs	r0, #22
 80005ac:	f002 f898 	bl	80026e0 <DEC2BCD>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <ds3231_init+0x80>)
 80005b6:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005b8:	2015      	movs	r0, #21
 80005ba:	f002 f891 	bl	80026e0 <DEC2BCD>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <ds3231_init+0x80>)
 80005c4:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005c6:	2006      	movs	r0, #6
 80005c8:	f002 f88a 	bl	80026e0 <DEC2BCD>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <ds3231_init+0x80>)
 80005d2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005d4:	200f      	movs	r0, #15
 80005d6:	f002 f883 	bl	80026e0 <DEC2BCD>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <ds3231_init+0x80>)
 80005e0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80005e2:	2009      	movs	r0, #9
 80005e4:	f002 f87c 	bl	80026e0 <DEC2BCD>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <ds3231_init+0x80>)
 80005ee:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80005f0:	2017      	movs	r0, #23
 80005f2:	f002 f875 	bl	80026e0 <DEC2BCD>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <ds3231_init+0x80>)
 80005fc:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80005fe:	2332      	movs	r3, #50	; 0x32
 8000600:	2203      	movs	r2, #3
 8000602:	21d0      	movs	r1, #208	; 0xd0
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <ds3231_init+0x84>)
 8000606:	f003 f895 	bl	8003734 <HAL_I2C_IsDeviceReady>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d000      	beq.n	8000612 <ds3231_init+0x7a>
		while(1);
 8000610:	e7fe      	b.n	8000610 <ds3231_init+0x78>
	};
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000006c 	.word	0x2000006c
 800061c:	200000c4 	.word	0x200000c4

08000620 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f854 	bl	80026e0 <DEC2BCD>
 8000638:	4603      	mov	r3, r0
 800063a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	b29a      	uxth	r2, r3
 8000640:	230a      	movs	r3, #10
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2301      	movs	r3, #1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	f107 030f 	add.w	r3, r7, #15
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	21d0      	movs	r1, #208	; 0xd0
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <ds3231_Write+0x40>)
 8000654:	f002 fd4e 	bl	80030f4 <HAL_I2C_Mem_Write>
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000c4 	.word	0x200000c4

08000664 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800066a:	230a      	movs	r3, #10
 800066c:	9302      	str	r3, [sp, #8]
 800066e:	2307      	movs	r3, #7
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <ds3231_ReadTime+0xa4>)
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	2200      	movs	r2, #0
 800067a:	21d0      	movs	r1, #208	; 0xd0
 800067c:	4823      	ldr	r0, [pc, #140]	; (800070c <ds3231_ReadTime+0xa8>)
 800067e:	f002 fe33 	bl	80032e8 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <ds3231_ReadTime+0xa4>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f002 f810 	bl	80026ac <BCD2DEC>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <ds3231_ReadTime+0xac>)
 8000692:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <ds3231_ReadTime+0xa4>)
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f807 	bl	80026ac <BCD2DEC>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <ds3231_ReadTime+0xb0>)
 80006a4:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <ds3231_ReadTime+0xa4>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fffe 	bl	80026ac <BCD2DEC>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <ds3231_ReadTime+0xb4>)
 80006b6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <ds3231_ReadTime+0xa4>)
 80006ba:	78db      	ldrb	r3, [r3, #3]
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fff5 	bl	80026ac <BCD2DEC>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <ds3231_ReadTime+0xb8>)
 80006c8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <ds3231_ReadTime+0xa4>)
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 ffec 	bl	80026ac <BCD2DEC>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <ds3231_ReadTime+0xbc>)
 80006da:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <ds3231_ReadTime+0xa4>)
 80006de:	795b      	ldrb	r3, [r3, #5]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 ffe3 	bl	80026ac <BCD2DEC>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <ds3231_ReadTime+0xc0>)
 80006ec:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ds3231_ReadTime+0xa4>)
 80006f0:	799b      	ldrb	r3, [r3, #6]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 ffda 	bl	80026ac <BCD2DEC>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <ds3231_ReadTime+0xc4>)
 80006fe:	701a      	strb	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000006c 	.word	0x2000006c
 800070c:	200000c4 	.word	0x200000c4
 8000710:	20000064 	.word	0x20000064
 8000714:	20000066 	.word	0x20000066
 8000718:	20000069 	.word	0x20000069
 800071c:	20000068 	.word	0x20000068
 8000720:	20000067 	.word	0x20000067
 8000724:	2000006a 	.word	0x2000006a
 8000728:	20000065 	.word	0x20000065

0800072c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
 8000742:	615a      	str	r2, [r3, #20]
 8000744:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000758:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_FSMC_Init+0xec>)
 800075a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800075e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000760:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_FSMC_Init+0xec>)
 8000762:	4a2e      	ldr	r2, [pc, #184]	; (800081c <MX_FSMC_Init+0xf0>)
 8000764:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_FSMC_Init+0xec>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_FSMC_Init+0xec>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_FSMC_Init+0xec>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_FSMC_Init+0xec>)
 800077a:	2210      	movs	r2, #16
 800077c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_FSMC_Init+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <MX_FSMC_Init+0xec>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_FSMC_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_FSMC_Init+0xec>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_FSMC_Init+0xec>)
 8000798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_FSMC_Init+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_FSMC_Init+0xec>)
 80007a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_FSMC_Init+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_FSMC_Init+0xec>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007be:	230f      	movs	r3, #15
 80007c0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007c2:	230f      	movs	r3, #15
 80007c4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007ce:	2310      	movs	r3, #16
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007d2:	2311      	movs	r3, #17
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007de:	230f      	movs	r3, #15
 80007e0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007e2:	2309      	movs	r3, #9
 80007e4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80007ea:	2310      	movs	r3, #16
 80007ec:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80007ee:	2311      	movs	r3, #17
 80007f0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80007f6:	463a      	mov	r2, r7
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_FSMC_Init+0xec>)
 8000800:	f004 fcee 	bl	80051e0 <HAL_SRAM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800080a:	f001 fd9b 	bl	8002344 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800080e:	bf00      	nop
 8000810:	3738      	adds	r7, #56	; 0x38
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000074 	.word	0x20000074
 800081c:	a0000104 	.word	0xa0000104

08000820 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_FSMC_MspInit+0x88>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d131      	bne.n	80008a0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_FSMC_MspInit+0x88>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_FSMC_MspInit+0x8c>)
 8000848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <HAL_FSMC_MspInit+0x8c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6393      	str	r3, [r2, #56]	; 0x38
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_FSMC_MspInit+0x8c>)
 8000854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800085e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000862:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000870:	230c      	movs	r3, #12
 8000872:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <HAL_FSMC_MspInit+0x90>)
 800087a:	f002 f927 	bl	8002acc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800087e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000882:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000890:	230c      	movs	r3, #12
 8000892:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <HAL_FSMC_MspInit+0x94>)
 800089a:	f002 f917 	bl	8002acc <HAL_GPIO_Init>
 800089e:	e000      	b.n	80008a2 <HAL_FSMC_MspInit+0x82>
    return;
 80008a0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000002c 	.word	0x2000002c
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008c0:	f7ff ffae 	bl	8000820 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b77      	ldr	r3, [pc, #476]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a76      	ldr	r2, [pc, #472]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b74      	ldr	r3, [pc, #464]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b70      	ldr	r3, [pc, #448]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a6f      	ldr	r2, [pc, #444]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b6d      	ldr	r3, [pc, #436]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b69      	ldr	r3, [pc, #420]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a68      	ldr	r2, [pc, #416]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b66      	ldr	r3, [pc, #408]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a61      	ldr	r2, [pc, #388]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b5b      	ldr	r3, [pc, #364]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a5a      	ldr	r2, [pc, #360]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b58      	ldr	r3, [pc, #352]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b54      	ldr	r3, [pc, #336]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a53      	ldr	r2, [pc, #332]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b51      	ldr	r3, [pc, #324]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b4d      	ldr	r3, [pc, #308]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2170      	movs	r1, #112	; 0x70
 80009aa:	4847      	ldr	r0, [pc, #284]	; (8000ac8 <MX_GPIO_Init+0x1fc>)
 80009ac:	f002 fa2a 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80009b6:	4845      	ldr	r0, [pc, #276]	; (8000acc <MX_GPIO_Init+0x200>)
 80009b8:	f002 fa24 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80009c2:	4843      	ldr	r0, [pc, #268]	; (8000ad0 <MX_GPIO_Init+0x204>)
 80009c4:	f002 fa1e 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ce:	4841      	ldr	r0, [pc, #260]	; (8000ad4 <MX_GPIO_Init+0x208>)
 80009d0:	f002 fa18 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2108      	movs	r1, #8
 80009d8:	483f      	ldr	r0, [pc, #252]	; (8000ad8 <MX_GPIO_Init+0x20c>)
 80009da:	f002 fa13 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009de:	2370      	movs	r3, #112	; 0x70
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <MX_GPIO_Init+0x1fc>)
 80009f6:	f002 f869 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80009fa:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	482e      	ldr	r0, [pc, #184]	; (8000acc <MX_GPIO_Init+0x200>)
 8000a14:	f002 f85a 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a18:	23c0      	movs	r3, #192	; 0xc0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482a      	ldr	r0, [pc, #168]	; (8000ad4 <MX_GPIO_Init+0x208>)
 8000a2c:	f002 f84e 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin|T_PEN_Pin|T_MISO_Pin;
 8000a30:	f241 1330 	movw	r3, #4400	; 0x1130
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4821      	ldr	r0, [pc, #132]	; (8000acc <MX_GPIO_Init+0x200>)
 8000a46:	f002 f841 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CLK_Pin;
 8000a4a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000a64:	f002 f832 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000a7c:	f002 f826 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_GPIO_Init+0x208>)
 8000a9a:	f002 f817 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_GPIO_Init+0x20c>)
 8000ab6:	f002 f809 	bl	8002acc <HAL_GPIO_Init>

}
 8000aba:	bf00      	nop
 8000abc:	3730      	adds	r7, #48	; 0x30
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_I2C1_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b1a:	f002 f9a7 	bl	8002e6c <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f001 fc0e 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000c4 	.word	0x200000c4
 8000b30:	40005400 	.word	0x40005400
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_I2C_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b76:	23c0      	movs	r3, #192	; 0xc0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b86:	2304      	movs	r3, #4
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b92:	f001 ff9b 	bl	8002acc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <LCD_WR_REG+0x1c>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	8013      	strh	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	600ffffe 	.word	0x600ffffe

08000be8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <LCD_WR_DATA+0x1c>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	8053      	strh	r3, [r2, #2]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	600ffffe 	.word	0x600ffffe

08000c08 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <LCD_RD_DATA+0x20>)
 8000c10:	885b      	ldrh	r3, [r3, #2]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	b29b      	uxth	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	600ffffe 	.word	0x600ffffe

08000c2c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	807b      	strh	r3, [r7, #2]
 8000c46:	4613      	mov	r3, r2
 8000c48:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c4a:	202a      	movs	r0, #42	; 0x2a
 8000c4c:	f7ff ffbc 	bl	8000bc8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffc6 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffc0 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ffba 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffb4 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c80:	202b      	movs	r0, #43	; 0x2b
 8000c82:	f7ff ffa1 	bl	8000bc8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ffab 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ffa5 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c9e:	883b      	ldrh	r3, [r7, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff9f 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000caa:	883b      	ldrh	r3, [r7, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff99 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cb6:	202c      	movs	r0, #44	; 0x2c
 8000cb8:	f7ff ff86 	bl	8000bc8 <LCD_WR_REG>
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}

08000cc4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <lcd_Clear+0x60>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <lcd_Clear+0x60>)
 8000cd8:	885b      	ldrh	r3, [r3, #2]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ffa3 	bl	8000c2c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	81fb      	strh	r3, [r7, #14]
 8000cea:	e011      	b.n	8000d10 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	81bb      	strh	r3, [r7, #12]
 8000cf0:	e006      	b.n	8000d00 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff77 	bl	8000be8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	81bb      	strh	r3, [r7, #12]
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <lcd_Clear+0x60>)
 8000d02:	885b      	ldrh	r3, [r3, #2]
 8000d04:	89ba      	ldrh	r2, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3f3      	bcc.n	8000cf2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	81fb      	strh	r3, [r7, #14]
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <lcd_Clear+0x60>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	89fa      	ldrh	r2, [r7, #14]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3e8      	bcc.n	8000cec <lcd_Clear+0x28>
		}
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000118 	.word	0x20000118

08000d28 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
 8000d32:	460b      	mov	r3, r1
 8000d34:	80bb      	strh	r3, [r7, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	88fa      	ldrh	r2, [r7, #6]
 8000d3e:	88b9      	ldrh	r1, [r7, #4]
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	f7ff ff73 	bl	8000c2c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff4d 	bl	8000be8 <LCD_WR_DATA>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	70fb      	strb	r3, [r7, #3]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	08db      	lsrs	r3, r3, #3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4413      	add	r3, r2
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	fb12 f303 	smulbb	r3, r2, r3
 8000dae:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	3b20      	subs	r3, #32
 8000db4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b29c      	uxth	r4, r3
 8000dc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88b9      	ldrh	r1, [r7, #4]
 8000dd6:	88f8      	ldrh	r0, [r7, #6]
 8000dd8:	4622      	mov	r2, r4
 8000dda:	f7ff ff27 	bl	8000c2c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	827b      	strh	r3, [r7, #18]
 8000de2:	e07a      	b.n	8000eda <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000de4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000de8:	2b0c      	cmp	r3, #12
 8000dea:	d028      	beq.n	8000e3e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000dec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df0:	2b10      	cmp	r3, #16
 8000df2:	d108      	bne.n	8000e06 <lcd_ShowChar+0xae>
 8000df4:	78fa      	ldrb	r2, [r7, #3]
 8000df6:	8a7b      	ldrh	r3, [r7, #18]
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <lcd_ShowChar+0x194>)
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	440a      	add	r2, r1
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	75fb      	strb	r3, [r7, #23]
 8000e04:	e01b      	b.n	8000e3e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000e06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e0a:	2b18      	cmp	r3, #24
 8000e0c:	d10b      	bne.n	8000e26 <lcd_ShowChar+0xce>
 8000e0e:	78fa      	ldrb	r2, [r7, #3]
 8000e10:	8a79      	ldrh	r1, [r7, #18]
 8000e12:	4837      	ldr	r0, [pc, #220]	; (8000ef0 <lcd_ShowChar+0x198>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4403      	add	r3, r0
 8000e1e:	440b      	add	r3, r1
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	75fb      	strb	r3, [r7, #23]
 8000e24:	e00b      	b.n	8000e3e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000e26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e2a:	2b20      	cmp	r3, #32
 8000e2c:	d15a      	bne.n	8000ee4 <lcd_ShowChar+0x18c>
 8000e2e:	78fa      	ldrb	r2, [r7, #3]
 8000e30:	8a7b      	ldrh	r3, [r7, #18]
 8000e32:	4930      	ldr	r1, [pc, #192]	; (8000ef4 <lcd_ShowChar+0x19c>)
 8000e34:	0192      	lsls	r2, r2, #6
 8000e36:	440a      	add	r2, r1
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75bb      	strb	r3, [r7, #22]
 8000e42:	e044      	b.n	8000ece <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e44:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d120      	bne.n	8000e8e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e4c:	7dfa      	ldrb	r2, [r7, #23]
 8000e4e:	7dbb      	ldrb	r3, [r7, #22]
 8000e50:	fa42 f303 	asr.w	r3, r2, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <lcd_ShowChar+0x10e>
 8000e5c:	883b      	ldrh	r3, [r7, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fec2 	bl	8000be8 <LCD_WR_DATA>
 8000e64:	e003      	b.n	8000e6e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff febd 	bl	8000be8 <LCD_WR_DATA>
				m++;
 8000e6e:	7d7b      	ldrb	r3, [r7, #21]
 8000e70:	3301      	adds	r3, #1
 8000e72:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e74:	7d7b      	ldrb	r3, [r7, #21]
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e7c:	fb02 f201 	mul.w	r2, r2, r1
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d11f      	bne.n	8000ec8 <lcd_ShowChar+0x170>
				{
					m=0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	757b      	strb	r3, [r7, #21]
					break;
 8000e8c:	e022      	b.n	8000ed4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000e8e:	7dfa      	ldrb	r2, [r7, #23]
 8000e90:	7dbb      	ldrb	r3, [r7, #22]
 8000e92:	fa42 f303 	asr.w	r3, r2, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <lcd_ShowChar+0x152>
 8000e9e:	883a      	ldrh	r2, [r7, #0]
 8000ea0:	88b9      	ldrh	r1, [r7, #4]
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff3f 	bl	8000d28 <lcd_DrawPoint>
				x++;
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	3301      	adds	r3, #1
 8000eae:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	8a3b      	ldrh	r3, [r7, #16]
 8000eb4:	1ad2      	subs	r2, r2, r3
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d105      	bne.n	8000ec8 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ebc:	8a3b      	ldrh	r3, [r7, #16]
 8000ebe:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	80bb      	strh	r3, [r7, #4]
					break;
 8000ec6:	e005      	b.n	8000ed4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ec8:	7dbb      	ldrb	r3, [r7, #22]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	75bb      	strb	r3, [r7, #22]
 8000ece:	7dbb      	ldrb	r3, [r7, #22]
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d9b7      	bls.n	8000e44 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000ed4:	8a7b      	ldrh	r3, [r7, #18]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	827b      	strh	r3, [r7, #18]
 8000eda:	8a7a      	ldrh	r2, [r7, #18]
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d380      	bcc.n	8000de4 <lcd_ShowChar+0x8c>
 8000ee2:	e000      	b.n	8000ee6 <lcd_ShowChar+0x18e>
		else return;
 8000ee4:	bf00      	nop
				}
			}
		}
	}
}
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	08005dcc 	.word	0x08005dcc
 8000ef0:	080063bc 	.word	0x080063bc
 8000ef4:	0800758c 	.word	0x0800758c

08000ef8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f0c:	e004      	b.n	8000f18 <mypow+0x20>
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	1e5a      	subs	r2, r3, #1
 8000f1c:	71ba      	strb	r2, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f5      	bne.n	8000f0e <mypow+0x16>
	return result;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af04      	add	r7, sp, #16
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	4603      	mov	r3, r0
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000f52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f56:	085b      	lsrs	r3, r3, #1
 8000f58:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e059      	b.n	8001014 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000f60:	887c      	ldrh	r4, [r7, #2]
 8000f62:	787a      	ldrb	r2, [r7, #1]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	200a      	movs	r0, #10
 8000f72:	f7ff ffc1 	bl	8000ef8 <mypow>
 8000f76:	4603      	mov	r3, r0
 8000f78:	fbb4 f1f3 	udiv	r1, r4, r3
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <lcd_ShowIntNum+0xf8>)
 8000f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	1aca      	subs	r2, r1, r3
 8000f8e:	4613      	mov	r3, r2
 8000f90:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d121      	bne.n	8000fdc <lcd_ShowIntNum+0xac>
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	787b      	ldrb	r3, [r7, #1]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	da1c      	bge.n	8000fdc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d117      	bne.n	8000fd8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	fb12 f303 	smulbb	r3, r2, r3
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4413      	add	r3, r2
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	8c3a      	ldrh	r2, [r7, #32]
 8000fbe:	88b9      	ldrh	r1, [r7, #4]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	f7ff fec1 	bl	8000d58 <lcd_ShowChar>
				continue;
 8000fd6:	e01a      	b.n	800100e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	7b7b      	ldrb	r3, [r7, #13]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	fb12 f303 	smulbb	r3, r2, r3
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4413      	add	r3, r2
 8000fee:	b298      	uxth	r0, r3
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	3330      	adds	r3, #48	; 0x30
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	8c3c      	ldrh	r4, [r7, #32]
 8000ff8:	88b9      	ldrh	r1, [r7, #4]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4623      	mov	r3, r4
 800100a:	f7ff fea5 	bl	8000d58 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	787b      	ldrb	r3, [r7, #1]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3a1      	bcc.n	8000f60 <lcd_ShowIntNum+0x30>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
 8001026:	bf00      	nop
 8001028:	cccccccd 	.word	0xcccccccd

0800102c <lcd_ShowString>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b08b      	sub	sp, #44	; 0x2c
 8001030:	af04      	add	r7, sp, #16
 8001032:	60ba      	str	r2, [r7, #8]
 8001034:	461a      	mov	r2, r3
 8001036:	4603      	mov	r3, r0
 8001038:	81fb      	strh	r3, [r7, #14]
 800103a:	460b      	mov	r3, r1
 800103c:	81bb      	strh	r3, [r7, #12]
 800103e:	4613      	mov	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800104a:	e048      	b.n	80010de <lcd_ShowString+0xb2>
		if (!bHz) {
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d145      	bne.n	80010de <lcd_ShowString+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001052:	89fa      	ldrh	r2, [r7, #14]
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <lcd_ShowString+0xc4>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800105e:	085b      	lsrs	r3, r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	1acb      	subs	r3, r1, r3
 8001064:	429a      	cmp	r2, r3
 8001066:	dc3f      	bgt.n	80010e8 <lcd_ShowString+0xbc>
 8001068:	89ba      	ldrh	r2, [r7, #12]
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <lcd_ShowString+0xc4>)
 800106c:	885b      	ldrh	r3, [r3, #2]
 800106e:	4619      	mov	r1, r3
 8001070:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001074:	1acb      	subs	r3, r1, r3
 8001076:	429a      	cmp	r2, r3
 8001078:	dc36      	bgt.n	80010e8 <lcd_ShowString+0xbc>
				return;
			if (*str > 0x80)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b80      	cmp	r3, #128	; 0x80
 8001080:	d902      	bls.n	8001088 <lcd_ShowString+0x5c>
				bHz = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	e02a      	b.n	80010de <lcd_ShowString+0xb2>
			else {
				if (*str == 0x0D) {
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b0d      	cmp	r3, #13
 800108e:	d10b      	bne.n	80010a8 <lcd_ShowString+0x7c>
					y += sizey;
 8001090:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001094:	b29a      	uxth	r2, r3
 8001096:	89bb      	ldrh	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	81bb      	strh	r3, [r7, #12]
					x = x0;
 800109c:	8abb      	ldrh	r3, [r7, #20]
 800109e:	81fb      	strh	r3, [r7, #14]
					str++;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	e017      	b.n	80010d8 <lcd_ShowString+0xac>
				} else {
					lcd_ShowChar(x, y, *str, fc, bc, sizey, mode);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	88fc      	ldrh	r4, [r7, #6]
 80010ae:	89b9      	ldrh	r1, [r7, #12]
 80010b0:	89f8      	ldrh	r0, [r7, #14]
 80010b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	4623      	mov	r3, r4
 80010c4:	f7ff fe48 	bl	8000d58 <lcd_ShowChar>
					x += sizey / 2;
 80010c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010cc:	085b      	lsrs	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	89fb      	ldrh	r3, [r7, #14]
 80010d4:	4413      	add	r3, r2
 80010d6:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	3301      	adds	r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1b2      	bne.n	800104c <lcd_ShowString+0x20>
 80010e6:	e000      	b.n	80010ea <lcd_ShowString+0xbe>
				return;
 80010e8:	bf00      	nop
			}
		}
	}
}
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	20000118 	.word	0x20000118

080010f4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <lcd_SetDir+0x44>)
 8001110:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001114:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <lcd_SetDir+0x44>)
 8001118:	22f0      	movs	r2, #240	; 0xf0
 800111a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800111c:	e006      	b.n	800112c <lcd_SetDir+0x38>
		lcddev.width=240;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <lcd_SetDir+0x44>)
 8001120:	22f0      	movs	r2, #240	; 0xf0
 8001122:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <lcd_SetDir+0x44>)
 8001126:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800112a:	805a      	strh	r2, [r3, #2]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000118 	.word	0x20000118

0800113c <lcd_init>:


void lcd_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001146:	48aa      	ldr	r0, [pc, #680]	; (80013f0 <lcd_init+0x2b4>)
 8001148:	f001 fe5c 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800114c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001150:	f001 fb86 	bl	8002860 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	48a5      	ldr	r0, [pc, #660]	; (80013f0 <lcd_init+0x2b4>)
 800115c:	f001 fe52 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001164:	f001 fb7c 	bl	8002860 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ffc3 	bl	80010f4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800116e:	20d3      	movs	r0, #211	; 0xd3
 8001170:	f7ff fd2a 	bl	8000bc8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001174:	f7ff fd48 	bl	8000c08 <LCD_RD_DATA>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b9d      	ldr	r3, [pc, #628]	; (80013f4 <lcd_init+0x2b8>)
 800117e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001180:	f7ff fd42 	bl	8000c08 <LCD_RD_DATA>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b9a      	ldr	r3, [pc, #616]	; (80013f4 <lcd_init+0x2b8>)
 800118a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800118c:	f7ff fd3c 	bl	8000c08 <LCD_RD_DATA>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b97      	ldr	r3, [pc, #604]	; (80013f4 <lcd_init+0x2b8>)
 8001196:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001198:	4b96      	ldr	r3, [pc, #600]	; (80013f4 <lcd_init+0x2b8>)
 800119a:	889b      	ldrh	r3, [r3, #4]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b94      	ldr	r3, [pc, #592]	; (80013f4 <lcd_init+0x2b8>)
 80011a2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011a4:	f7ff fd30 	bl	8000c08 <LCD_RD_DATA>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b91      	ldr	r3, [pc, #580]	; (80013f4 <lcd_init+0x2b8>)
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <lcd_init+0x2b8>)
 80011b6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80011b8:	20cf      	movs	r0, #207	; 0xcf
 80011ba:	f7ff fd05 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fd12 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011c4:	20c1      	movs	r0, #193	; 0xc1
 80011c6:	f7ff fd0f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011ca:	2030      	movs	r0, #48	; 0x30
 80011cc:	f7ff fd0c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011d0:	20ed      	movs	r0, #237	; 0xed
 80011d2:	f7ff fcf9 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011d6:	2064      	movs	r0, #100	; 0x64
 80011d8:	f7ff fd06 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011dc:	2003      	movs	r0, #3
 80011de:	f7ff fd03 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011e2:	2012      	movs	r0, #18
 80011e4:	f7ff fd00 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011e8:	2081      	movs	r0, #129	; 0x81
 80011ea:	f7ff fcfd 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011ee:	20e8      	movs	r0, #232	; 0xe8
 80011f0:	f7ff fcea 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011f4:	2085      	movs	r0, #133	; 0x85
 80011f6:	f7ff fcf7 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011fa:	2010      	movs	r0, #16
 80011fc:	f7ff fcf4 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001200:	207a      	movs	r0, #122	; 0x7a
 8001202:	f7ff fcf1 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001206:	20cb      	movs	r0, #203	; 0xcb
 8001208:	f7ff fcde 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800120c:	2039      	movs	r0, #57	; 0x39
 800120e:	f7ff fceb 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001212:	202c      	movs	r0, #44	; 0x2c
 8001214:	f7ff fce8 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fce5 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800121e:	2034      	movs	r0, #52	; 0x34
 8001220:	f7ff fce2 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001224:	2002      	movs	r0, #2
 8001226:	f7ff fcdf 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800122a:	20f7      	movs	r0, #247	; 0xf7
 800122c:	f7ff fccc 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001230:	2020      	movs	r0, #32
 8001232:	f7ff fcd9 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001236:	20ea      	movs	r0, #234	; 0xea
 8001238:	f7ff fcc6 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fcd3 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fcd0 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001248:	20c0      	movs	r0, #192	; 0xc0
 800124a:	f7ff fcbd 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800124e:	201b      	movs	r0, #27
 8001250:	f7ff fcca 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001254:	20c1      	movs	r0, #193	; 0xc1
 8001256:	f7ff fcb7 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff fcc4 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001260:	20c5      	movs	r0, #197	; 0xc5
 8001262:	f7ff fcb1 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001266:	2030      	movs	r0, #48	; 0x30
 8001268:	f7ff fcbe 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800126c:	2030      	movs	r0, #48	; 0x30
 800126e:	f7ff fcbb 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001272:	20c7      	movs	r0, #199	; 0xc7
 8001274:	f7ff fca8 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001278:	20b7      	movs	r0, #183	; 0xb7
 800127a:	f7ff fcb5 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800127e:	2036      	movs	r0, #54	; 0x36
 8001280:	f7ff fca2 	bl	8000bc8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001284:	2008      	movs	r0, #8
 8001286:	f7ff fcaf 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800128a:	203a      	movs	r0, #58	; 0x3a
 800128c:	f7ff fc9c 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001290:	2055      	movs	r0, #85	; 0x55
 8001292:	f7ff fca9 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001296:	20b1      	movs	r0, #177	; 0xb1
 8001298:	f7ff fc96 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fca3 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80012a2:	201a      	movs	r0, #26
 80012a4:	f7ff fca0 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012a8:	20b6      	movs	r0, #182	; 0xb6
 80012aa:	f7ff fc8d 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012ae:	200a      	movs	r0, #10
 80012b0:	f7ff fc9a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80012b4:	20a2      	movs	r0, #162	; 0xa2
 80012b6:	f7ff fc97 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80012ba:	20f2      	movs	r0, #242	; 0xf2
 80012bc:	f7ff fc84 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fc91 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012c6:	2026      	movs	r0, #38	; 0x26
 80012c8:	f7ff fc7e 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fc8b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012d2:	20e0      	movs	r0, #224	; 0xe0
 80012d4:	f7ff fc78 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012d8:	200f      	movs	r0, #15
 80012da:	f7ff fc85 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012de:	202a      	movs	r0, #42	; 0x2a
 80012e0:	f7ff fc82 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012e4:	2028      	movs	r0, #40	; 0x28
 80012e6:	f7ff fc7f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012ea:	2008      	movs	r0, #8
 80012ec:	f7ff fc7c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012f0:	200e      	movs	r0, #14
 80012f2:	f7ff fc79 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012f6:	2008      	movs	r0, #8
 80012f8:	f7ff fc76 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012fc:	2054      	movs	r0, #84	; 0x54
 80012fe:	f7ff fc73 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001302:	20a9      	movs	r0, #169	; 0xa9
 8001304:	f7ff fc70 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001308:	2043      	movs	r0, #67	; 0x43
 800130a:	f7ff fc6d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fc6a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001314:	200f      	movs	r0, #15
 8001316:	f7ff fc67 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fc64 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff fc61 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fc5e 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fc5b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001332:	20e1      	movs	r0, #225	; 0xe1
 8001334:	f7ff fc48 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fc55 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800133e:	2015      	movs	r0, #21
 8001340:	f7ff fc52 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001344:	2017      	movs	r0, #23
 8001346:	f7ff fc4f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800134a:	2007      	movs	r0, #7
 800134c:	f7ff fc4c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001350:	2011      	movs	r0, #17
 8001352:	f7ff fc49 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001356:	2006      	movs	r0, #6
 8001358:	f7ff fc46 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800135c:	202b      	movs	r0, #43	; 0x2b
 800135e:	f7ff fc43 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001362:	2056      	movs	r0, #86	; 0x56
 8001364:	f7ff fc40 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001368:	203c      	movs	r0, #60	; 0x3c
 800136a:	f7ff fc3d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800136e:	2005      	movs	r0, #5
 8001370:	f7ff fc3a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001374:	2010      	movs	r0, #16
 8001376:	f7ff fc37 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800137a:	200f      	movs	r0, #15
 800137c:	f7ff fc34 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001380:	203f      	movs	r0, #63	; 0x3f
 8001382:	f7ff fc31 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001386:	203f      	movs	r0, #63	; 0x3f
 8001388:	f7ff fc2e 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800138c:	200f      	movs	r0, #15
 800138e:	f7ff fc2b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001392:	202b      	movs	r0, #43	; 0x2b
 8001394:	f7ff fc18 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fc25 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc22 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fc1f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013aa:	203f      	movs	r0, #63	; 0x3f
 80013ac:	f7ff fc1c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013b0:	202a      	movs	r0, #42	; 0x2a
 80013b2:	f7ff fc09 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fc16 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fc13 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fc10 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013c8:	20ef      	movs	r0, #239	; 0xef
 80013ca:	f7ff fc0d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013ce:	2011      	movs	r0, #17
 80013d0:	f7ff fbfa 	bl	8000bc8 <LCD_WR_REG>
	HAL_Delay(120);
 80013d4:	2078      	movs	r0, #120	; 0x78
 80013d6:	f001 fa43 	bl	8002860 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013da:	2029      	movs	r0, #41	; 0x29
 80013dc:	f7ff fbf4 	bl	8000bc8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <lcd_init+0x2bc>)
 80013e8:	f001 fd0c 	bl	8002e04 <HAL_GPIO_WritePin>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020800 	.word	0x40020800
 80013f4:	20000118 	.word	0x20000118
 80013f8:	40020000 	.word	0x40020000

080013fc <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001400:	f001 f9bc 	bl	800277c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001404:	f000 f83c 	bl	8001480 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001408:	f7ff fa60 	bl	80008cc <MX_GPIO_Init>
	MX_TIM2_Init();
 800140c:	f001 f8dc 	bl	80025c8 <MX_TIM2_Init>
	MX_SPI1_Init();
 8001410:	f000 ffee 	bl	80023f0 <MX_SPI1_Init>
	MX_FSMC_Init();
 8001414:	f7ff f98a 	bl	800072c <MX_FSMC_Init>
	MX_I2C1_Init();
 8001418:	f7ff fb60 	bl	8000adc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 800141c:	f000 f89a 	bl	8001554 <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fc4f 	bl	8000cc4 <lcd_Clear>
	UpdateTime();
 8001426:	f000 f8b3 	bl	8001590 <UpdateTime>

	while (1) {
		while (!flag_timer2);
 800142a:	bf00      	nop
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <main+0x70>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0fb      	beq.n	800142c <main+0x30>
		flag_timer2 = 0;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <main+0x70>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
		button_Scan();
 800143a:	f7ff f841 	bl	80004c0 <button_Scan>
        if (statusSystem == MODE_1){
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <main+0x74>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <main+0x64>
            ds3231_ReadTime();
 8001446:	f7ff f90d 	bl	8000664 <ds3231_ReadTime>
            if (ds3231_hours > set_hour)
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <main+0x78>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <main+0x7c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	dd03      	ble.n	8001460 <main+0x64>
            {
            	HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001458:	2110      	movs	r1, #16
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <main+0x80>)
 800145c:	f001 fceb 	bl	8002e36 <HAL_GPIO_TogglePin>
            }
        }

		DisplayTime();
 8001460:	f000 f8b6 	bl	80015d0 <DisplayTime>
		SetUpTime();
 8001464:	f000 fb68 	bl	8001b38 <SetUpTime>
		while (!flag_timer2);
 8001468:	e7df      	b.n	800142a <main+0x2e>
 800146a:	bf00      	nop
 800146c:	2000003c 	.word	0x2000003c
 8001470:	20000038 	.word	0x20000038
 8001474:	20000069 	.word	0x20000069
 8001478:	2000015c 	.word	0x2000015c
 800147c:	40021000 	.word	0x40021000

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	; 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	2230      	movs	r2, #48	; 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fc60 	bl	8005d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <SystemClock_Config+0xcc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <SystemClock_Config+0xcc>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <SystemClock_Config+0xcc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <SystemClock_Config+0xd0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a21      	ldr	r2, [pc, #132]	; (8001550 <SystemClock_Config+0xd0>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <SystemClock_Config+0xd0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014f0:	2308      	movs	r3, #8
 80014f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014f4:	23a8      	movs	r3, #168	; 0xa8
 80014f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014fc:	2304      	movs	r3, #4
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4618      	mov	r0, r3
 8001506:	f002 fd9f 	bl	8004048 <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001510:	f000 ff18 	bl	8002344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001514:	230f      	movs	r3, #15
 8001516:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	2302      	movs	r3, #2
 800151a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001520:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001524:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001526:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800152a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2105      	movs	r1, #5
 8001532:	4618      	mov	r0, r3
 8001534:	f003 f800 	bl	8004538 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800153e:	f000 ff01 	bl	8002344 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	; 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <system_init>:

/* USER CODE BEGIN 4 */
	void system_init() {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2120      	movs	r1, #32
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <system_init+0x38>)
 800155e:	f001 fc51 	bl	8002e04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <system_init+0x38>)
 8001568:	f001 fc4c 	bl	8002e04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2110      	movs	r1, #16
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <system_init+0x38>)
 8001572:	f001 fc47 	bl	8002e04 <HAL_GPIO_WritePin>

		lcd_init();
 8001576:	f7ff fde1 	bl	800113c <lcd_init>
		ds3231_init();
 800157a:	f7ff f80d 	bl	8000598 <ds3231_init>

		timer_init();
 800157e:	f000 fee7 	bl	8002350 <timer_init>
		setTimer2(50);
 8001582:	2032      	movs	r0, #50	; 0x32
 8001584:	f000 feee 	bl	8002364 <setTimer2>
	}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000

08001590 <UpdateTime>:
	void UpdateTime(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
		ds3231_Write(ADDRESS_YEAR, 24);
 8001594:	2118      	movs	r1, #24
 8001596:	2006      	movs	r0, #6
 8001598:	f7ff f842 	bl	8000620 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, 11);
 800159c:	210b      	movs	r1, #11
 800159e:	2005      	movs	r0, #5
 80015a0:	f7ff f83e 	bl	8000620 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, 15);
 80015a4:	210f      	movs	r1, #15
 80015a6:	2004      	movs	r0, #4
 80015a8:	f7ff f83a 	bl	8000620 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, 6);
 80015ac:	2106      	movs	r1, #6
 80015ae:	2003      	movs	r0, #3
 80015b0:	f7ff f836 	bl	8000620 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, 2);
 80015b4:	2102      	movs	r1, #2
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff f832 	bl	8000620 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, 45);
 80015bc:	212d      	movs	r1, #45	; 0x2d
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff f82e 	bl	8000620 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff f82a 	bl	8000620 <ds3231_Write>
	}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <DisplayTime>:
	void DisplayTime()
	{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af04      	add	r7, sp, #16
		if(statusSetupTime == INIT_SYSTEM) ds3231_ReadTime();
 80015d6:	4ba9      	ldr	r3, [pc, #676]	; (800187c <DisplayTime+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <DisplayTime+0x12>
 80015de:	f7ff f841 	bl	8000664 <ds3231_ReadTime>

		if(statusSetupTime != SET_HOUR || (statusSetupTime == SET_HOUR && timeBlink >= 5)){
 80015e2:	4ba6      	ldr	r3, [pc, #664]	; (800187c <DisplayTime+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <DisplayTime+0x2a>
 80015ea:	4ba4      	ldr	r3, [pc, #656]	; (800187c <DisplayTime+0x2ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d130      	bne.n	8001654 <DisplayTime+0x84>
 80015f2:	4ba3      	ldr	r3, [pc, #652]	; (8001880 <DisplayTime+0x2b0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	dd2c      	ble.n	8001654 <DisplayTime+0x84>
			lcd_ShowIntNum(70, 100, ds3231_hours/10, 1, GREEN, BLACK, 24);
 80015fa:	4ba2      	ldr	r3, [pc, #648]	; (8001884 <DisplayTime+0x2b4>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4aa2      	ldr	r2, [pc, #648]	; (8001888 <DisplayTime+0x2b8>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	b29a      	uxth	r2, r3
 800160a:	2318      	movs	r3, #24
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2300      	movs	r3, #0
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	2164      	movs	r1, #100	; 0x64
 800161c:	2046      	movs	r0, #70	; 0x46
 800161e:	f7ff fc87 	bl	8000f30 <lcd_ShowIntNum>
			lcd_ShowIntNum(83, 100, ds3231_hours%10, 1, GREEN, BLACK, 24);
 8001622:	4b98      	ldr	r3, [pc, #608]	; (8001884 <DisplayTime+0x2b4>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	4b98      	ldr	r3, [pc, #608]	; (8001888 <DisplayTime+0x2b8>)
 8001628:	fba3 1302 	umull	r1, r3, r3, r2
 800162c:	08d9      	lsrs	r1, r3, #3
 800162e:	460b      	mov	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	2318      	movs	r3, #24
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	2300      	movs	r3, #0
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2301      	movs	r3, #1
 800164c:	2164      	movs	r1, #100	; 0x64
 800164e:	2053      	movs	r0, #83	; 0x53
 8001650:	f7ff fc6e 	bl	8000f30 <lcd_ShowIntNum>
		}

		lcd_ShowChar(96, 100, ':', GREEN, BLACK, 24, 0);
 8001654:	2300      	movs	r3, #0
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2318      	movs	r3, #24
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001664:	223a      	movs	r2, #58	; 0x3a
 8001666:	2164      	movs	r1, #100	; 0x64
 8001668:	2060      	movs	r0, #96	; 0x60
 800166a:	f7ff fb75 	bl	8000d58 <lcd_ShowChar>

		if(statusSetupTime != SET_MINUTE || (statusSetupTime == SET_MINUTE && timeBlink >= 5)){
 800166e:	4b83      	ldr	r3, [pc, #524]	; (800187c <DisplayTime+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d107      	bne.n	8001686 <DisplayTime+0xb6>
 8001676:	4b81      	ldr	r3, [pc, #516]	; (800187c <DisplayTime+0x2ac>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d130      	bne.n	80016e0 <DisplayTime+0x110>
 800167e:	4b80      	ldr	r3, [pc, #512]	; (8001880 <DisplayTime+0x2b0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b04      	cmp	r3, #4
 8001684:	dd2c      	ble.n	80016e0 <DisplayTime+0x110>
			lcd_ShowIntNum(110, 100, ds3231_min/10, 1, GREEN, BLACK, 24);
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <DisplayTime+0x2bc>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4a7f      	ldr	r2, [pc, #508]	; (8001888 <DisplayTime+0x2b8>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	b29a      	uxth	r2, r3
 8001696:	2318      	movs	r3, #24
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	2300      	movs	r3, #0
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	2164      	movs	r1, #100	; 0x64
 80016a8:	206e      	movs	r0, #110	; 0x6e
 80016aa:	f7ff fc41 	bl	8000f30 <lcd_ShowIntNum>
			lcd_ShowIntNum(123, 100, ds3231_min%10, 1, GREEN, BLACK, 24);
 80016ae:	4b77      	ldr	r3, [pc, #476]	; (800188c <DisplayTime+0x2bc>)
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b75      	ldr	r3, [pc, #468]	; (8001888 <DisplayTime+0x2b8>)
 80016b4:	fba3 1302 	umull	r1, r3, r3, r2
 80016b8:	08d9      	lsrs	r1, r3, #3
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	2318      	movs	r3, #24
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	2300      	movs	r3, #0
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	2164      	movs	r1, #100	; 0x64
 80016da:	207b      	movs	r0, #123	; 0x7b
 80016dc:	f7ff fc28 	bl	8000f30 <lcd_ShowIntNum>
		}

		lcd_ShowChar(136, 100, ':', GREEN, BLACK, 24, 0);
 80016e0:	2300      	movs	r3, #0
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	2318      	movs	r3, #24
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016f0:	223a      	movs	r2, #58	; 0x3a
 80016f2:	2164      	movs	r1, #100	; 0x64
 80016f4:	2088      	movs	r0, #136	; 0x88
 80016f6:	f7ff fb2f 	bl	8000d58 <lcd_ShowChar>

		if(statusSetupTime != SET_SEC || (statusSetupTime == SET_SEC && timeBlink >= 5)){
 80016fa:	4b60      	ldr	r3, [pc, #384]	; (800187c <DisplayTime+0x2ac>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d107      	bne.n	8001712 <DisplayTime+0x142>
 8001702:	4b5e      	ldr	r3, [pc, #376]	; (800187c <DisplayTime+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d130      	bne.n	800176c <DisplayTime+0x19c>
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <DisplayTime+0x2b0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b04      	cmp	r3, #4
 8001710:	dd2c      	ble.n	800176c <DisplayTime+0x19c>
			lcd_ShowIntNum(150, 100, ds3231_sec/10, 1, GREEN, BLACK, 24);
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <DisplayTime+0x2c0>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4a5c      	ldr	r2, [pc, #368]	; (8001888 <DisplayTime+0x2b8>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	08db      	lsrs	r3, r3, #3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	b29a      	uxth	r2, r3
 8001722:	2318      	movs	r3, #24
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	2300      	movs	r3, #0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	2164      	movs	r1, #100	; 0x64
 8001734:	2096      	movs	r0, #150	; 0x96
 8001736:	f7ff fbfb 	bl	8000f30 <lcd_ShowIntNum>
			lcd_ShowIntNum(163, 100, ds3231_sec%10, 1, GREEN, BLACK, 24);
 800173a:	4b55      	ldr	r3, [pc, #340]	; (8001890 <DisplayTime+0x2c0>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4b52      	ldr	r3, [pc, #328]	; (8001888 <DisplayTime+0x2b8>)
 8001740:	fba3 1302 	umull	r1, r3, r3, r2
 8001744:	08d9      	lsrs	r1, r3, #3
 8001746:	460b      	mov	r3, r1
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	b29a      	uxth	r2, r3
 8001754:	2318      	movs	r3, #24
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2300      	movs	r3, #0
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2164      	movs	r1, #100	; 0x64
 8001766:	20a3      	movs	r0, #163	; 0xa3
 8001768:	f7ff fbe2 	bl	8000f30 <lcd_ShowIntNum>
		}

	    //////day
		if(statusSetupTime != SET_DAY || (statusSetupTime == SET_DAY && timeBlink >= 5)){
 800176c:	4b43      	ldr	r3, [pc, #268]	; (800187c <DisplayTime+0x2ac>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d109      	bne.n	8001788 <DisplayTime+0x1b8>
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <DisplayTime+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b04      	cmp	r3, #4
 800177a:	f040 809b 	bne.w	80018b4 <DisplayTime+0x2e4>
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <DisplayTime+0x2b0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b04      	cmp	r3, #4
 8001784:	f340 8096 	ble.w	80018b4 <DisplayTime+0x2e4>
			switch(ds3231_day)
 8001788:	4b42      	ldr	r3, [pc, #264]	; (8001894 <DisplayTime+0x2c4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3b01      	subs	r3, #1
 800178e:	2b06      	cmp	r3, #6
 8001790:	f200 8091 	bhi.w	80018b6 <DisplayTime+0x2e6>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <DisplayTime+0x1cc>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017b9 	.word	0x080017b9
 80017a0:	080017d5 	.word	0x080017d5
 80017a4:	080017f1 	.word	0x080017f1
 80017a8:	0800180d 	.word	0x0800180d
 80017ac:	08001829 	.word	0x08001829
 80017b0:	08001845 	.word	0x08001845
 80017b4:	08001861 	.word	0x08001861
			{
				case 1:
					lcd_ShowString(20, 130, "SUN", YELLOW, BLACK, 24, 0);
 80017b8:	2300      	movs	r3, #0
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2318      	movs	r3, #24
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017c8:	4a33      	ldr	r2, [pc, #204]	; (8001898 <DisplayTime+0x2c8>)
 80017ca:	2182      	movs	r1, #130	; 0x82
 80017cc:	2014      	movs	r0, #20
 80017ce:	f7ff fc2d 	bl	800102c <lcd_ShowString>
					break;
 80017d2:	e070      	b.n	80018b6 <DisplayTime+0x2e6>
				case 2:
					lcd_ShowString(20, 130, "MON", YELLOW, BLACK, 24, 0);
 80017d4:	2300      	movs	r3, #0
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	2318      	movs	r3, #24
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017e4:	4a2d      	ldr	r2, [pc, #180]	; (800189c <DisplayTime+0x2cc>)
 80017e6:	2182      	movs	r1, #130	; 0x82
 80017e8:	2014      	movs	r0, #20
 80017ea:	f7ff fc1f 	bl	800102c <lcd_ShowString>
					break;
 80017ee:	e062      	b.n	80018b6 <DisplayTime+0x2e6>
				case 3:
					lcd_ShowString(20, 130, "TUE", YELLOW, BLACK, 24, 0);
 80017f0:	2300      	movs	r3, #0
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	2318      	movs	r3, #24
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2300      	movs	r3, #0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <DisplayTime+0x2d0>)
 8001802:	2182      	movs	r1, #130	; 0x82
 8001804:	2014      	movs	r0, #20
 8001806:	f7ff fc11 	bl	800102c <lcd_ShowString>
					break;
 800180a:	e054      	b.n	80018b6 <DisplayTime+0x2e6>
				case 4:
					lcd_ShowString(20, 130, "WED", YELLOW, BLACK, 24, 0);
 800180c:	2300      	movs	r3, #0
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2318      	movs	r3, #24
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2300      	movs	r3, #0
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800181c:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <DisplayTime+0x2d4>)
 800181e:	2182      	movs	r1, #130	; 0x82
 8001820:	2014      	movs	r0, #20
 8001822:	f7ff fc03 	bl	800102c <lcd_ShowString>
					break;
 8001826:	e046      	b.n	80018b6 <DisplayTime+0x2e6>
				case 5:
					lcd_ShowString(20, 130, "THU", YELLOW, BLACK, 24, 0);
 8001828:	2300      	movs	r3, #0
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2318      	movs	r3, #24
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <DisplayTime+0x2d8>)
 800183a:	2182      	movs	r1, #130	; 0x82
 800183c:	2014      	movs	r0, #20
 800183e:	f7ff fbf5 	bl	800102c <lcd_ShowString>
					break;
 8001842:	e038      	b.n	80018b6 <DisplayTime+0x2e6>
				case 6:
					lcd_ShowString(20, 130, "FRI", YELLOW, BLACK, 24, 0);
 8001844:	2300      	movs	r3, #0
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2318      	movs	r3, #24
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001854:	4a15      	ldr	r2, [pc, #84]	; (80018ac <DisplayTime+0x2dc>)
 8001856:	2182      	movs	r1, #130	; 0x82
 8001858:	2014      	movs	r0, #20
 800185a:	f7ff fbe7 	bl	800102c <lcd_ShowString>
					break;
 800185e:	e02a      	b.n	80018b6 <DisplayTime+0x2e6>
				case 7:
					lcd_ShowString(20, 130, "SAT", YELLOW, BLACK, 24, 0);
 8001860:	2300      	movs	r3, #0
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2318      	movs	r3, #24
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <DisplayTime+0x2e0>)
 8001872:	2182      	movs	r1, #130	; 0x82
 8001874:	2014      	movs	r0, #20
 8001876:	f7ff fbd9 	bl	800102c <lcd_ShowString>
					break;
 800187a:	e01c      	b.n	80018b6 <DisplayTime+0x2e6>
 800187c:	20000030 	.word	0x20000030
 8001880:	20000034 	.word	0x20000034
 8001884:	20000069 	.word	0x20000069
 8001888:	cccccccd 	.word	0xcccccccd
 800188c:	20000066 	.word	0x20000066
 8001890:	20000064 	.word	0x20000064
 8001894:	20000068 	.word	0x20000068
 8001898:	08005d7c 	.word	0x08005d7c
 800189c:	08005d80 	.word	0x08005d80
 80018a0:	08005d84 	.word	0x08005d84
 80018a4:	08005d88 	.word	0x08005d88
 80018a8:	08005d8c 	.word	0x08005d8c
 80018ac:	08005d90 	.word	0x08005d90
 80018b0:	08005d94 	.word	0x08005d94
			}
		}
 80018b4:	bf00      	nop

		if(statusSetupTime != SET_MONTH || (statusSetupTime == SET_MONTH && timeBlink >= 5)){
 80018b6:	4b8f      	ldr	r3, [pc, #572]	; (8001af4 <DisplayTime+0x524>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d109      	bne.n	80018d2 <DisplayTime+0x302>
 80018be:	4b8d      	ldr	r3, [pc, #564]	; (8001af4 <DisplayTime+0x524>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	f040 80ce 	bne.w	8001a64 <DisplayTime+0x494>
 80018c8:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <DisplayTime+0x528>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	f340 80c9 	ble.w	8001a64 <DisplayTime+0x494>
			switch(ds3231_month)
 80018d2:	4b8a      	ldr	r3, [pc, #552]	; (8001afc <DisplayTime+0x52c>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	2b0b      	cmp	r3, #11
 80018da:	f200 80c4 	bhi.w	8001a66 <DisplayTime+0x496>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <DisplayTime+0x314>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	08001915 	.word	0x08001915
 80018e8:	08001931 	.word	0x08001931
 80018ec:	0800194d 	.word	0x0800194d
 80018f0:	08001969 	.word	0x08001969
 80018f4:	08001985 	.word	0x08001985
 80018f8:	080019a1 	.word	0x080019a1
 80018fc:	080019bd 	.word	0x080019bd
 8001900:	080019d9 	.word	0x080019d9
 8001904:	080019f5 	.word	0x080019f5
 8001908:	08001a11 	.word	0x08001a11
 800190c:	08001a2d 	.word	0x08001a2d
 8001910:	08001a49 	.word	0x08001a49
			{
				case 1:
					lcd_ShowString(105, 130, "JAN", YELLOW, BLACK, 24, 0);
 8001914:	2300      	movs	r3, #0
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	2318      	movs	r3, #24
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001924:	4a76      	ldr	r2, [pc, #472]	; (8001b00 <DisplayTime+0x530>)
 8001926:	2182      	movs	r1, #130	; 0x82
 8001928:	2069      	movs	r0, #105	; 0x69
 800192a:	f7ff fb7f 	bl	800102c <lcd_ShowString>
					break;
 800192e:	e09a      	b.n	8001a66 <DisplayTime+0x496>
				case 2:
					lcd_ShowString(105, 130, "FEB", YELLOW, BLACK, 24, 0);
 8001930:	2300      	movs	r3, #0
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2318      	movs	r3, #24
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001940:	4a70      	ldr	r2, [pc, #448]	; (8001b04 <DisplayTime+0x534>)
 8001942:	2182      	movs	r1, #130	; 0x82
 8001944:	2069      	movs	r0, #105	; 0x69
 8001946:	f7ff fb71 	bl	800102c <lcd_ShowString>
					break;
 800194a:	e08c      	b.n	8001a66 <DisplayTime+0x496>
				case 3:
					lcd_ShowString(105, 130, "MAR", YELLOW, BLACK, 24, 0);
 800194c:	2300      	movs	r3, #0
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	2318      	movs	r3, #24
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800195c:	4a6a      	ldr	r2, [pc, #424]	; (8001b08 <DisplayTime+0x538>)
 800195e:	2182      	movs	r1, #130	; 0x82
 8001960:	2069      	movs	r0, #105	; 0x69
 8001962:	f7ff fb63 	bl	800102c <lcd_ShowString>
					break;
 8001966:	e07e      	b.n	8001a66 <DisplayTime+0x496>
				case 4:
					lcd_ShowString(105, 130, "APR", YELLOW, BLACK, 24, 0);
 8001968:	2300      	movs	r3, #0
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2318      	movs	r3, #24
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2300      	movs	r3, #0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001978:	4a64      	ldr	r2, [pc, #400]	; (8001b0c <DisplayTime+0x53c>)
 800197a:	2182      	movs	r1, #130	; 0x82
 800197c:	2069      	movs	r0, #105	; 0x69
 800197e:	f7ff fb55 	bl	800102c <lcd_ShowString>
					break;
 8001982:	e070      	b.n	8001a66 <DisplayTime+0x496>
				case 5:
					lcd_ShowString(105, 130, "MAY", YELLOW, BLACK, 24, 0);
 8001984:	2300      	movs	r3, #0
 8001986:	9302      	str	r3, [sp, #8]
 8001988:	2318      	movs	r3, #24
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2300      	movs	r3, #0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001994:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <DisplayTime+0x540>)
 8001996:	2182      	movs	r1, #130	; 0x82
 8001998:	2069      	movs	r0, #105	; 0x69
 800199a:	f7ff fb47 	bl	800102c <lcd_ShowString>
					break;
 800199e:	e062      	b.n	8001a66 <DisplayTime+0x496>
				case 6:
					lcd_ShowString(105, 130, "JUN", YELLOW, BLACK, 24, 0);
 80019a0:	2300      	movs	r3, #0
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2318      	movs	r3, #24
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2300      	movs	r3, #0
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019b0:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <DisplayTime+0x544>)
 80019b2:	2182      	movs	r1, #130	; 0x82
 80019b4:	2069      	movs	r0, #105	; 0x69
 80019b6:	f7ff fb39 	bl	800102c <lcd_ShowString>
					break;
 80019ba:	e054      	b.n	8001a66 <DisplayTime+0x496>
				case 7:
					lcd_ShowString(105, 130, "JUL", YELLOW, BLACK, 24, 0);
 80019bc:	2300      	movs	r3, #0
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2318      	movs	r3, #24
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2300      	movs	r3, #0
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019cc:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <DisplayTime+0x548>)
 80019ce:	2182      	movs	r1, #130	; 0x82
 80019d0:	2069      	movs	r0, #105	; 0x69
 80019d2:	f7ff fb2b 	bl	800102c <lcd_ShowString>
					break;
 80019d6:	e046      	b.n	8001a66 <DisplayTime+0x496>
				case 8:
					lcd_ShowString(105, 130, "AUG", YELLOW, BLACK, 24, 0);
 80019d8:	2300      	movs	r3, #0
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	2318      	movs	r3, #24
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <DisplayTime+0x54c>)
 80019ea:	2182      	movs	r1, #130	; 0x82
 80019ec:	2069      	movs	r0, #105	; 0x69
 80019ee:	f7ff fb1d 	bl	800102c <lcd_ShowString>
					break;
 80019f2:	e038      	b.n	8001a66 <DisplayTime+0x496>
				case 9:
					lcd_ShowString(105, 130, "SEP", YELLOW, BLACK, 24, 0);
 80019f4:	2300      	movs	r3, #0
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	2318      	movs	r3, #24
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a04:	4a46      	ldr	r2, [pc, #280]	; (8001b20 <DisplayTime+0x550>)
 8001a06:	2182      	movs	r1, #130	; 0x82
 8001a08:	2069      	movs	r0, #105	; 0x69
 8001a0a:	f7ff fb0f 	bl	800102c <lcd_ShowString>
					break;
 8001a0e:	e02a      	b.n	8001a66 <DisplayTime+0x496>
				case 10:
					lcd_ShowString(105, 130, "OCT", YELLOW, BLACK, 24, 0);
 8001a10:	2300      	movs	r3, #0
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2318      	movs	r3, #24
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a20:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <DisplayTime+0x554>)
 8001a22:	2182      	movs	r1, #130	; 0x82
 8001a24:	2069      	movs	r0, #105	; 0x69
 8001a26:	f7ff fb01 	bl	800102c <lcd_ShowString>
					break;
 8001a2a:	e01c      	b.n	8001a66 <DisplayTime+0x496>
				case 11:
					lcd_ShowString(105, 130, "NOV", YELLOW, BLACK, 24, 0);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2318      	movs	r3, #24
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2300      	movs	r3, #0
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a3c:	4a3a      	ldr	r2, [pc, #232]	; (8001b28 <DisplayTime+0x558>)
 8001a3e:	2182      	movs	r1, #130	; 0x82
 8001a40:	2069      	movs	r0, #105	; 0x69
 8001a42:	f7ff faf3 	bl	800102c <lcd_ShowString>
					break;
 8001a46:	e00e      	b.n	8001a66 <DisplayTime+0x496>
				case 12:
					lcd_ShowString(105, 130, "DEC", YELLOW, BLACK, 24, 0);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2318      	movs	r3, #24
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a58:	4a34      	ldr	r2, [pc, #208]	; (8001b2c <DisplayTime+0x55c>)
 8001a5a:	2182      	movs	r1, #130	; 0x82
 8001a5c:	2069      	movs	r0, #105	; 0x69
 8001a5e:	f7ff fae5 	bl	800102c <lcd_ShowString>
					break;
 8001a62:	e000      	b.n	8001a66 <DisplayTime+0x496>
			}
		}
 8001a64:	bf00      	nop
		if(statusSetupTime != SET_DATE || (statusSetupTime == SET_DATE && timeBlink >= 5)){
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <DisplayTime+0x524>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d107      	bne.n	8001a7e <DisplayTime+0x4ae>
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <DisplayTime+0x524>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d112      	bne.n	8001a9c <DisplayTime+0x4cc>
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <DisplayTime+0x528>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	dd0e      	ble.n	8001a9c <DisplayTime+0x4cc>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <DisplayTime+0x560>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2318      	movs	r3, #24
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2302      	movs	r3, #2
 8001a94:	2182      	movs	r1, #130	; 0x82
 8001a96:	2046      	movs	r0, #70	; 0x46
 8001a98:	f7ff fa4a 	bl	8000f30 <lcd_ShowIntNum>
		}
		if(statusSetupTime != SET_YEAR || (statusSetupTime == SET_YEAR && timeBlink >= 5)){
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <DisplayTime+0x524>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d107      	bne.n	8001ab4 <DisplayTime+0x4e4>
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <DisplayTime+0x524>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b07      	cmp	r3, #7
 8001aaa:	d11f      	bne.n	8001aec <DisplayTime+0x51c>
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <DisplayTime+0x528>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	dd1b      	ble.n	8001aec <DisplayTime+0x51c>
			lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 8001ab4:	2318      	movs	r3, #24
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	2214      	movs	r2, #20
 8001ac6:	2182      	movs	r1, #130	; 0x82
 8001ac8:	2096      	movs	r0, #150	; 0x96
 8001aca:	f7ff fa31 	bl	8000f30 <lcd_ShowIntNum>
			lcd_ShowIntNum(176, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <DisplayTime+0x564>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2318      	movs	r3, #24
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	2182      	movs	r1, #130	; 0x82
 8001ae6:	20b0      	movs	r0, #176	; 0xb0
 8001ae8:	f7ff fa22 	bl	8000f30 <lcd_ShowIntNum>
		}

	}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000030 	.word	0x20000030
 8001af8:	20000034 	.word	0x20000034
 8001afc:	2000006a 	.word	0x2000006a
 8001b00:	08005d98 	.word	0x08005d98
 8001b04:	08005d9c 	.word	0x08005d9c
 8001b08:	08005da0 	.word	0x08005da0
 8001b0c:	08005da4 	.word	0x08005da4
 8001b10:	08005da8 	.word	0x08005da8
 8001b14:	08005dac 	.word	0x08005dac
 8001b18:	08005db0 	.word	0x08005db0
 8001b1c:	08005db4 	.word	0x08005db4
 8001b20:	08005db8 	.word	0x08005db8
 8001b24:	08005dbc 	.word	0x08005dbc
 8001b28:	08005dc0 	.word	0x08005dc0
 8001b2c:	08005dc4 	.word	0x08005dc4
 8001b30:	20000067 	.word	0x20000067
 8001b34:	20000065 	.word	0x20000065

08001b38 <SetUpTime>:

	void SetUpTime()
	{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
        if (statusSystem == MODE_1)
 8001b3c:	4b8a      	ldr	r3, [pc, #552]	; (8001d68 <SetUpTime+0x230>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <SetUpTime+0x26>
        {
            if (IsButtonMode())
 8001b44:	f000 f936 	bl	8001db4 <IsButtonMode>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 810a 	beq.w	8001d64 <SetUpTime+0x22c>
            {
                statusSystem = MODE_2;
 8001b50:	4b85      	ldr	r3, [pc, #532]	; (8001d68 <SetUpTime+0x230>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
                statusSetupTime = SET_HOUR;
 8001b56:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <SetUpTime+0x234>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
        	            break;
        	    }
            }
        }

	}
 8001b5c:	e102      	b.n	8001d64 <SetUpTime+0x22c>
        else if (statusSystem == MODE_2)
 8001b5e:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <SetUpTime+0x230>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 8085 	bne.w	8001c72 <SetUpTime+0x13a>
            if (IsButtonMode())
 8001b68:	f000 f924 	bl	8001db4 <IsButtonMode>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d012      	beq.n	8001b98 <SetUpTime+0x60>
            	pre_hour = ds3231_hours;
 8001b72:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <SetUpTime+0x238>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <SetUpTime+0x23c>)
 8001b7a:	601a      	str	r2, [r3, #0]
            	pre_min = ds3231_min;
 8001b7c:	4b7e      	ldr	r3, [pc, #504]	; (8001d78 <SetUpTime+0x240>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b7e      	ldr	r3, [pc, #504]	; (8001d7c <SetUpTime+0x244>)
 8001b84:	601a      	str	r2, [r3, #0]
            	pre_sec = ds3231_sec;
 8001b86:	4b7e      	ldr	r3, [pc, #504]	; (8001d80 <SetUpTime+0x248>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <SetUpTime+0x24c>)
 8001b8e:	601a      	str	r2, [r3, #0]
                statusSystem = MODE_3;
 8001b90:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <SetUpTime+0x230>)
 8001b92:	2202      	movs	r2, #2
 8001b94:	601a      	str	r2, [r3, #0]
	}
 8001b96:	e0e5      	b.n	8001d64 <SetUpTime+0x22c>
        	    switch(statusSetupTime)
 8001b98:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <SetUpTime+0x234>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d863      	bhi.n	8001c6a <SetUpTime+0x132>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <SetUpTime+0x70>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001bc5 	.word	0x08001bc5
 8001bac:	08001bdd 	.word	0x08001bdd
 8001bb0:	08001bf5 	.word	0x08001bf5
 8001bb4:	08001c0d 	.word	0x08001c0d
 8001bb8:	08001c25 	.word	0x08001c25
 8001bbc:	08001c3d 	.word	0x08001c3d
 8001bc0:	08001c55 	.word	0x08001c55
        	            SetHour();
 8001bc4:	f000 f93e 	bl	8001e44 <SetHour>
        	            if(IsButtonSet())
 8001bc8:	f000 f8e4 	bl	8001d94 <IsButtonSet>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80b3 	beq.w	8001d3a <SetUpTime+0x202>
        	                statusSetupTime = SET_MINUTE;
 8001bd4:	4b65      	ldr	r3, [pc, #404]	; (8001d6c <SetUpTime+0x234>)
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	601a      	str	r2, [r3, #0]
        	            break;
 8001bda:	e0ae      	b.n	8001d3a <SetUpTime+0x202>
        	            SetMinute();
 8001bdc:	f000 f98a 	bl	8001ef4 <SetMinute>
        	            if(IsButtonSet())
 8001be0:	f000 f8d8 	bl	8001d94 <IsButtonSet>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a9 	beq.w	8001d3e <SetUpTime+0x206>
        	                statusSetupTime = SET_SEC;
 8001bec:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <SetUpTime+0x234>)
 8001bee:	2203      	movs	r2, #3
 8001bf0:	601a      	str	r2, [r3, #0]
        	            break;
 8001bf2:	e0a4      	b.n	8001d3e <SetUpTime+0x206>
        	        	SetSecond();
 8001bf4:	f000 f9d6 	bl	8001fa4 <SetSecond>
        	            if(IsButtonSet())
 8001bf8:	f000 f8cc 	bl	8001d94 <IsButtonSet>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 809f 	beq.w	8001d42 <SetUpTime+0x20a>
        	                statusSetupTime = SET_DAY;
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <SetUpTime+0x234>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	601a      	str	r2, [r3, #0]
        	            break;
 8001c0a:	e09a      	b.n	8001d42 <SetUpTime+0x20a>
        	            SetDay();
 8001c0c:	f000 fa22 	bl	8002054 <SetDay>
        	            if(IsButtonSet())
 8001c10:	f000 f8c0 	bl	8001d94 <IsButtonSet>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8095 	beq.w	8001d46 <SetUpTime+0x20e>
        	                statusSetupTime = SET_DATE;
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <SetUpTime+0x234>)
 8001c1e:	2205      	movs	r2, #5
 8001c20:	601a      	str	r2, [r3, #0]
        	            break;
 8001c22:	e090      	b.n	8001d46 <SetUpTime+0x20e>
        	            SetDate();
 8001c24:	f000 fa76 	bl	8002114 <SetDate>
        	            if(IsButtonSet())
 8001c28:	f000 f8b4 	bl	8001d94 <IsButtonSet>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 808b 	beq.w	8001d4a <SetUpTime+0x212>
        	                statusSetupTime = SET_MONTH;
 8001c34:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <SetUpTime+0x234>)
 8001c36:	2206      	movs	r2, #6
 8001c38:	601a      	str	r2, [r3, #0]
        	            break;
 8001c3a:	e086      	b.n	8001d4a <SetUpTime+0x212>
        	            SetMonth();
 8001c3c:	f000 faca 	bl	80021d4 <SetMonth>
        	            if(IsButtonSet())
 8001c40:	f000 f8a8 	bl	8001d94 <IsButtonSet>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8081 	beq.w	8001d4e <SetUpTime+0x216>
        	                statusSetupTime = SET_YEAR;
 8001c4c:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <SetUpTime+0x234>)
 8001c4e:	2207      	movs	r2, #7
 8001c50:	601a      	str	r2, [r3, #0]
        	            break;
 8001c52:	e07c      	b.n	8001d4e <SetUpTime+0x216>
        	            SetYear();
 8001c54:	f000 fb1e 	bl	8002294 <SetYear>
        	            if(IsButtonSet())
 8001c58:	f000 f89c 	bl	8001d94 <IsButtonSet>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d077      	beq.n	8001d52 <SetUpTime+0x21a>
        	                statusSetupTime = SET_HOUR;
 8001c62:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <SetUpTime+0x234>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
        	            break;
 8001c68:	e073      	b.n	8001d52 <SetUpTime+0x21a>
        	            statusSetupTime = SET_HOUR;
 8001c6a:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <SetUpTime+0x234>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
        	            break;
 8001c70:	e078      	b.n	8001d64 <SetUpTime+0x22c>
        else if (statusSystem == MODE_3)
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <SetUpTime+0x230>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d16d      	bne.n	8001d56 <SetUpTime+0x21e>
            if (IsButtonMode())
 8001c7a:	f000 f89b 	bl	8001db4 <IsButtonMode>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02a      	beq.n	8001cda <SetUpTime+0x1a2>
                statusSystem = MODE_1;
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <SetUpTime+0x230>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
                set_hour = ds3231_hours;
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <SetUpTime+0x238>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <SetUpTime+0x250>)
 8001c92:	601a      	str	r2, [r3, #0]
                set_min = ds3231_min;
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <SetUpTime+0x240>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b3c      	ldr	r3, [pc, #240]	; (8001d8c <SetUpTime+0x254>)
 8001c9c:	601a      	str	r2, [r3, #0]
                set_sec = ds3231_sec;
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <SetUpTime+0x248>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <SetUpTime+0x258>)
 8001ca6:	601a      	str	r2, [r3, #0]
                ds3231_Write(ADDRESS_HOUR, pre_hour);
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <SetUpTime+0x23c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f7fe fcb5 	bl	8000620 <ds3231_Write>
                ds3231_Write(ADDRESS_MIN, pre_min);
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <SetUpTime+0x244>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7fe fcae 	bl	8000620 <ds3231_Write>
                ds3231_Write(ADDRESS_SEC, pre_sec);
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <SetUpTime+0x24c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7fe fca7 	bl	8000620 <ds3231_Write>
                statusSetupTime = INIT_SYSTEM;
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <SetUpTime+0x234>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
	}
 8001cd8:	e044      	b.n	8001d64 <SetUpTime+0x22c>
        	    switch(statusSetupTime)
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <SetUpTime+0x234>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d01c      	beq.n	8001d1c <SetUpTime+0x1e4>
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	dc25      	bgt.n	8001d32 <SetUpTime+0x1fa>
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d002      	beq.n	8001cf0 <SetUpTime+0x1b8>
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d00b      	beq.n	8001d06 <SetUpTime+0x1ce>
 8001cee:	e020      	b.n	8001d32 <SetUpTime+0x1fa>
        	            SetHour();
 8001cf0:	f000 f8a8 	bl	8001e44 <SetHour>
        	            if(IsButtonSet())
 8001cf4:	f000 f84e 	bl	8001d94 <IsButtonSet>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d02d      	beq.n	8001d5a <SetUpTime+0x222>
        	                statusSetupTime = SET_MINUTE;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <SetUpTime+0x234>)
 8001d00:	2202      	movs	r2, #2
 8001d02:	601a      	str	r2, [r3, #0]
        	            break;
 8001d04:	e029      	b.n	8001d5a <SetUpTime+0x222>
        	            SetMinute();
 8001d06:	f000 f8f5 	bl	8001ef4 <SetMinute>
        	            if(IsButtonSet())
 8001d0a:	f000 f843 	bl	8001d94 <IsButtonSet>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d024      	beq.n	8001d5e <SetUpTime+0x226>
        	                statusSetupTime = SET_SEC;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <SetUpTime+0x234>)
 8001d16:	2203      	movs	r2, #3
 8001d18:	601a      	str	r2, [r3, #0]
        	            break;
 8001d1a:	e020      	b.n	8001d5e <SetUpTime+0x226>
        	        	SetSecond();
 8001d1c:	f000 f942 	bl	8001fa4 <SetSecond>
        	            if(IsButtonSet())
 8001d20:	f000 f838 	bl	8001d94 <IsButtonSet>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01b      	beq.n	8001d62 <SetUpTime+0x22a>
        	                statusSetupTime = SET_HOUR;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <SetUpTime+0x234>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
        	            break;
 8001d30:	e017      	b.n	8001d62 <SetUpTime+0x22a>
        	            statusSetupTime = SET_HOUR;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <SetUpTime+0x234>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
        	            break;
 8001d38:	e014      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d3a:	bf00      	nop
 8001d3c:	e012      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d3e:	bf00      	nop
 8001d40:	e010      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d42:	bf00      	nop
 8001d44:	e00e      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d46:	bf00      	nop
 8001d48:	e00c      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d4a:	bf00      	nop
 8001d4c:	e00a      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d4e:	bf00      	nop
 8001d50:	e008      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d52:	bf00      	nop
 8001d54:	e006      	b.n	8001d64 <SetUpTime+0x22c>
            }
 8001d56:	bf00      	nop
 8001d58:	e004      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d5a:	bf00      	nop
 8001d5c:	e002      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d5e:	bf00      	nop
 8001d60:	e000      	b.n	8001d64 <SetUpTime+0x22c>
        	            break;
 8001d62:	bf00      	nop
	}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000038 	.word	0x20000038
 8001d6c:	20000030 	.word	0x20000030
 8001d70:	20000069 	.word	0x20000069
 8001d74:	20000158 	.word	0x20000158
 8001d78:	20000066 	.word	0x20000066
 8001d7c:	20000154 	.word	0x20000154
 8001d80:	20000064 	.word	0x20000064
 8001d84:	20000164 	.word	0x20000164
 8001d88:	2000015c 	.word	0x2000015c
 8001d8c:	20000168 	.word	0x20000168
 8001d90:	20000160 	.word	0x20000160

08001d94 <IsButtonSet>:
	//
    unsigned char IsButtonSet()
	{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
	    if (button_count[12] == 1)
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <IsButtonSet+0x1c>)
 8001d9a:	8b1b      	ldrh	r3, [r3, #24]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <IsButtonSet+0x10>
	        return 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <IsButtonSet+0x12>
	    else
	        return 0;
 8001da4:	2300      	movs	r3, #0
	}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20000044 	.word	0x20000044

08001db4 <IsButtonMode>:
	unsigned char IsButtonMode()
	{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	    if (button_count[14] == 1)
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <IsButtonMode+0x1c>)
 8001dba:	8b9b      	ldrh	r3, [r3, #28]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <IsButtonMode+0x10>
	        return 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <IsButtonMode+0x12>
	    else
	        return 0;
 8001dc4:	2300      	movs	r3, #0
	}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	20000044 	.word	0x20000044

08001dd4 <IsButtonUp>:

	unsigned char IsButtonUp()
	{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	    if ((button_count[3] == 1) || (button_count[3] >= 10 && button_count[3]%4 == 0))
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <IsButtonUp+0x34>)
 8001dda:	88db      	ldrh	r3, [r3, #6]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d00a      	beq.n	8001df6 <IsButtonUp+0x22>
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <IsButtonUp+0x34>)
 8001de2:	88db      	ldrh	r3, [r3, #6]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d908      	bls.n	8001dfa <IsButtonUp+0x26>
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <IsButtonUp+0x34>)
 8001dea:	88db      	ldrh	r3, [r3, #6]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <IsButtonUp+0x26>
	        return 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <IsButtonUp+0x28>
	    else
	        return 0;
 8001dfa:	2300      	movs	r3, #0
	}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000044 	.word	0x20000044

08001e0c <IsButtonDown>:

	unsigned char IsButtonDown()
	{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	    if ((button_count[7] == 1) || (button_count[7] >= 10 && button_count[7]%4 == 0))
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <IsButtonDown+0x34>)
 8001e12:	89db      	ldrh	r3, [r3, #14]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d00a      	beq.n	8001e2e <IsButtonDown+0x22>
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <IsButtonDown+0x34>)
 8001e1a:	89db      	ldrh	r3, [r3, #14]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d908      	bls.n	8001e32 <IsButtonDown+0x26>
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <IsButtonDown+0x34>)
 8001e22:	89db      	ldrh	r3, [r3, #14]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <IsButtonDown+0x26>
	        return 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <IsButtonDown+0x28>
	    else
	        return 0;
 8001e32:	2300      	movs	r3, #0
	}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000044 	.word	0x20000044

08001e44 <SetHour>:

	void SetHour()
	{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af04      	add	r7, sp, #16
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
	    timeBlink = (timeBlink + 1)%20;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <SetHour+0xa0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <SetHour+0xa4>)
 8001e52:	fb83 2301 	smull	r2, r3, r3, r1
 8001e56:	10da      	asrs	r2, r3, #3
 8001e58:	17cb      	asrs	r3, r1, #31
 8001e5a:	1ad2      	subs	r2, r2, r3
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	1aca      	subs	r2, r1, r3
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <SetHour+0xa0>)
 8001e68:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <SetHour+0xa0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	dc0c      	bgt.n	8001e8c <SetHour+0x48>
	    	lcd_ShowString(70, 100, "  ", GREEN, BLACK, 24, 0);
 8001e72:	2300      	movs	r3, #0
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	2318      	movs	r3, #24
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e82:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <SetHour+0xa8>)
 8001e84:	2164      	movs	r1, #100	; 0x64
 8001e86:	2046      	movs	r0, #70	; 0x46
 8001e88:	f7ff f8d0 	bl	800102c <lcd_ShowString>
	    if(IsButtonUp())
 8001e8c:	f7ff ffa2 	bl	8001dd4 <IsButtonUp>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <SetHour+0x78>
	    {
	        ds3231_hours++;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <SetHour+0xac>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <SetHour+0xac>)
 8001ea0:	701a      	strb	r2, [r3, #0]
	        if(ds3231_hours > 23)
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <SetHour+0xac>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b17      	cmp	r3, #23
 8001ea8:	d902      	bls.n	8001eb0 <SetHour+0x6c>
	            ds3231_hours = 0;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <SetHour+0xac>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <SetHour+0xac>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f7fe fbb2 	bl	8000620 <ds3231_Write>
	    }
	    if(IsButtonDown())
 8001ebc:	f7ff ffa6 	bl	8001e0c <IsButtonDown>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <SetHour+0x9a>
	    {
	        ds3231_hours--;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <SetHour+0xac>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <SetHour+0xac>)
 8001ed0:	701a      	strb	r2, [r3, #0]
	        if(ds3231_hours < 0)
	            ds3231_hours = 23;
	        ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <SetHour+0xac>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7fe fba1 	bl	8000620 <ds3231_Write>
	    }
	}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000034 	.word	0x20000034
 8001ee8:	66666667 	.word	0x66666667
 8001eec:	08005dc8 	.word	0x08005dc8
 8001ef0:	20000069 	.word	0x20000069

08001ef4 <SetMinute>:

	void SetMinute()
	{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <SetMinute+0xa0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1c59      	adds	r1, r3, #1
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <SetMinute+0xa4>)
 8001f02:	fb83 2301 	smull	r2, r3, r3, r1
 8001f06:	10da      	asrs	r2, r3, #3
 8001f08:	17cb      	asrs	r3, r1, #31
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	1aca      	subs	r2, r1, r3
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <SetMinute+0xa0>)
 8001f18:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <SetMinute+0xa0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	dc0c      	bgt.n	8001f3c <SetMinute+0x48>
	    	lcd_ShowString(110, 100, "  ", GREEN, BLACK, 24, 0);
 8001f22:	2300      	movs	r3, #0
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2318      	movs	r3, #24
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f32:	4a1a      	ldr	r2, [pc, #104]	; (8001f9c <SetMinute+0xa8>)
 8001f34:	2164      	movs	r1, #100	; 0x64
 8001f36:	206e      	movs	r0, #110	; 0x6e
 8001f38:	f7ff f878 	bl	800102c <lcd_ShowString>
	    if(IsButtonUp())
 8001f3c:	f7ff ff4a 	bl	8001dd4 <IsButtonUp>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <SetMinute+0x78>
	    {
	        ds3231_min++;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <SetMinute+0xac>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <SetMinute+0xac>)
 8001f50:	701a      	strb	r2, [r3, #0]
	        if(ds3231_min > 59)
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <SetMinute+0xac>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b3b      	cmp	r3, #59	; 0x3b
 8001f58:	d902      	bls.n	8001f60 <SetMinute+0x6c>
	            ds3231_min = 0;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <SetMinute+0xac>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <SetMinute+0xac>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7fe fb5a 	bl	8000620 <ds3231_Write>
	    }
	    if(IsButtonDown())
 8001f6c:	f7ff ff4e 	bl	8001e0c <IsButtonDown>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <SetMinute+0x9a>
	    {
	    	ds3231_min--;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <SetMinute+0xac>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <SetMinute+0xac>)
 8001f80:	701a      	strb	r2, [r3, #0]
	        if(ds3231_min < 0)
	        	ds3231_min = 59;
	        ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <SetMinute+0xac>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	4619      	mov	r1, r3
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7fe fb49 	bl	8000620 <ds3231_Write>
	    }

	}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000034 	.word	0x20000034
 8001f98:	66666667 	.word	0x66666667
 8001f9c:	08005dc8 	.word	0x08005dc8
 8001fa0:	20000066 	.word	0x20000066

08001fa4 <SetSecond>:
	void SetSecond()
	{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <SetSecond+0xa0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1c59      	adds	r1, r3, #1
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <SetSecond+0xa4>)
 8001fb2:	fb83 2301 	smull	r2, r3, r3, r1
 8001fb6:	10da      	asrs	r2, r3, #3
 8001fb8:	17cb      	asrs	r3, r1, #31
 8001fba:	1ad2      	subs	r2, r2, r3
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	1aca      	subs	r2, r1, r3
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <SetSecond+0xa0>)
 8001fc8:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <SetSecond+0xa0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	dc0c      	bgt.n	8001fec <SetSecond+0x48>
	    	lcd_ShowString(150, 100, "  ", GREEN, BLACK, 24, 0);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	2318      	movs	r3, #24
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <SetSecond+0xa8>)
 8001fe4:	2164      	movs	r1, #100	; 0x64
 8001fe6:	2096      	movs	r0, #150	; 0x96
 8001fe8:	f7ff f820 	bl	800102c <lcd_ShowString>
	    if(IsButtonUp())
 8001fec:	f7ff fef2 	bl	8001dd4 <IsButtonUp>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <SetSecond+0x78>
	    {
	    	ds3231_sec++;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <SetSecond+0xac>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <SetSecond+0xac>)
 8002000:	701a      	strb	r2, [r3, #0]
	        if(ds3231_sec > 59)
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <SetSecond+0xac>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b3b      	cmp	r3, #59	; 0x3b
 8002008:	d902      	bls.n	8002010 <SetSecond+0x6c>
	        	ds3231_sec = 0;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <SetSecond+0xac>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <SetSecond+0xac>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	2000      	movs	r0, #0
 8002018:	f7fe fb02 	bl	8000620 <ds3231_Write>
	    }
	    if(IsButtonDown())
 800201c:	f7ff fef6 	bl	8001e0c <IsButtonDown>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <SetSecond+0x9a>
	    {
	    	ds3231_sec--;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <SetSecond+0xac>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3b01      	subs	r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <SetSecond+0xac>)
 8002030:	701a      	strb	r2, [r3, #0]
	        if(ds3231_sec < 0)
	        	ds3231_sec = 59;
	        ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <SetSecond+0xac>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	2000      	movs	r0, #0
 800203a:	f7fe faf1 	bl	8000620 <ds3231_Write>
	    }

	}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000034 	.word	0x20000034
 8002048:	66666667 	.word	0x66666667
 800204c:	08005dc8 	.word	0x08005dc8
 8002050:	20000064 	.word	0x20000064

08002054 <SetDay>:

	void SetDay()
	{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <SetDay+0xb0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1c59      	adds	r1, r3, #1
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <SetDay+0xb4>)
 8002062:	fb83 2301 	smull	r2, r3, r3, r1
 8002066:	10da      	asrs	r2, r3, #3
 8002068:	17cb      	asrs	r3, r1, #31
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	1aca      	subs	r2, r1, r3
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <SetDay+0xb0>)
 8002078:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <SetDay+0xb0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b04      	cmp	r3, #4
 8002080:	dc0c      	bgt.n	800209c <SetDay+0x48>
	    	lcd_ShowString(20, 130, "  ", GREEN, BLACK, 24, 0);
 8002082:	2300      	movs	r3, #0
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	2318      	movs	r3, #24
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2300      	movs	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <SetDay+0xb8>)
 8002094:	2182      	movs	r1, #130	; 0x82
 8002096:	2014      	movs	r0, #20
 8002098:	f7fe ffc8 	bl	800102c <lcd_ShowString>
	    if(IsButtonUp())
 800209c:	f7ff fe9a 	bl	8001dd4 <IsButtonUp>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <SetDay+0x78>
	    {
	    	ds3231_day++;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <SetDay+0xbc>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <SetDay+0xbc>)
 80020b0:	701a      	strb	r2, [r3, #0]
	        if(ds3231_day > 7)
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <SetDay+0xbc>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b07      	cmp	r3, #7
 80020b8:	d902      	bls.n	80020c0 <SetDay+0x6c>
	        	ds3231_day = 1;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <SetDay+0xbc>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DAY, ds3231_day);
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <SetDay+0xbc>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	2003      	movs	r0, #3
 80020c8:	f7fe faaa 	bl	8000620 <ds3231_Write>
	    }
	    if(IsButtonDown())
 80020cc:	f7ff fe9e 	bl	8001e0c <IsButtonDown>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d012      	beq.n	80020fc <SetDay+0xa8>
	    {
	    	ds3231_day--;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <SetDay+0xbc>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <SetDay+0xbc>)
 80020e0:	701a      	strb	r2, [r3, #0]
	        if(ds3231_day < 1)
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <SetDay+0xbc>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <SetDay+0x9c>
	        	ds3231_day = 7;
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <SetDay+0xbc>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DAY, ds3231_day);
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <SetDay+0xbc>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	2003      	movs	r0, #3
 80020f8:	f7fe fa92 	bl	8000620 <ds3231_Write>
	    }
	}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000034 	.word	0x20000034
 8002108:	66666667 	.word	0x66666667
 800210c:	08005dc8 	.word	0x08005dc8
 8002110:	20000068 	.word	0x20000068

08002114 <SetDate>:

	void SetDate()
	{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <SetDate+0xb0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <SetDate+0xb4>)
 8002122:	fb83 2301 	smull	r2, r3, r3, r1
 8002126:	10da      	asrs	r2, r3, #3
 8002128:	17cb      	asrs	r3, r1, #31
 800212a:	1ad2      	subs	r2, r2, r3
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	1aca      	subs	r2, r1, r3
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <SetDate+0xb0>)
 8002138:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <SetDate+0xb0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b04      	cmp	r3, #4
 8002140:	dc0c      	bgt.n	800215c <SetDate+0x48>
	    	lcd_ShowString(70, 130, "  ", GREEN, BLACK, 24, 0);
 8002142:	2300      	movs	r3, #0
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2318      	movs	r3, #24
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2300      	movs	r3, #0
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002152:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <SetDate+0xb8>)
 8002154:	2182      	movs	r1, #130	; 0x82
 8002156:	2046      	movs	r0, #70	; 0x46
 8002158:	f7fe ff68 	bl	800102c <lcd_ShowString>
	    if(IsButtonUp())
 800215c:	f7ff fe3a 	bl	8001dd4 <IsButtonUp>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <SetDate+0x78>
	    {
	    	ds3231_date++;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <SetDate+0xbc>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <SetDate+0xbc>)
 8002170:	701a      	strb	r2, [r3, #0]
	        if(ds3231_date > 31)
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <SetDate+0xbc>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b1f      	cmp	r3, #31
 8002178:	d902      	bls.n	8002180 <SetDate+0x6c>
	        	ds3231_date = 1;
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <SetDate+0xbc>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DATE, ds3231_date);
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <SetDate+0xbc>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	2004      	movs	r0, #4
 8002188:	f7fe fa4a 	bl	8000620 <ds3231_Write>
	    }
	    if(IsButtonDown())
 800218c:	f7ff fe3e 	bl	8001e0c <IsButtonDown>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <SetDate+0xa8>
	    {
	    	ds3231_date--;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <SetDate+0xbc>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3b01      	subs	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <SetDate+0xbc>)
 80021a0:	701a      	strb	r2, [r3, #0]
	        if(ds3231_date < 1)
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <SetDate+0xbc>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <SetDate+0x9c>
	        	ds3231_date = 31;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <SetDate+0xbc>)
 80021ac:	221f      	movs	r2, #31
 80021ae:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_DATE, ds3231_date);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <SetDate+0xbc>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	2004      	movs	r0, #4
 80021b8:	f7fe fa32 	bl	8000620 <ds3231_Write>
	    }
	}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000034 	.word	0x20000034
 80021c8:	66666667 	.word	0x66666667
 80021cc:	08005dc8 	.word	0x08005dc8
 80021d0:	20000067 	.word	0x20000067

080021d4 <SetMonth>:

	void SetMonth()
	{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <SetMonth+0xb0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1c59      	adds	r1, r3, #1
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <SetMonth+0xb4>)
 80021e2:	fb83 2301 	smull	r2, r3, r3, r1
 80021e6:	10da      	asrs	r2, r3, #3
 80021e8:	17cb      	asrs	r3, r1, #31
 80021ea:	1ad2      	subs	r2, r2, r3
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	1aca      	subs	r2, r1, r3
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <SetMonth+0xb0>)
 80021f8:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <SetMonth+0xb0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b04      	cmp	r3, #4
 8002200:	dc0c      	bgt.n	800221c <SetMonth+0x48>
	    	lcd_ShowString(105, 130, "  ", GREEN, BLACK, 24, 0);
 8002202:	2300      	movs	r3, #0
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2318      	movs	r3, #24
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2300      	movs	r3, #0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002212:	4a1e      	ldr	r2, [pc, #120]	; (800228c <SetMonth+0xb8>)
 8002214:	2182      	movs	r1, #130	; 0x82
 8002216:	2069      	movs	r0, #105	; 0x69
 8002218:	f7fe ff08 	bl	800102c <lcd_ShowString>
	    if(IsButtonUp())
 800221c:	f7ff fdda 	bl	8001dd4 <IsButtonUp>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <SetMonth+0x78>
	    {
	    	ds3231_month++;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <SetMonth+0xbc>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <SetMonth+0xbc>)
 8002230:	701a      	strb	r2, [r3, #0]
	        if(ds3231_month > 12)
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <SetMonth+0xbc>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d902      	bls.n	8002240 <SetMonth+0x6c>
	        	ds3231_month = 1;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <SetMonth+0xbc>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <SetMonth+0xbc>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	2005      	movs	r0, #5
 8002248:	f7fe f9ea 	bl	8000620 <ds3231_Write>
	    }
	    if(IsButtonDown())
 800224c:	f7ff fdde 	bl	8001e0c <IsButtonDown>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <SetMonth+0xa8>
	    {
	    	ds3231_month--;
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <SetMonth+0xbc>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	3b01      	subs	r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <SetMonth+0xbc>)
 8002260:	701a      	strb	r2, [r3, #0]
	        if(ds3231_month < 1)
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <SetMonth+0xbc>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <SetMonth+0x9c>
	        	ds3231_month = 12;
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <SetMonth+0xbc>)
 800226c:	220c      	movs	r2, #12
 800226e:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <SetMonth+0xbc>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	2005      	movs	r0, #5
 8002278:	f7fe f9d2 	bl	8000620 <ds3231_Write>
	    }
	}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000034 	.word	0x20000034
 8002288:	66666667 	.word	0x66666667
 800228c:	08005dc8 	.word	0x08005dc8
 8002290:	2000006a 	.word	0x2000006a

08002294 <SetYear>:

	void SetYear()
	{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af04      	add	r7, sp, #16
		timeBlink = (timeBlink + 1)%20;
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <SetYear+0xa0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <SetYear+0xa4>)
 80022a2:	fb83 2301 	smull	r2, r3, r3, r1
 80022a6:	10da      	asrs	r2, r3, #3
 80022a8:	17cb      	asrs	r3, r1, #31
 80022aa:	1ad2      	subs	r2, r2, r3
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	1aca      	subs	r2, r1, r3
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <SetYear+0xa0>)
 80022b8:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5)
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <SetYear+0xa0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	dc0c      	bgt.n	80022dc <SetYear+0x48>
	    	lcd_ShowString(176, 130, "  ", GREEN, BLACK, 24, 0);
 80022c2:	2300      	movs	r3, #0
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	2318      	movs	r3, #24
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2300      	movs	r3, #0
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <SetYear+0xa8>)
 80022d4:	2182      	movs	r1, #130	; 0x82
 80022d6:	20b0      	movs	r0, #176	; 0xb0
 80022d8:	f7fe fea8 	bl	800102c <lcd_ShowString>
	    if(IsButtonUp())
 80022dc:	f7ff fd7a 	bl	8001dd4 <IsButtonUp>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <SetYear+0x78>
	    {
	    	ds3231_year++;
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <SetYear+0xac>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <SetYear+0xac>)
 80022f0:	701a      	strb	r2, [r3, #0]
	        if(ds3231_year > 99)
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <SetYear+0xac>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b63      	cmp	r3, #99	; 0x63
 80022f8:	d902      	bls.n	8002300 <SetYear+0x6c>
	        	ds3231_year = 0;
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <SetYear+0xac>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
	        ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <SetYear+0xac>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	2006      	movs	r0, #6
 8002308:	f7fe f98a 	bl	8000620 <ds3231_Write>
	    }
	    if(IsButtonDown())
 800230c:	f7ff fd7e 	bl	8001e0c <IsButtonDown>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <SetYear+0x9a>
	    {
	    	ds3231_year--;
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <SetYear+0xac>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <SetYear+0xac>)
 8002320:	701a      	strb	r2, [r3, #0]
	        if(ds3231_year < 0)
	        	ds3231_year = 99;
	        ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <SetYear+0xac>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	2006      	movs	r0, #6
 800232a:	f7fe f979 	bl	8000620 <ds3231_Write>
	    }
	}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000034 	.word	0x20000034
 8002338:	66666667 	.word	0x66666667
 800233c:	08005dc8 	.word	0x08005dc8
 8002340:	20000065 	.word	0x20000065

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234c:	e7fe      	b.n	800234c <Error_Handler+0x8>
	...

08002350 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <timer_init+0x10>)
 8002356:	f002 ffd7 	bl	8005308 <HAL_TIM_Base_Start_IT>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200001c4 	.word	0x200001c4

08002364 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <setTimer2+0x2c>)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <setTimer2+0x2c>)
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <setTimer2+0x30>)
 800237a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <setTimer2+0x34>)
 800237e:	2200      	movs	r2, #0
 8002380:	801a      	strh	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000040 	.word	0x20000040
 8002394:	2000003e 	.word	0x2000003e
 8002398:	2000003c 	.word	0x2000003c

0800239c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d114      	bne.n	80023d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(timer2_counter > 0){
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023c0:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023d6:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
//		led7_Scan();
	}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	2000003e 	.word	0x2000003e
 80023e8:	2000003c 	.word	0x2000003c
 80023ec:	20000040 	.word	0x20000040

080023f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_SPI1_Init+0x64>)
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <MX_SPI1_Init+0x68>)
 80023f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_SPI1_Init+0x64>)
 80023fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_SPI1_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_SPI1_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_SPI1_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_SPI1_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_SPI1_Init+0x64>)
 800241c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002420:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_SPI1_Init+0x64>)
 8002424:	2200      	movs	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <MX_SPI1_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_SPI1_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <MX_SPI1_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_SPI1_Init+0x64>)
 800243c:	220a      	movs	r2, #10
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_SPI1_Init+0x64>)
 8002442:	f002 fa61 	bl	8004908 <HAL_SPI_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800244c:	f7ff ff7a 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000016c 	.word	0x2000016c
 8002458:	40013000 	.word	0x40013000

0800245c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_SPI_MspInit+0x84>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_SPI_MspInit+0x88>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_SPI_MspInit+0x88>)
 8002488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_SPI_MspInit+0x88>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_SPI_MspInit+0x88>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_SPI_MspInit+0x88>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_SPI_MspInit+0x88>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80024b6:	2338      	movs	r3, #56	; 0x38
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024c6:	2305      	movs	r3, #5
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <HAL_SPI_MspInit+0x8c>)
 80024d2:	f000 fafb 	bl	8002acc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40013000 	.word	0x40013000
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020400 	.word	0x40020400

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_MspInit+0x4c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_MspInit+0x4c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002588:	f000 f94a 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <TIM2_IRQHandler+0x10>)
 8002596:	f002 ff27 	bl	80053e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200001c4 	.word	0x200001c4

080025a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <SystemInit+0x20>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <SystemInit+0x20>)
 80025b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <MX_TIM2_Init+0x94>)
 80025e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <MX_TIM2_Init+0x94>)
 80025ee:	f240 3247 	movw	r2, #839	; 0x347
 80025f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <MX_TIM2_Init+0x94>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <MX_TIM2_Init+0x94>)
 80025fc:	2263      	movs	r2, #99	; 0x63
 80025fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <MX_TIM2_Init+0x94>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <MX_TIM2_Init+0x94>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800260c:	4813      	ldr	r0, [pc, #76]	; (800265c <MX_TIM2_Init+0x94>)
 800260e:	f002 fe2b 	bl	8005268 <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002618:	f7ff fe94 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	4619      	mov	r1, r3
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <MX_TIM2_Init+0x94>)
 800262a:	f002 ffe5 	bl	80055f8 <HAL_TIM_ConfigClockSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002634:	f7ff fe86 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002640:	463b      	mov	r3, r7
 8002642:	4619      	mov	r1, r3
 8002644:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_TIM2_Init+0x94>)
 8002646:	f003 fa01 	bl	8005a4c <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002650:	f7ff fe78 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200001c4 	.word	0x200001c4

08002660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d115      	bne.n	800269e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_TIM_Base_MspInit+0x48>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_TIM_Base_MspInit+0x48>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_TIM_Base_MspInit+0x48>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	201c      	movs	r0, #28
 8002694:	f000 f9e3 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002698:	201c      	movs	r0, #28
 800269a:	f000 f9fc 	bl	8002a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <DEC2BCD+0x44>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	08db      	lsrs	r3, r3, #3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	b258      	sxtb	r0, r3
 80026fa:	79fa      	ldrb	r2, [r7, #7]
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <DEC2BCD+0x44>)
 80026fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002702:	08d9      	lsrs	r1, r3, #3
 8002704:	460b      	mov	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	b25b      	sxtb	r3, r3
 8002712:	4303      	orrs	r3, r0
 8002714:	b25b      	sxtb	r3, r3
 8002716:	b2db      	uxtb	r3, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	cccccccd 	.word	0xcccccccd

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800272c:	480d      	ldr	r0, [pc, #52]	; (8002764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272e:	490e      	ldr	r1, [pc, #56]	; (8002768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002744:	4c0b      	ldr	r4, [pc, #44]	; (8002774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002752:	f7ff ff27 	bl	80025a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002756:	f003 fad9 	bl	8005d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7fe fe4f 	bl	80013fc <main>
  bx  lr    
 800275e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800276c:	08008d74 	.word	0x08008d74
  ldr r2, =_sbss
 8002770:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002774:	20000210 	.word	0x20000210

08002778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC_IRQHandler>
	...

0800277c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_Init+0x40>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_Init+0x40>)
 8002792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_Init+0x40>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a4:	2003      	movs	r0, #3
 80027a6:	f000 f94f 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027aa:	200f      	movs	r0, #15
 80027ac:	f000 f808 	bl	80027c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b0:	f7ff fe9c 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x54>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_InitTick+0x58>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f967 	bl	8002ab2 <HAL_SYSTICK_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00e      	b.n	800280c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d80a      	bhi.n	800280a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f000 f92f 	bl	8002a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <HAL_InitTick+0x5c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000000 	.word	0x20000000
 8002818:	20000008 	.word	0x20000008
 800281c:	20000004 	.word	0x20000004

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000008 	.word	0x20000008
 8002844:	2000020c 	.word	0x2000020c

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	2000020c 	.word	0x2000020c

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000008 	.word	0x20000008

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	; (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff8e 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff29 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff3e 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff8e 	bl	800299c <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5d 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff31 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffa2 	bl	8002a04 <SysTick_Config>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e16b      	b.n	8002dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f040 815a 	bne.w	8002dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d005      	beq.n	8002b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d130      	bne.n	8002b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b54:	2201      	movs	r2, #1
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 0201 	and.w	r2, r3, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d017      	beq.n	8002bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d123      	bne.n	8002c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80b4 	beq.w	8002dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b60      	ldr	r3, [pc, #384]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a5f      	ldr	r2, [pc, #380]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <HAL_GPIO_Init+0x310>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_GPIO_Init+0x314>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a51      	ldr	r2, [pc, #324]	; (8002de4 <HAL_GPIO_Init+0x318>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	; (8002de8 <HAL_GPIO_Init+0x31c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_GPIO_Init+0x32c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x20a>
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	e00e      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x228>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4935      	ldr	r1, [pc, #212]	; (8002ddc <HAL_GPIO_Init+0x310>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d36:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae90 	bls.w	8002ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40021400 	.word	0x40021400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40021c00 	.word	0x40021c00
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	041a      	lsls	r2, r3, #16
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	400b      	ands	r3, r1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e12b      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fe50 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f001 fd06 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a81      	ldr	r2, [pc, #516]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d807      	bhi.n	8002ef0 <HAL_I2C_Init+0x84>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <HAL_I2C_Init+0x278>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e006      	b.n	8002efe <HAL_I2C_Init+0x92>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a7d      	ldr	r2, [pc, #500]	; (80030e8 <HAL_I2C_Init+0x27c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0e7      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a78      	ldr	r2, [pc, #480]	; (80030ec <HAL_I2C_Init+0x280>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d802      	bhi.n	8002f40 <HAL_I2C_Init+0xd4>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e009      	b.n	8002f54 <HAL_I2C_Init+0xe8>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <HAL_I2C_Init+0x284>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	3301      	adds	r3, #1
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	495c      	ldr	r1, [pc, #368]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d819      	bhi.n	8002fa8 <HAL_I2C_Init+0x13c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e59      	subs	r1, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_I2C_Init+0x138>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e59      	subs	r1, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	e051      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e04f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <HAL_I2C_Init+0x168>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Init+0x18e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x196>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e022      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <HAL_I2C_Init+0x1bc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e58      	subs	r0, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	440b      	add	r3, r1
 8003018:	fbb0 f3f3 	udiv	r3, r0, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6911      	ldr	r1, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	000186a0 	.word	0x000186a0
 80030e4:	001e847f 	.word	0x001e847f
 80030e8:	003d08ff 	.word	0x003d08ff
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	460b      	mov	r3, r1
 8003108:	813b      	strh	r3, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800310e:	f7ff fb9b 	bl	8002848 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b20      	cmp	r3, #32
 800311e:	f040 80d9 	bne.w	80032d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2319      	movs	r3, #25
 8003128:	2201      	movs	r2, #1
 800312a:	496d      	ldr	r1, [pc, #436]	; (80032e0 <HAL_I2C_Mem_Write+0x1ec>)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fdad 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
 800313a:	e0cc      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_I2C_Mem_Write+0x56>
 8003146:	2302      	movs	r3, #2
 8003148:	e0c5      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d007      	beq.n	8003170 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2221      	movs	r2, #33	; 0x21
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a4d      	ldr	r2, [pc, #308]	; (80032e4 <HAL_I2C_Mem_Write+0x1f0>)
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b2:	88f8      	ldrh	r0, [r7, #6]
 80031b4:	893a      	ldrh	r2, [r7, #8]
 80031b6:	8979      	ldrh	r1, [r7, #10]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4603      	mov	r3, r0
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fbe4 	bl	8003990 <I2C_RequestMemoryWrite>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d052      	beq.n	8003274 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e081      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fe2e 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d107      	bne.n	80031fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06b      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d11b      	bne.n	8003274 <HAL_I2C_Mem_Write+0x180>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d017      	beq.n	8003274 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1aa      	bne.n	80031d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fe1a 	bl	8003eba <I2C_WaitOnBTFFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b04      	cmp	r3, #4
 8003292:	d107      	bne.n	80032a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e016      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	00100002 	.word	0x00100002
 80032e4:	ffff0000 	.word	0xffff0000

080032e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	817b      	strh	r3, [r7, #10]
 80032fa:	460b      	mov	r3, r1
 80032fc:	813b      	strh	r3, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003302:	f7ff faa1 	bl	8002848 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	f040 8208 	bne.w	8003726 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2319      	movs	r3, #25
 800331c:	2201      	movs	r2, #1
 800331e:	497b      	ldr	r1, [pc, #492]	; (800350c <HAL_I2C_Mem_Read+0x224>)
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fcb3 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	e1fb      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_I2C_Mem_Read+0x56>
 800333a:	2302      	movs	r3, #2
 800333c:	e1f4      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d007      	beq.n	8003364 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2222      	movs	r2, #34	; 0x22
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a5b      	ldr	r2, [pc, #364]	; (8003510 <HAL_I2C_Mem_Read+0x228>)
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033a6:	88f8      	ldrh	r0, [r7, #6]
 80033a8:	893a      	ldrh	r2, [r7, #8]
 80033aa:	8979      	ldrh	r1, [r7, #10]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4603      	mov	r3, r0
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fb80 	bl	8003abc <I2C_RequestMemoryRead>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1b0      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d113      	bne.n	80033f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e184      	b.n	8003700 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d11b      	bne.n	8003436 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e164      	b.n	8003700 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	2b02      	cmp	r3, #2
 800343c:	d11b      	bne.n	8003476 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	e144      	b.n	8003700 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800348c:	e138      	b.n	8003700 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	2b03      	cmp	r3, #3
 8003494:	f200 80f1 	bhi.w	800367a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	2b01      	cmp	r3, #1
 800349e:	d123      	bne.n	80034e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fd49 	bl	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e139      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e6:	e10b      	b.n	8003700 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d14e      	bne.n	800358e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	2200      	movs	r2, #0
 80034f8:	4906      	ldr	r1, [pc, #24]	; (8003514 <HAL_I2C_Mem_Read+0x22c>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fbc6 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e10e      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
 800350a:	bf00      	nop
 800350c:	00100002 	.word	0x00100002
 8003510:	ffff0000 	.word	0xffff0000
 8003514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800358c:	e0b8      	b.n	8003700 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	4966      	ldr	r1, [pc, #408]	; (8003730 <HAL_I2C_Mem_Read+0x448>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fb77 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0bf      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	2200      	movs	r2, #0
 80035f2:	494f      	ldr	r1, [pc, #316]	; (8003730 <HAL_I2C_Mem_Read+0x448>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fb49 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e091      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003678:	e042      	b.n	8003700 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fc5c 	bl	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e04c      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d118      	bne.n	8003700 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	f47f aec2 	bne.w	800348e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003726:	2302      	movs	r3, #2
  }
}
 8003728:	4618      	mov	r0, r3
 800372a:	3728      	adds	r7, #40	; 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	00010004 	.word	0x00010004

08003734 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	460b      	mov	r3, r1
 8003742:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003744:	f7ff f880 	bl	8002848 <HAL_GetTick>
 8003748:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800374a:	2301      	movs	r3, #1
 800374c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	f040 8111 	bne.w	800397e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2319      	movs	r3, #25
 8003762:	2201      	movs	r2, #1
 8003764:	4988      	ldr	r1, [pc, #544]	; (8003988 <HAL_I2C_IsDeviceReady+0x254>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fa90 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	e104      	b.n	8003980 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_I2C_IsDeviceReady+0x50>
 8003780:	2302      	movs	r3, #2
 8003782:	e0fd      	b.n	8003980 <HAL_I2C_IsDeviceReady+0x24c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d007      	beq.n	80037aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2224      	movs	r2, #36	; 0x24
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a70      	ldr	r2, [pc, #448]	; (800398c <HAL_I2C_IsDeviceReady+0x258>)
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa4e 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d103      	bne.n	800380e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0b6      	b.n	8003980 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003820:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003822:	f7ff f811 	bl	8002848 <HAL_GetTick>
 8003826:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003856:	e025      	b.n	80038a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe fff6 	bl	8002848 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <HAL_I2C_IsDeviceReady+0x13a>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22a0      	movs	r2, #160	; 0xa0
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b02      	cmp	r3, #2
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2ba0      	cmp	r3, #160	; 0xa0
 80038ae:	d005      	beq.n	80038bc <HAL_I2C_IsDeviceReady+0x188>
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_I2C_IsDeviceReady+0x188>
 80038b6:	7dbb      	ldrb	r3, [r7, #22]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0cd      	beq.n	8003858 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d129      	bne.n	8003926 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2319      	movs	r3, #25
 80038fe:	2201      	movs	r2, #1
 8003900:	4921      	ldr	r1, [pc, #132]	; (8003988 <HAL_I2C_IsDeviceReady+0x254>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f9c2 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e036      	b.n	8003980 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e02c      	b.n	8003980 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800393e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2319      	movs	r3, #25
 8003946:	2201      	movs	r2, #1
 8003948:	490f      	ldr	r1, [pc, #60]	; (8003988 <HAL_I2C_IsDeviceReady+0x254>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f99e 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e012      	b.n	8003980 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	3301      	adds	r3, #1
 800395e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	f4ff af32 	bcc.w	80037ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	00100002 	.word	0x00100002
 800398c:	ffff0000 	.word	0xffff0000

08003990 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	4603      	mov	r3, r0
 80039a0:	817b      	strh	r3, [r7, #10]
 80039a2:	460b      	mov	r3, r1
 80039a4:	813b      	strh	r3, [r7, #8]
 80039a6:	4613      	mov	r3, r2
 80039a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f960 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e0:	d103      	bne.n	80039ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e05f      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	492d      	ldr	r1, [pc, #180]	; (8003ab8 <I2C_RequestMemoryWrite+0x128>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f998 	bl	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e04c      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fa02 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d107      	bne.n	8003a52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e02b      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	e021      	b.n	8003aac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6a39      	ldr	r1, [r7, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f9dc 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d107      	bne.n	8003a9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e005      	b.n	8003aae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	00010002 	.word	0x00010002

08003abc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8c2 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1c:	d103      	bne.n	8003b26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0aa      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	4952      	ldr	r1, [pc, #328]	; (8003c88 <I2C_RequestMemoryRead+0x1cc>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8fa 	bl	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e097      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f964 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e076      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e021      	b.n	8003be8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba4:	893b      	ldrh	r3, [r7, #8]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f93e 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e050      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bde:	893b      	ldrh	r3, [r7, #8]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	6a39      	ldr	r1, [r7, #32]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f923 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d107      	bne.n	8003c10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e035      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f82b 	bl	8003c8c <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	d103      	bne.n	8003c54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e013      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c58:	897b      	ldrh	r3, [r7, #10]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	4906      	ldr	r1, [pc, #24]	; (8003c88 <I2C_RequestMemoryRead+0x1cc>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f863 	bl	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00010002 	.word	0x00010002

08003c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9c:	e025      	b.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d021      	beq.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fe fdcf 	bl	8002848 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d116      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e023      	b.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10d      	bne.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	e00c      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d0b6      	beq.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d48:	e051      	b.n	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d58:	d123      	bne.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e046      	b.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d021      	beq.n	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe fd4d 	bl	8002848 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e020      	b.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10c      	bne.n	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e00b      	b.n	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	43da      	mvns	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d18d      	bne.n	8003d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e44:	e02d      	b.n	8003ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f8ce 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e02d      	b.n	8003eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d021      	beq.n	8003ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fcf3 	bl	8002848 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d116      	bne.n	8003ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e007      	b.n	8003eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d1ca      	bne.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec6:	e02d      	b.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f88d 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e02d      	b.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d021      	beq.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fe fcb2 	bl	8002848 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d116      	bne.n	8003f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e007      	b.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d1ca      	bne.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f48:	e042      	b.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d119      	bne.n	8003f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e029      	b.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fe fc5c 	bl	8002848 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d116      	bne.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d1b5      	bne.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	d11b      	bne.n	8004038 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004008:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e264      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d075      	beq.n	8004152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004066:	4ba3      	ldr	r3, [pc, #652]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b04      	cmp	r3, #4
 8004070:	d00c      	beq.n	800408c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004072:	4ba0      	ldr	r3, [pc, #640]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407a:	2b08      	cmp	r3, #8
 800407c:	d112      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407e:	4b9d      	ldr	r3, [pc, #628]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408a:	d10b      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	4b99      	ldr	r3, [pc, #612]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05b      	beq.n	8004150 <HAL_RCC_OscConfig+0x108>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d157      	bne.n	8004150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e23f      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d106      	bne.n	80040bc <HAL_RCC_OscConfig+0x74>
 80040ae:	4b91      	ldr	r3, [pc, #580]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a90      	ldr	r2, [pc, #576]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e01d      	b.n	80040f8 <HAL_RCC_OscConfig+0xb0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x98>
 80040c6:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a8a      	ldr	r2, [pc, #552]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b88      	ldr	r3, [pc, #544]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a87      	ldr	r2, [pc, #540]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_OscConfig+0xb0>
 80040e0:	4b84      	ldr	r3, [pc, #528]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a83      	ldr	r2, [pc, #524]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b81      	ldr	r3, [pc, #516]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a80      	ldr	r2, [pc, #512]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe fba2 	bl	8002848 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe fb9e 	bl	8002848 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e204      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b76      	ldr	r3, [pc, #472]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0xc0>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe fb8e 	bl	8002848 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe fb8a 	bl	8002848 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1f0      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	4b6c      	ldr	r3, [pc, #432]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0xe8>
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d063      	beq.n	8004226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415e:	4b65      	ldr	r3, [pc, #404]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416a:	4b62      	ldr	r3, [pc, #392]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004172:	2b08      	cmp	r3, #8
 8004174:	d11c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004176:	4b5f      	ldr	r3, [pc, #380]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d116      	bne.n	80041b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	4b5c      	ldr	r3, [pc, #368]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_RCC_OscConfig+0x152>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e1c4      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b56      	ldr	r3, [pc, #344]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4952      	ldr	r1, [pc, #328]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	e03a      	b.n	8004226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b8:	4b4f      	ldr	r3, [pc, #316]	; (80042f8 <HAL_RCC_OscConfig+0x2b0>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fe fb43 	bl	8002848 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c6:	f7fe fb3f 	bl	8002848 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1a5      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	4b46      	ldr	r3, [pc, #280]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e4:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4940      	ldr	r1, [pc, #256]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]
 80041f8:	e015      	b.n	8004226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fa:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <HAL_RCC_OscConfig+0x2b0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fe fb22 	bl	8002848 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004208:	f7fe fb1e 	bl	8002848 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e184      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d030      	beq.n	8004294 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423a:	4b30      	ldr	r3, [pc, #192]	; (80042fc <HAL_RCC_OscConfig+0x2b4>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fe fb02 	bl	8002848 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004248:	f7fe fafe 	bl	8002848 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e164      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x200>
 8004266:	e015      	b.n	8004294 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004268:	4b24      	ldr	r3, [pc, #144]	; (80042fc <HAL_RCC_OscConfig+0x2b4>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7fe faeb 	bl	8002848 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004276:	f7fe fae7 	bl	8002848 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e14d      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f0      	bne.n	8004276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a0 	beq.w	80043e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a6:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c0:	6413      	str	r3, [r2, #64]	; 0x40
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_OscConfig+0x2b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d121      	bne.n	8004322 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_RCC_OscConfig+0x2b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a07      	ldr	r2, [pc, #28]	; (8004300 <HAL_RCC_OscConfig+0x2b8>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ea:	f7fe faad 	bl	8002848 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f0:	e011      	b.n	8004316 <HAL_RCC_OscConfig+0x2ce>
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	42470000 	.word	0x42470000
 80042fc:	42470e80 	.word	0x42470e80
 8004300:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fe faa0 	bl	8002848 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e106      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b85      	ldr	r3, [pc, #532]	; (800452c <HAL_RCC_OscConfig+0x4e4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x2f0>
 800432a:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	e01c      	b.n	8004372 <HAL_RCC_OscConfig+0x32a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b05      	cmp	r3, #5
 800433e:	d10c      	bne.n	800435a <HAL_RCC_OscConfig+0x312>
 8004340:	4b7b      	ldr	r3, [pc, #492]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a7a      	ldr	r2, [pc, #488]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
 800434c:	4b78      	ldr	r3, [pc, #480]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a77      	ldr	r2, [pc, #476]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
 8004358:	e00b      	b.n	8004372 <HAL_RCC_OscConfig+0x32a>
 800435a:	4b75      	ldr	r3, [pc, #468]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a74      	ldr	r2, [pc, #464]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	4b72      	ldr	r3, [pc, #456]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a71      	ldr	r2, [pc, #452]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d015      	beq.n	80043a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fe fa65 	bl	8002848 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fe fa61 	bl	8002848 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e0c5      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ee      	beq.n	8004382 <HAL_RCC_OscConfig+0x33a>
 80043a4:	e014      	b.n	80043d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a6:	f7fe fa4f 	bl	8002848 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	e00a      	b.n	80043c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fe fa4b 	bl	8002848 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0af      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	4b5a      	ldr	r3, [pc, #360]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ee      	bne.n	80043ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d6:	4b56      	ldr	r3, [pc, #344]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a55      	ldr	r2, [pc, #340]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 80043dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 809b 	beq.w	8004522 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ec:	4b50      	ldr	r3, [pc, #320]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d05c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d141      	bne.n	8004484 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004400:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <HAL_RCC_OscConfig+0x4ec>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fe fa1f 	bl	8002848 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fe fa1b 	bl	8002848 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e081      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004420:	4b43      	ldr	r3, [pc, #268]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	019b      	lsls	r3, r3, #6
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	4937      	ldr	r1, [pc, #220]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004456:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCC_OscConfig+0x4ec>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe f9f4 	bl	8002848 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004464:	f7fe f9f0 	bl	8002848 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e056      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x41c>
 8004482:	e04e      	b.n	8004522 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCC_OscConfig+0x4ec>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fe f9dd 	bl	8002848 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004492:	f7fe f9d9 	bl	8002848 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e03f      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x44a>
 80044b0:	e037      	b.n	8004522 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e032      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044be:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d028      	beq.n	800451e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d121      	bne.n	800451e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d11a      	bne.n	800451e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ee:	4013      	ands	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d111      	bne.n	800451e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	3b01      	subs	r3, #1
 8004508:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d107      	bne.n	800451e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40007000 	.word	0x40007000
 8004530:	40023800 	.word	0x40023800
 8004534:	42470060 	.word	0x42470060

08004538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0cc      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b68      	ldr	r3, [pc, #416]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d90c      	bls.n	8004574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0b8      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800458c:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a4:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	494d      	ldr	r1, [pc, #308]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d044      	beq.n	8004658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d119      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e06f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e067      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4934      	ldr	r1, [pc, #208]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004628:	f7fe f90e 	bl	8002848 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fe f90a 	bl	8002848 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e04f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d20c      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e032      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4916      	ldr	r1, [pc, #88]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046be:	f000 f821 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe f86e 	bl	80027c0 <HAL_InitTick>

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023c00 	.word	0x40023c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	08008d4c 	.word	0x08008d4c
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000004 	.word	0x20000004

08004704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	2300      	movs	r3, #0
 8004716:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471c:	4b67      	ldr	r3, [pc, #412]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d00d      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x40>
 8004728:	2b08      	cmp	r3, #8
 800472a:	f200 80bd 	bhi.w	80048a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x34>
 8004732:	2b04      	cmp	r3, #4
 8004734:	d003      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x3a>
 8004736:	e0b7      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800473a:	60bb      	str	r3, [r7, #8]
       break;
 800473c:	e0b7      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473e:	4b61      	ldr	r3, [pc, #388]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004740:	60bb      	str	r3, [r7, #8]
      break;
 8004742:	e0b4      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004744:	4b5d      	ldr	r3, [pc, #372]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474e:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04d      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b58      	ldr	r3, [pc, #352]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	ea02 0800 	and.w	r8, r2, r0
 8004772:	ea03 0901 	and.w	r9, r3, r1
 8004776:	4640      	mov	r0, r8
 8004778:	4649      	mov	r1, r9
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	014b      	lsls	r3, r1, #5
 8004784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004788:	0142      	lsls	r2, r0, #5
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	ebb0 0008 	subs.w	r0, r0, r8
 8004792:	eb61 0109 	sbc.w	r1, r1, r9
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	018b      	lsls	r3, r1, #6
 80047a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a4:	0182      	lsls	r2, r0, #6
 80047a6:	1a12      	subs	r2, r2, r0
 80047a8:	eb63 0301 	sbc.w	r3, r3, r1
 80047ac:	f04f 0000 	mov.w	r0, #0
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	00d9      	lsls	r1, r3, #3
 80047b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047ba:	00d0      	lsls	r0, r2, #3
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	eb12 0208 	adds.w	r2, r2, r8
 80047c4:	eb43 0309 	adc.w	r3, r3, r9
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	0259      	lsls	r1, r3, #9
 80047d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047d6:	0250      	lsls	r0, r2, #9
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f7fb fcee 	bl	80001c8 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4613      	mov	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e04a      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f6:	4b31      	ldr	r3, [pc, #196]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	099b      	lsrs	r3, r3, #6
 80047fc:	461a      	mov	r2, r3
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	ea02 0400 	and.w	r4, r2, r0
 800480e:	ea03 0501 	and.w	r5, r3, r1
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	014b      	lsls	r3, r1, #5
 8004820:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004824:	0142      	lsls	r2, r0, #5
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	1b00      	subs	r0, r0, r4
 800482c:	eb61 0105 	sbc.w	r1, r1, r5
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	018b      	lsls	r3, r1, #6
 800483a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800483e:	0182      	lsls	r2, r0, #6
 8004840:	1a12      	subs	r2, r2, r0
 8004842:	eb63 0301 	sbc.w	r3, r3, r1
 8004846:	f04f 0000 	mov.w	r0, #0
 800484a:	f04f 0100 	mov.w	r1, #0
 800484e:	00d9      	lsls	r1, r3, #3
 8004850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004854:	00d0      	lsls	r0, r2, #3
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	1912      	adds	r2, r2, r4
 800485c:	eb45 0303 	adc.w	r3, r5, r3
 8004860:	f04f 0000 	mov.w	r0, #0
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	0299      	lsls	r1, r3, #10
 800486a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800486e:	0290      	lsls	r0, r2, #10
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4610      	mov	r0, r2
 8004876:	4619      	mov	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	f7fb fca2 	bl	80001c8 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4613      	mov	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	3301      	adds	r3, #1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	60bb      	str	r3, [r7, #8]
      break;
 80048a6:	e002      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048aa:	60bb      	str	r3, [r7, #8]
      break;
 80048ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ae:	68bb      	ldr	r3, [r7, #8]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	007a1200 	.word	0x007a1200

080048c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000

080048e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048e4:	f7ff fff0 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0a9b      	lsrs	r3, r3, #10
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	08008d5c 	.word	0x08008d5c

08004908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07b      	b.n	8004a12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492a:	d009      	beq.n	8004940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
 8004932:	e005      	b.n	8004940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd fd7e 	bl	800245c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	ea42 0103 	orr.w	r1, r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	f003 0104 	and.w	r1, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	f003 0210 	and.w	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b088      	sub	sp, #32
 8004a1e:	af02      	add	r7, sp, #8
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a36:	d112      	bne.n	8004a5e <HAL_SPI_Receive+0x44>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10e      	bne.n	8004a5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2204      	movs	r2, #4
 8004a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f8f1 	bl	8004c3c <HAL_SPI_TransmitReceive>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	e0ea      	b.n	8004c34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_SPI_Receive+0x52>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0e3      	b.n	8004c34 <HAL_SPI_Receive+0x21a>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a74:	f7fd fee8 	bl	8002848 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a8a:	e0ca      	b.n	8004c22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Receive+0x7e>
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a9c:	e0c1      	b.n	8004c22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	d10f      	bne.n	8004b06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d007      	beq.n	8004b24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d162      	bne.n	8004bf2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b2c:	e02e      	b.n	8004b8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d115      	bne.n	8004b68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f103 020c 	add.w	r2, r3, #12
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b66:	e011      	b.n	8004b8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b68:	f7fd fe6e 	bl	8002848 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d803      	bhi.n	8004b80 <HAL_SPI_Receive+0x166>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Receive+0x16c>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b8a:	e04a      	b.n	8004c22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1cb      	bne.n	8004b2e <HAL_SPI_Receive+0x114>
 8004b96:	e031      	b.n	8004bfc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d113      	bne.n	8004bce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	b292      	uxth	r2, r2
 8004bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bcc:	e011      	b.n	8004bf2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bce:	f7fd fe3b 	bl	8002848 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d803      	bhi.n	8004be6 <HAL_SPI_Receive+0x1cc>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_Receive+0x1d2>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bf0:	e017      	b.n	8004c22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1cd      	bne.n	8004b98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fa45 	bl	8005090 <SPI_EndRxTransaction>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
 8004c1e:	e000      	b.n	8004c22 <HAL_SPI_Receive+0x208>
  }

error :
 8004c20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08c      	sub	sp, #48	; 0x30
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x26>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e18a      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x33c>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c6a:	f7fd fded 	bl	8002848 <HAL_GetTick>
 8004c6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d00f      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x70>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c92:	d107      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x68>
 8004c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d003      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004caa:	e15b      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x82>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x82>
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cc4:	e14e      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d003      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	887a      	ldrh	r2, [r7, #2]
 8004d02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d007      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d36:	d178      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x10a>
 8004d40:	8b7b      	ldrh	r3, [r7, #26]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d166      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	881a      	ldrh	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d6a:	e053      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d11b      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x176>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d016      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x176>
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d113      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d119      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x1b8>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004df0:	2301      	movs	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004df4:	f7fd fd28 	bl	8002848 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d807      	bhi.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d003      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e12:	e0a7      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1a6      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x130>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1a1      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x130>
 8004e28:	e07c      	b.n	8004f24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x1fc>
 8004e32:	8b7b      	ldrh	r3, [r7, #26]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d16b      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5e:	e057      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x26c>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x26c>
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d114      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d119      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x2ae>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d014      	beq.n	8004eea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eea:	f7fd fcad 	bl	8002848 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d803      	bhi.n	8004f02 <HAL_SPI_TransmitReceive+0x2c6>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d102      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x2cc>
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f0e:	e029      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1a2      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x224>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d19d      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f917 	bl	800515c <SPI_EndRxTxTransaction>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f40:	e010      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	e000      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3730      	adds	r7, #48	; 0x30
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f90:	f7fd fc5a 	bl	8002848 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fa0:	f7fd fc52 	bl	8002848 <HAL_GetTick>
 8004fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	015b      	lsls	r3, r3, #5
 8004fac:	0d1b      	lsrs	r3, r3, #20
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb6:	e054      	b.n	8005062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d050      	beq.n	8005062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fc0:	f7fd fc42 	bl	8002848 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d902      	bls.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d13d      	bne.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d111      	bne.n	8005014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	d004      	beq.n	8005004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005002:	d107      	bne.n	8005014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501c:	d10f      	bne.n	800503e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800503c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e017      	b.n	8005082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3b01      	subs	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4013      	ands	r3, r2
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	429a      	cmp	r2, r3
 800507e:	d19b      	bne.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000000 	.word	0x20000000

08005090 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a4:	d111      	bne.n	80050ca <SPI_EndRxTransaction+0x3a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ae:	d004      	beq.n	80050ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b8:	d107      	bne.n	80050ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d2:	d12a      	bne.n	800512a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050dc:	d012      	beq.n	8005104 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	; 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff49 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02d      	beq.n	8005150 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e026      	b.n	8005152 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	2101      	movs	r1, #1
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff ff36 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01a      	beq.n	8005150 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e013      	b.n	8005152 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	2101      	movs	r1, #1
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff ff23 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e000      	b.n	8005152 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <SPI_EndRxTxTransaction+0x7c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <SPI_EndRxTxTransaction+0x80>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0d5b      	lsrs	r3, r3, #21
 8005174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005186:	d112      	bne.n	80051ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	2180      	movs	r1, #128	; 0x80
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff fef4 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e00f      	b.n	80051ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d0f2      	beq.n	80051ae <SPI_EndRxTxTransaction+0x52>
 80051c8:	e000      	b.n	80051cc <SPI_EndRxTxTransaction+0x70>
        break;
 80051ca:	bf00      	nop
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000000 	.word	0x20000000
 80051dc:	165e9f81 	.word	0x165e9f81

080051e0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e034      	b.n	8005260 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7fb fb54 	bl	80008b8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3308      	adds	r3, #8
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 fca6 	bl	8005b6c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	461a      	mov	r2, r3
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	f000 fcf0 	bl	8005c10 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6858      	ldr	r0, [r3, #4]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	f000 fd25 	bl	8005c8c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	6892      	ldr	r2, [r2, #8]
 800524a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	f041 0101 	orr.w	r1, r1, #1
 800525a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e041      	b.n	80052fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd f9e6 	bl	8002660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f000 fa96 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d001      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e04e      	b.n	80053be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a23      	ldr	r2, [pc, #140]	; (80053cc <HAL_TIM_Base_Start_IT+0xc4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x80>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d01d      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x80>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x80>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x80>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x80>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x80>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x80>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d111      	bne.n	80053ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b06      	cmp	r3, #6
 8005398:	d010      	beq.n	80053bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053aa:	e007      	b.n	80053bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40001800 	.word	0x40001800

080053e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b02      	cmp	r3, #2
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0202 	mvn.w	r2, #2
 8005414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9b5 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f9a7 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f9b8 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b04      	cmp	r3, #4
 8005450:	d122      	bne.n	8005498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b04      	cmp	r3, #4
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0204 	mvn.w	r2, #4
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f98b 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f97d 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f98e 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d122      	bne.n	80054ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d11b      	bne.n	80054ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0208 	mvn.w	r2, #8
 80054bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2204      	movs	r2, #4
 80054c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f961 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f953 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f964 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d122      	bne.n	8005540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b10      	cmp	r3, #16
 8005506:	d11b      	bne.n	8005540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0210 	mvn.w	r2, #16
 8005510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2208      	movs	r2, #8
 8005516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f937 	bl	800579a <HAL_TIM_IC_CaptureCallback>
 800552c:	e005      	b.n	800553a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f929 	bl	8005786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f93a 	bl	80057ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d10e      	bne.n	800556c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d107      	bne.n	800556c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0201 	mvn.w	r2, #1
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc ff18 	bl	800239c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b80      	cmp	r3, #128	; 0x80
 8005578:	d10e      	bne.n	8005598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d107      	bne.n	8005598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fae0 	bl	8005b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8ff 	bl	80057c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0220 	mvn.w	r2, #32
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 faaa 	bl	8005b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIM_ConfigClockSource+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e0b4      	b.n	800577e <HAL_TIM_ConfigClockSource+0x186>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800563a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564c:	d03e      	beq.n	80056cc <HAL_TIM_ConfigClockSource+0xd4>
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005652:	f200 8087 	bhi.w	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	f000 8086 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x172>
 800565e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005662:	d87f      	bhi.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b70      	cmp	r3, #112	; 0x70
 8005666:	d01a      	beq.n	800569e <HAL_TIM_ConfigClockSource+0xa6>
 8005668:	2b70      	cmp	r3, #112	; 0x70
 800566a:	d87b      	bhi.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b60      	cmp	r3, #96	; 0x60
 800566e:	d050      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x11a>
 8005670:	2b60      	cmp	r3, #96	; 0x60
 8005672:	d877      	bhi.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b50      	cmp	r3, #80	; 0x50
 8005676:	d03c      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005678:	2b50      	cmp	r3, #80	; 0x50
 800567a:	d873      	bhi.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d058      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x13a>
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d86f      	bhi.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b30      	cmp	r3, #48	; 0x30
 8005686:	d064      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x15a>
 8005688:	2b30      	cmp	r3, #48	; 0x30
 800568a:	d86b      	bhi.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 800568c:	2b20      	cmp	r3, #32
 800568e:	d060      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x15a>
 8005690:	2b20      	cmp	r3, #32
 8005692:	d867      	bhi.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d05c      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x15a>
 8005698:	2b10      	cmp	r3, #16
 800569a:	d05a      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x15a>
 800569c:	e062      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6899      	ldr	r1, [r3, #8]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f000 f9ad 	bl	8005a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	609a      	str	r2, [r3, #8]
      break;
 80056ca:	e04f      	b.n	800576c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6899      	ldr	r1, [r3, #8]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f000 f996 	bl	8005a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ee:	609a      	str	r2, [r3, #8]
      break;
 80056f0:	e03c      	b.n	800576c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 f90a 	bl	8005918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2150      	movs	r1, #80	; 0x50
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f963 	bl	80059d6 <TIM_ITRx_SetConfig>
      break;
 8005710:	e02c      	b.n	800576c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	461a      	mov	r2, r3
 8005720:	f000 f929 	bl	8005976 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2160      	movs	r1, #96	; 0x60
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f953 	bl	80059d6 <TIM_ITRx_SetConfig>
      break;
 8005730:	e01c      	b.n	800576c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6859      	ldr	r1, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	461a      	mov	r2, r3
 8005740:	f000 f8ea 	bl	8005918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2140      	movs	r1, #64	; 0x40
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f943 	bl	80059d6 <TIM_ITRx_SetConfig>
      break;
 8005750:	e00c      	b.n	800576c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f000 f93a 	bl	80059d6 <TIM_ITRx_SetConfig>
      break;
 8005762:	e003      	b.n	800576c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
      break;
 8005768:	e000      	b.n	800576c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800576a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a40      	ldr	r2, [pc, #256]	; (80058ec <TIM_Base_SetConfig+0x114>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d00f      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a3d      	ldr	r2, [pc, #244]	; (80058f0 <TIM_Base_SetConfig+0x118>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3c      	ldr	r2, [pc, #240]	; (80058f4 <TIM_Base_SetConfig+0x11c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a3b      	ldr	r2, [pc, #236]	; (80058f8 <TIM_Base_SetConfig+0x120>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <TIM_Base_SetConfig+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d108      	bne.n	800582a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2f      	ldr	r2, [pc, #188]	; (80058ec <TIM_Base_SetConfig+0x114>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d027      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <TIM_Base_SetConfig+0x118>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d023      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <TIM_Base_SetConfig+0x11c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01f      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <TIM_Base_SetConfig+0x120>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a29      	ldr	r2, [pc, #164]	; (80058fc <TIM_Base_SetConfig+0x124>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d017      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a28      	ldr	r2, [pc, #160]	; (8005900 <TIM_Base_SetConfig+0x128>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a27      	ldr	r2, [pc, #156]	; (8005904 <TIM_Base_SetConfig+0x12c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00f      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a26      	ldr	r2, [pc, #152]	; (8005908 <TIM_Base_SetConfig+0x130>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <TIM_Base_SetConfig+0x134>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a24      	ldr	r2, [pc, #144]	; (8005910 <TIM_Base_SetConfig+0x138>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a23      	ldr	r2, [pc, #140]	; (8005914 <TIM_Base_SetConfig+0x13c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <TIM_Base_SetConfig+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0xf8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <TIM_Base_SetConfig+0x124>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d103      	bne.n	80058d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	615a      	str	r2, [r3, #20]
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800
 80058f8:	40000c00 	.word	0x40000c00
 80058fc:	40010400 	.word	0x40010400
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	40001800 	.word	0x40001800
 8005910:	40001c00 	.word	0x40001c00
 8005914:	40002000 	.word	0x40002000

08005918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 030a 	bic.w	r3, r3, #10
 8005954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005976:	b480      	push	{r7}
 8005978:	b087      	sub	sp, #28
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0210 	bic.w	r2, r3, #16
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	031b      	lsls	r3, r3, #12
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f043 0307 	orr.w	r3, r3, #7
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	609a      	str	r2, [r3, #8]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	021a      	lsls	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	609a      	str	r2, [r3, #8]
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e05a      	b.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab0:	d01d      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d018      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00e      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d10c      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40001800 	.word	0x40001800

08005b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <FSMC_NORSRAM_Init+0xa0>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b96:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005b9c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005ba2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005ba8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005bae:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005bb4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005bba:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005bc0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005bc6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005bcc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005bd2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005bd8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d103      	bne.n	8005bf0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bee:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	fff00080 	.word	0xfff00080

08005c10 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005c32:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c3e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005c46:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005c4e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c58:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	3b02      	subs	r3, #2
 8005c60:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005c62:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6979      	ldr	r1, [r7, #20]
 8005c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ca4:	d122      	bne.n	8005cec <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cae:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005cc2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005cca:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005cd2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005cd8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6979      	ldr	r1, [r7, #20]
 8005ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cea:	e005      	b.n	8005cf8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	cff00000 	.word	0xcff00000

08005d0c <__libc_init_array>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4d0d      	ldr	r5, [pc, #52]	; (8005d44 <__libc_init_array+0x38>)
 8005d10:	4c0d      	ldr	r4, [pc, #52]	; (8005d48 <__libc_init_array+0x3c>)
 8005d12:	1b64      	subs	r4, r4, r5
 8005d14:	10a4      	asrs	r4, r4, #2
 8005d16:	2600      	movs	r6, #0
 8005d18:	42a6      	cmp	r6, r4
 8005d1a:	d109      	bne.n	8005d30 <__libc_init_array+0x24>
 8005d1c:	4d0b      	ldr	r5, [pc, #44]	; (8005d4c <__libc_init_array+0x40>)
 8005d1e:	4c0c      	ldr	r4, [pc, #48]	; (8005d50 <__libc_init_array+0x44>)
 8005d20:	f000 f820 	bl	8005d64 <_init>
 8005d24:	1b64      	subs	r4, r4, r5
 8005d26:	10a4      	asrs	r4, r4, #2
 8005d28:	2600      	movs	r6, #0
 8005d2a:	42a6      	cmp	r6, r4
 8005d2c:	d105      	bne.n	8005d3a <__libc_init_array+0x2e>
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d34:	4798      	blx	r3
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7ee      	b.n	8005d18 <__libc_init_array+0xc>
 8005d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3e:	4798      	blx	r3
 8005d40:	3601      	adds	r6, #1
 8005d42:	e7f2      	b.n	8005d2a <__libc_init_array+0x1e>
 8005d44:	08008d6c 	.word	0x08008d6c
 8005d48:	08008d6c 	.word	0x08008d6c
 8005d4c:	08008d6c 	.word	0x08008d6c
 8005d50:	08008d70 	.word	0x08008d70

08005d54 <memset>:
 8005d54:	4402      	add	r2, r0
 8005d56:	4603      	mov	r3, r0
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d100      	bne.n	8005d5e <memset+0xa>
 8005d5c:	4770      	bx	lr
 8005d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d62:	e7f9      	b.n	8005d58 <memset+0x4>

08005d64 <_init>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	bf00      	nop
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr

08005d70 <_fini>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

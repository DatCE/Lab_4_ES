
Bai1_GPIO_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030ec  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a828  0800a828  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a830  0800a830  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a830  0800a830  0001a830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a834  0800a834  0001a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd57  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e35  00000000  00000000  0003cdf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  00040c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001460  00000000  00000000  00042230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251e6  00000000  00000000  00043690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4ad  00000000  00000000  00068876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4957  00000000  00000000  00084d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015967a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006310  00000000  00000000  001596d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007724 	.word	0x08007724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007724 	.word	0x08007724

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2108      	movs	r1, #8
 8000572:	482f      	ldr	r0, [pc, #188]	; (8000630 <button_Scan+0xc8>)
 8000574:	f002 f932 	bl	80027dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2108      	movs	r1, #8
 800057c:	482c      	ldr	r0, [pc, #176]	; (8000630 <button_Scan+0xc8>)
 800057e:	f002 f92d 	bl	80027dc <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000582:	230a      	movs	r3, #10
 8000584:	2202      	movs	r2, #2
 8000586:	492b      	ldr	r1, [pc, #172]	; (8000634 <button_Scan+0xcc>)
 8000588:	482b      	ldr	r0, [pc, #172]	; (8000638 <button_Scan+0xd0>)
 800058a:	f003 ff2c 	bl	80043e6 <HAL_SPI_Receive>
	  int button_index = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e03f      	b.n	800061e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db06      	blt.n	80005b2 <button_Scan+0x4a>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	dc03      	bgt.n	80005b2 <button_Scan+0x4a>
			  button_index = i + 4;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3304      	adds	r3, #4
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e018      	b.n	80005e4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	dd07      	ble.n	80005c8 <button_Scan+0x60>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	dc04      	bgt.n	80005c8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f1c3 0307 	rsb	r3, r3, #7
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	e00d      	b.n	80005e4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	dd06      	ble.n	80005dc <button_Scan+0x74>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0b      	cmp	r3, #11
 80005d2:	dc03      	bgt.n	80005dc <button_Scan+0x74>
			  button_index = i + 4;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3304      	adds	r3, #4
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e003      	b.n	80005e4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f1c3 0317 	rsb	r3, r3, #23
 80005e2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <button_Scan+0xcc>)
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	897b      	ldrh	r3, [r7, #10]
 80005ea:	4013      	ands	r3, r2
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d005      	beq.n	80005fe <button_Scan+0x96>
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <button_Scan+0xd4>)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2100      	movs	r1, #0
 80005f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005fc:	e009      	b.n	8000612 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <button_Scan+0xd4>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000606:	3301      	adds	r3, #1
 8000608:	b299      	uxth	r1, r3
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <button_Scan+0xd4>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000612:	897b      	ldrh	r3, [r7, #10]
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	ddbc      	ble.n	800059e <button_Scan+0x36>
	  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020c00 	.word	0x40020c00
 8000634:	2000008c 	.word	0x2000008c
 8000638:	200001c0 	.word	0x200001c0
 800063c:	200000b0 	.word	0x200000b0

08000640 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000644:	201e      	movs	r0, #30
 8000646:	f001 fca5 	bl	8001f94 <DEC2BCD>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <ds3231_init+0x80>)
 8000650:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000652:	2016      	movs	r0, #22
 8000654:	f001 fc9e 	bl	8001f94 <DEC2BCD>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <ds3231_init+0x80>)
 800065e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000660:	2015      	movs	r0, #21
 8000662:	f001 fc97 	bl	8001f94 <DEC2BCD>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <ds3231_init+0x80>)
 800066c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800066e:	2006      	movs	r0, #6
 8000670:	f001 fc90 	bl	8001f94 <DEC2BCD>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <ds3231_init+0x80>)
 800067a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800067c:	200f      	movs	r0, #15
 800067e:	f001 fc89 	bl	8001f94 <DEC2BCD>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <ds3231_init+0x80>)
 8000688:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800068a:	2009      	movs	r0, #9
 800068c:	f001 fc82 	bl	8001f94 <DEC2BCD>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <ds3231_init+0x80>)
 8000696:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000698:	2017      	movs	r0, #23
 800069a:	f001 fc7b 	bl	8001f94 <DEC2BCD>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <ds3231_init+0x80>)
 80006a4:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006a6:	2332      	movs	r3, #50	; 0x32
 80006a8:	2203      	movs	r2, #3
 80006aa:	21d0      	movs	r1, #208	; 0xd0
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <ds3231_init+0x84>)
 80006ae:	f002 fd13 	bl	80030d8 <HAL_I2C_IsDeviceReady>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d000      	beq.n	80006ba <ds3231_init+0x7a>
		while(1);
 80006b8:	e7fe      	b.n	80006b8 <ds3231_init+0x78>
	};
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000d8 	.word	0x200000d8
 80006c4:	20000130 	.word	0x20000130

080006c8 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af04      	add	r7, sp, #16
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fc5a 	bl	8001f94 <DEC2BCD>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	230a      	movs	r3, #10
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	2301      	movs	r3, #1
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	f107 030f 	add.w	r3, r7, #15
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	21d0      	movs	r1, #208	; 0xd0
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <ds3231_Write+0x40>)
 80006fc:	f002 f9cc 	bl	8002a98 <HAL_I2C_Mem_Write>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000130 	.word	0x20000130

0800070c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000712:	230a      	movs	r3, #10
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	2307      	movs	r3, #7
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <ds3231_ReadTime+0xa4>)
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	2200      	movs	r2, #0
 8000722:	21d0      	movs	r1, #208	; 0xd0
 8000724:	4823      	ldr	r0, [pc, #140]	; (80007b4 <ds3231_ReadTime+0xa8>)
 8000726:	f002 fab1 	bl	8002c8c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <ds3231_ReadTime+0xa4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fc16 	bl	8001f60 <BCD2DEC>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <ds3231_ReadTime+0xac>)
 800073a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <ds3231_ReadTime+0xa4>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fc0d 	bl	8001f60 <BCD2DEC>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <ds3231_ReadTime+0xb0>)
 800074c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fc04 	bl	8001f60 <BCD2DEC>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <ds3231_ReadTime+0xb4>)
 800075e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000762:	78db      	ldrb	r3, [r3, #3]
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fbfb 	bl	8001f60 <BCD2DEC>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <ds3231_ReadTime+0xb8>)
 8000770:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fbf2 	bl	8001f60 <BCD2DEC>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <ds3231_ReadTime+0xbc>)
 8000782:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fbe9 	bl	8001f60 <BCD2DEC>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <ds3231_ReadTime+0xc0>)
 8000794:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <ds3231_ReadTime+0xa4>)
 8000798:	799b      	ldrb	r3, [r3, #6]
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fbe0 	bl	8001f60 <BCD2DEC>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <ds3231_ReadTime+0xc4>)
 80007a6:	701a      	strb	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d8 	.word	0x200000d8
 80007b4:	20000130 	.word	0x20000130
 80007b8:	200000d0 	.word	0x200000d0
 80007bc:	200000d2 	.word	0x200000d2
 80007c0:	200000d5 	.word	0x200000d5
 80007c4:	200000d4 	.word	0x200000d4
 80007c8:	200000d3 	.word	0x200000d3
 80007cc:	200000d6 	.word	0x200000d6
 80007d0:	200000d1 	.word	0x200000d1

080007d4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000802:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000806:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000808:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_FSMC_Init+0xec>)
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <MX_FSMC_Init+0xf0>)
 800080c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_FSMC_Init+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000822:	2210      	movs	r2, #16
 8000824:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_FSMC_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_FSMC_Init+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_FSMC_Init+0xec>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_FSMC_Init+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_FSMC_Init+0xec>)
 8000862:	2200      	movs	r2, #0
 8000864:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000866:	230f      	movs	r3, #15
 8000868:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800086a:	230f      	movs	r3, #15
 800086c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800086e:	233c      	movs	r3, #60	; 0x3c
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000876:	2310      	movs	r3, #16
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800087a:	2311      	movs	r3, #17
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000882:	2308      	movs	r3, #8
 8000884:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000886:	230f      	movs	r3, #15
 8000888:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800088a:	2309      	movs	r3, #9
 800088c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000892:	2310      	movs	r3, #16
 8000894:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000896:	2311      	movs	r3, #17
 8000898:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800089e:	463a      	mov	r2, r7
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_FSMC_Init+0xec>)
 80008a8:	f004 f980 	bl	8004bac <HAL_SRAM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008b2:	f000 ff27 	bl	8001704 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008b6:	bf00      	nop
 80008b8:	3738      	adds	r7, #56	; 0x38
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000e0 	.word	0x200000e0
 80008c4:	a0000104 	.word	0xa0000104

080008c8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <HAL_FSMC_MspInit+0x88>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d131      	bne.n	8000948 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <HAL_FSMC_MspInit+0x88>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_FSMC_MspInit+0x8c>)
 80008f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <HAL_FSMC_MspInit+0x8c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6393      	str	r3, [r2, #56]	; 0x38
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <HAL_FSMC_MspInit+0x8c>)
 80008fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000906:	f64f 7388 	movw	r3, #65416	; 0xff88
 800090a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000918:	230c      	movs	r3, #12
 800091a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <HAL_FSMC_MspInit+0x90>)
 8000922:	f001 fdbf 	bl	80024a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000926:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800092a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000938:	230c      	movs	r3, #12
 800093a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <HAL_FSMC_MspInit+0x94>)
 8000942:	f001 fdaf 	bl	80024a4 <HAL_GPIO_Init>
 8000946:	e000      	b.n	800094a <HAL_FSMC_MspInit+0x82>
    return;
 8000948:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000090 	.word	0x20000090
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020c00 	.word	0x40020c00

08000960 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000968:	f7ff ffae 	bl	80008c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b77      	ldr	r3, [pc, #476]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a76      	ldr	r2, [pc, #472]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b74      	ldr	r3, [pc, #464]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b70      	ldr	r3, [pc, #448]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a6f      	ldr	r2, [pc, #444]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b6d      	ldr	r3, [pc, #436]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b69      	ldr	r3, [pc, #420]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a68      	ldr	r2, [pc, #416]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b66      	ldr	r3, [pc, #408]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b62      	ldr	r3, [pc, #392]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a61      	ldr	r2, [pc, #388]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b5f      	ldr	r3, [pc, #380]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b5b      	ldr	r3, [pc, #364]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a5a      	ldr	r2, [pc, #360]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b58      	ldr	r3, [pc, #352]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a53      	ldr	r2, [pc, #332]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b51      	ldr	r3, [pc, #324]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a4c      	ldr	r2, [pc, #304]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <MX_GPIO_Init+0x1f8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2170      	movs	r1, #112	; 0x70
 8000a52:	4847      	ldr	r0, [pc, #284]	; (8000b70 <MX_GPIO_Init+0x1fc>)
 8000a54:	f001 fec2 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000a5e:	4845      	ldr	r0, [pc, #276]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000a60:	f001 febc 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000a6a:	4843      	ldr	r0, [pc, #268]	; (8000b78 <MX_GPIO_Init+0x204>)
 8000a6c:	f001 feb6 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	4841      	ldr	r0, [pc, #260]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000a78:	f001 feb0 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2108      	movs	r1, #8
 8000a80:	483f      	ldr	r0, [pc, #252]	; (8000b80 <MX_GPIO_Init+0x20c>)
 8000a82:	f001 feab 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a86:	2370      	movs	r3, #112	; 0x70
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4834      	ldr	r0, [pc, #208]	; (8000b70 <MX_GPIO_Init+0x1fc>)
 8000a9e:	f001 fd01 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000aa2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	482e      	ldr	r0, [pc, #184]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000abc:	f001 fcf2 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ac0:	23c0      	movs	r3, #192	; 0xc0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482a      	ldr	r0, [pc, #168]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000ad4:	f001 fce6 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin|T_PEN_Pin|T_MISO_Pin;
 8000ad8:	f241 1330 	movw	r3, #4400	; 0x1130
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4821      	ldr	r0, [pc, #132]	; (8000b74 <MX_GPIO_Init+0x200>)
 8000aee:	f001 fcd9 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CLK_Pin;
 8000af2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481b      	ldr	r0, [pc, #108]	; (8000b78 <MX_GPIO_Init+0x204>)
 8000b0c:	f001 fcca 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4815      	ldr	r0, [pc, #84]	; (8000b78 <MX_GPIO_Init+0x204>)
 8000b24:	f001 fcbe 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <MX_GPIO_Init+0x208>)
 8000b42:	f001 fcaf 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b46:	2308      	movs	r3, #8
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x20c>)
 8000b5e:	f001 fca1 	bl	80024a4 <HAL_GPIO_Init>

}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40021800 	.word	0x40021800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_I2C1_Init+0x54>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x58>)
 8000b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bc2:	f001 fe25 	bl	8002810 <HAL_I2C_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bcc:	f000 fd9a 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000130 	.word	0x20000130
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	000186a0 	.word	0x000186a0

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_I2C_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_I2C_MspInit+0x8c>)
 8000c3a:	f001 fc33 	bl	80024a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <LCD_WR_REG+0x1c>)
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	8013      	strh	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	600ffffe 	.word	0x600ffffe

08000c90 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <LCD_WR_DATA+0x1c>)
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	8053      	strh	r3, [r2, #2]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	600ffffe 	.word	0x600ffffe

08000cb0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <LCD_RD_DATA+0x20>)
 8000cb8:	885b      	ldrh	r3, [r3, #2]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	b29b      	uxth	r3, r3
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	600ffffe 	.word	0x600ffffe

08000cd4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80bb      	strh	r3, [r7, #4]
 8000cea:	460b      	mov	r3, r1
 8000cec:	807b      	strh	r3, [r7, #2]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000cf2:	202a      	movs	r0, #42	; 0x2a
 8000cf4:	f7ff ffbc 	bl	8000c70 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ffc6 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffc0 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffba 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ffb4 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d28:	202b      	movs	r0, #43	; 0x2b
 8000d2a:	f7ff ffa1 	bl	8000c70 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d2e:	88bb      	ldrh	r3, [r7, #4]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffab 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ffa5 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d46:	883b      	ldrh	r3, [r7, #0]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff9f 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff99 	bl	8000c90 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d5e:	202c      	movs	r0, #44	; 0x2c
 8000d60:	f7ff ff86 	bl	8000c70 <LCD_WR_REG>
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <lcd_Clear+0x60>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <lcd_Clear+0x60>)
 8000d80:	885b      	ldrh	r3, [r3, #2]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ffa3 	bl	8000cd4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	e011      	b.n	8000db8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	81bb      	strh	r3, [r7, #12]
 8000d98:	e006      	b.n	8000da8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff77 	bl	8000c90 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <lcd_Clear+0x60>)
 8000daa:	885b      	ldrh	r3, [r3, #2]
 8000dac:	89ba      	ldrh	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f3      	bcc.n	8000d9a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	3301      	adds	r3, #1
 8000db6:	81fb      	strh	r3, [r7, #14]
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <lcd_Clear+0x60>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3e8      	bcc.n	8000d94 <lcd_Clear+0x28>
		}
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000184 	.word	0x20000184

08000dd0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	80bb      	strh	r3, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	88fa      	ldrh	r2, [r7, #6]
 8000de6:	88b9      	ldrh	r1, [r7, #4]
 8000de8:	88f8      	ldrh	r0, [r7, #6]
 8000dea:	f7ff ff73 	bl	8000cd4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff4d 	bl	8000c90 <LCD_WR_DATA>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	70fb      	strb	r3, [r7, #3]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e2a:	085b      	lsrs	r3, r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	08db      	lsrs	r3, r3, #3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	fb12 f303 	smulbb	r3, r2, r3
 8000e56:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	3b20      	subs	r3, #32
 8000e5c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29c      	uxth	r4, r3
 8000e6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	88b9      	ldrh	r1, [r7, #4]
 8000e7e:	88f8      	ldrh	r0, [r7, #6]
 8000e80:	4622      	mov	r2, r4
 8000e82:	f7ff ff27 	bl	8000cd4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	827b      	strh	r3, [r7, #18]
 8000e8a:	e07a      	b.n	8000f82 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e90:	2b0c      	cmp	r3, #12
 8000e92:	d028      	beq.n	8000ee6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000e94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d108      	bne.n	8000eae <lcd_ShowChar+0xae>
 8000e9c:	78fa      	ldrb	r2, [r7, #3]
 8000e9e:	8a7b      	ldrh	r3, [r7, #18]
 8000ea0:	493c      	ldr	r1, [pc, #240]	; (8000f94 <lcd_ShowChar+0x194>)
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	440a      	add	r2, r1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	75fb      	strb	r3, [r7, #23]
 8000eac:	e01b      	b.n	8000ee6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000eae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eb2:	2b18      	cmp	r3, #24
 8000eb4:	d10b      	bne.n	8000ece <lcd_ShowChar+0xce>
 8000eb6:	78fa      	ldrb	r2, [r7, #3]
 8000eb8:	8a79      	ldrh	r1, [r7, #18]
 8000eba:	4837      	ldr	r0, [pc, #220]	; (8000f98 <lcd_ShowChar+0x198>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4403      	add	r3, r0
 8000ec6:	440b      	add	r3, r1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	75fb      	strb	r3, [r7, #23]
 8000ecc:	e00b      	b.n	8000ee6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000ece:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ed2:	2b20      	cmp	r3, #32
 8000ed4:	d15a      	bne.n	8000f8c <lcd_ShowChar+0x18c>
 8000ed6:	78fa      	ldrb	r2, [r7, #3]
 8000ed8:	8a7b      	ldrh	r3, [r7, #18]
 8000eda:	4930      	ldr	r1, [pc, #192]	; (8000f9c <lcd_ShowChar+0x19c>)
 8000edc:	0192      	lsls	r2, r2, #6
 8000ede:	440a      	add	r2, r1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75bb      	strb	r3, [r7, #22]
 8000eea:	e044      	b.n	8000f76 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000eec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d120      	bne.n	8000f36 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ef4:	7dfa      	ldrb	r2, [r7, #23]
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
 8000ef8:	fa42 f303 	asr.w	r3, r2, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <lcd_ShowChar+0x10e>
 8000f04:	883b      	ldrh	r3, [r7, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fec2 	bl	8000c90 <LCD_WR_DATA>
 8000f0c:	e003      	b.n	8000f16 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff febd 	bl	8000c90 <LCD_WR_DATA>
				m++;
 8000f16:	7d7b      	ldrb	r3, [r7, #21]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f1c:	7d7b      	ldrb	r3, [r7, #21]
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f24:	fb02 f201 	mul.w	r2, r2, r1
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d11f      	bne.n	8000f70 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	757b      	strb	r3, [r7, #21]
					break;
 8000f34:	e022      	b.n	8000f7c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f36:	7dfa      	ldrb	r2, [r7, #23]
 8000f38:	7dbb      	ldrb	r3, [r7, #22]
 8000f3a:	fa42 f303 	asr.w	r3, r2, r3
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <lcd_ShowChar+0x152>
 8000f46:	883a      	ldrh	r2, [r7, #0]
 8000f48:	88b9      	ldrh	r1, [r7, #4]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff3f 	bl	8000dd0 <lcd_DrawPoint>
				x++;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	3301      	adds	r3, #1
 8000f56:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d105      	bne.n	8000f70 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f64:	8a3b      	ldrh	r3, [r7, #16]
 8000f66:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	80bb      	strh	r3, [r7, #4]
					break;
 8000f6e:	e005      	b.n	8000f7c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f70:	7dbb      	ldrb	r3, [r7, #22]
 8000f72:	3301      	adds	r3, #1
 8000f74:	75bb      	strb	r3, [r7, #22]
 8000f76:	7dbb      	ldrb	r3, [r7, #22]
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	d9b7      	bls.n	8000eec <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f7c:	8a7b      	ldrh	r3, [r7, #18]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	827b      	strh	r3, [r7, #18]
 8000f82:	8a7a      	ldrh	r2, [r7, #18]
 8000f84:	89bb      	ldrh	r3, [r7, #12]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d380      	bcc.n	8000e8c <lcd_ShowChar+0x8c>
 8000f8a:	e000      	b.n	8000f8e <lcd_ShowChar+0x18e>
		else return;
 8000f8c:	bf00      	nop
				}
			}
		}
	}
}
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	080077f8 	.word	0x080077f8
 8000f98:	08007de8 	.word	0x08007de8
 8000f9c:	08008fb8 	.word	0x08008fb8

08000fa0 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fb4:	e004      	b.n	8000fc0 <mypow+0x20>
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	71ba      	strb	r2, [r7, #6]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f5      	bne.n	8000fb6 <mypow+0x16>
	return result;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	80fb      	strh	r3, [r7, #6]
 8000fea:	4603      	mov	r3, r0
 8000fec:	80bb      	strh	r3, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e059      	b.n	80010bc <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001008:	887c      	ldrh	r4, [r7, #2]
 800100a:	787a      	ldrb	r2, [r7, #1]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4619      	mov	r1, r3
 8001018:	200a      	movs	r0, #10
 800101a:	f7ff ffc1 	bl	8000fa0 <mypow>
 800101e:	4603      	mov	r3, r0
 8001020:	fbb4 f1f3 	udiv	r1, r4, r3
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <lcd_ShowIntNum+0xf8>)
 8001026:	fba3 2301 	umull	r2, r3, r3, r1
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	1aca      	subs	r2, r1, r3
 8001036:	4613      	mov	r3, r2
 8001038:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d121      	bne.n	8001084 <lcd_ShowIntNum+0xac>
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	787b      	ldrb	r3, [r7, #1]
 8001044:	3b01      	subs	r3, #1
 8001046:	429a      	cmp	r2, r3
 8001048:	da1c      	bge.n	8001084 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d117      	bne.n	8001080 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	b29a      	uxth	r2, r3
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	b29b      	uxth	r3, r3
 8001058:	fb12 f303 	smulbb	r3, r2, r3
 800105c:	b29a      	uxth	r2, r3
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	4413      	add	r3, r2
 8001062:	b298      	uxth	r0, r3
 8001064:	8c3a      	ldrh	r2, [r7, #32]
 8001066:	88b9      	ldrh	r1, [r7, #4]
 8001068:	2300      	movs	r3, #0
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4613      	mov	r3, r2
 8001078:	2220      	movs	r2, #32
 800107a:	f7ff fec1 	bl	8000e00 <lcd_ShowChar>
				continue;
 800107e:	e01a      	b.n	80010b6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001080:	2301      	movs	r3, #1
 8001082:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	b29a      	uxth	r2, r3
 8001088:	7b7b      	ldrb	r3, [r7, #13]
 800108a:	b29b      	uxth	r3, r3
 800108c:	fb12 f303 	smulbb	r3, r2, r3
 8001090:	b29a      	uxth	r2, r3
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4413      	add	r3, r2
 8001096:	b298      	uxth	r0, r3
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	3330      	adds	r3, #48	; 0x30
 800109c:	b2da      	uxtb	r2, r3
 800109e:	8c3c      	ldrh	r4, [r7, #32]
 80010a0:	88b9      	ldrh	r1, [r7, #4]
 80010a2:	2300      	movs	r3, #0
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4623      	mov	r3, r4
 80010b2:	f7ff fea5 	bl	8000e00 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	787b      	ldrb	r3, [r7, #1]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3a1      	bcc.n	8001008 <lcd_ShowIntNum+0x30>
	}
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	cccccccd 	.word	0xcccccccd

080010d4 <lcd_ShowString>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b08b      	sub	sp, #44	; 0x2c
 80010d8:	af04      	add	r7, sp, #16
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	461a      	mov	r2, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	81fb      	strh	r3, [r7, #14]
 80010e2:	460b      	mov	r3, r1
 80010e4:	81bb      	strh	r3, [r7, #12]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80010f2:	e048      	b.n	8001186 <lcd_ShowString+0xb2>
		if (!bHz) {
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d145      	bne.n	8001186 <lcd_ShowString+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80010fa:	89fa      	ldrh	r2, [r7, #14]
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <lcd_ShowString+0xc4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	1acb      	subs	r3, r1, r3
 800110c:	429a      	cmp	r2, r3
 800110e:	dc3f      	bgt.n	8001190 <lcd_ShowString+0xbc>
 8001110:	89ba      	ldrh	r2, [r7, #12]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <lcd_ShowString+0xc4>)
 8001114:	885b      	ldrh	r3, [r3, #2]
 8001116:	4619      	mov	r1, r3
 8001118:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800111c:	1acb      	subs	r3, r1, r3
 800111e:	429a      	cmp	r2, r3
 8001120:	dc36      	bgt.n	8001190 <lcd_ShowString+0xbc>
				return;
			if (*str > 0x80)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b80      	cmp	r3, #128	; 0x80
 8001128:	d902      	bls.n	8001130 <lcd_ShowString+0x5c>
				bHz = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
 800112e:	e02a      	b.n	8001186 <lcd_ShowString+0xb2>
			else {
				if (*str == 0x0D) {
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b0d      	cmp	r3, #13
 8001136:	d10b      	bne.n	8001150 <lcd_ShowString+0x7c>
					y += sizey;
 8001138:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800113c:	b29a      	uxth	r2, r3
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001144:	8abb      	ldrh	r3, [r7, #20]
 8001146:	81fb      	strh	r3, [r7, #14]
					str++;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	e017      	b.n	8001180 <lcd_ShowString+0xac>
				} else {
					lcd_ShowChar(x, y, *str, fc, bc, sizey, mode);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	88fc      	ldrh	r4, [r7, #6]
 8001156:	89b9      	ldrh	r1, [r7, #12]
 8001158:	89f8      	ldrh	r0, [r7, #14]
 800115a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	4623      	mov	r3, r4
 800116c:	f7ff fe48 	bl	8000e00 <lcd_ShowChar>
					x += sizey / 2;
 8001170:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001174:	085b      	lsrs	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	4413      	add	r3, r2
 800117e:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1b2      	bne.n	80010f4 <lcd_ShowString+0x20>
 800118e:	e000      	b.n	8001192 <lcd_ShowString+0xbe>
				return;
 8001190:	bf00      	nop
			}
		}
	}
}
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	20000184 	.word	0x20000184

0800119c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <lcd_SetDir+0x44>)
 80011b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011bc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <lcd_SetDir+0x44>)
 80011c0:	22f0      	movs	r2, #240	; 0xf0
 80011c2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011c4:	e006      	b.n	80011d4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <lcd_SetDir+0x44>)
 80011c8:	22f0      	movs	r2, #240	; 0xf0
 80011ca:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <lcd_SetDir+0x44>)
 80011ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011d2:	805a      	strh	r2, [r3, #2]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000184 	.word	0x20000184

080011e4 <lcd_init>:


void lcd_init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ee:	48aa      	ldr	r0, [pc, #680]	; (8001498 <lcd_init+0x2b4>)
 80011f0:	f001 faf4 	bl	80027dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f8:	f000 ff8c 	bl	8002114 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001202:	48a5      	ldr	r0, [pc, #660]	; (8001498 <lcd_init+0x2b4>)
 8001204:	f001 faea 	bl	80027dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120c:	f000 ff82 	bl	8002114 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ffc3 	bl	800119c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001216:	20d3      	movs	r0, #211	; 0xd3
 8001218:	f7ff fd2a 	bl	8000c70 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800121c:	f7ff fd48 	bl	8000cb0 <LCD_RD_DATA>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b9d      	ldr	r3, [pc, #628]	; (800149c <lcd_init+0x2b8>)
 8001226:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001228:	f7ff fd42 	bl	8000cb0 <LCD_RD_DATA>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b9a      	ldr	r3, [pc, #616]	; (800149c <lcd_init+0x2b8>)
 8001232:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001234:	f7ff fd3c 	bl	8000cb0 <LCD_RD_DATA>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b97      	ldr	r3, [pc, #604]	; (800149c <lcd_init+0x2b8>)
 800123e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001240:	4b96      	ldr	r3, [pc, #600]	; (800149c <lcd_init+0x2b8>)
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b94      	ldr	r3, [pc, #592]	; (800149c <lcd_init+0x2b8>)
 800124a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800124c:	f7ff fd30 	bl	8000cb0 <LCD_RD_DATA>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b91      	ldr	r3, [pc, #580]	; (800149c <lcd_init+0x2b8>)
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b8f      	ldr	r3, [pc, #572]	; (800149c <lcd_init+0x2b8>)
 800125e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001260:	20cf      	movs	r0, #207	; 0xcf
 8001262:	f7ff fd05 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fd12 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800126c:	20c1      	movs	r0, #193	; 0xc1
 800126e:	f7ff fd0f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001272:	2030      	movs	r0, #48	; 0x30
 8001274:	f7ff fd0c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001278:	20ed      	movs	r0, #237	; 0xed
 800127a:	f7ff fcf9 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800127e:	2064      	movs	r0, #100	; 0x64
 8001280:	f7ff fd06 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001284:	2003      	movs	r0, #3
 8001286:	f7ff fd03 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800128a:	2012      	movs	r0, #18
 800128c:	f7ff fd00 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001290:	2081      	movs	r0, #129	; 0x81
 8001292:	f7ff fcfd 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001296:	20e8      	movs	r0, #232	; 0xe8
 8001298:	f7ff fcea 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800129c:	2085      	movs	r0, #133	; 0x85
 800129e:	f7ff fcf7 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012a2:	2010      	movs	r0, #16
 80012a4:	f7ff fcf4 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80012a8:	207a      	movs	r0, #122	; 0x7a
 80012aa:	f7ff fcf1 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80012ae:	20cb      	movs	r0, #203	; 0xcb
 80012b0:	f7ff fcde 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012b4:	2039      	movs	r0, #57	; 0x39
 80012b6:	f7ff fceb 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80012ba:	202c      	movs	r0, #44	; 0x2c
 80012bc:	f7ff fce8 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fce5 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012c6:	2034      	movs	r0, #52	; 0x34
 80012c8:	f7ff fce2 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fcdf 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012d2:	20f7      	movs	r0, #247	; 0xf7
 80012d4:	f7ff fccc 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012d8:	2020      	movs	r0, #32
 80012da:	f7ff fcd9 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012de:	20ea      	movs	r0, #234	; 0xea
 80012e0:	f7ff fcc6 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fcd3 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fcd0 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012f0:	20c0      	movs	r0, #192	; 0xc0
 80012f2:	f7ff fcbd 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012f6:	201b      	movs	r0, #27
 80012f8:	f7ff fcca 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012fc:	20c1      	movs	r0, #193	; 0xc1
 80012fe:	f7ff fcb7 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fcc4 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001308:	20c5      	movs	r0, #197	; 0xc5
 800130a:	f7ff fcb1 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800130e:	2030      	movs	r0, #48	; 0x30
 8001310:	f7ff fcbe 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001314:	2030      	movs	r0, #48	; 0x30
 8001316:	f7ff fcbb 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800131a:	20c7      	movs	r0, #199	; 0xc7
 800131c:	f7ff fca8 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001320:	20b7      	movs	r0, #183	; 0xb7
 8001322:	f7ff fcb5 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001326:	2036      	movs	r0, #54	; 0x36
 8001328:	f7ff fca2 	bl	8000c70 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800132c:	2008      	movs	r0, #8
 800132e:	f7ff fcaf 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001332:	203a      	movs	r0, #58	; 0x3a
 8001334:	f7ff fc9c 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001338:	2055      	movs	r0, #85	; 0x55
 800133a:	f7ff fca9 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800133e:	20b1      	movs	r0, #177	; 0xb1
 8001340:	f7ff fc96 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fca3 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800134a:	201a      	movs	r0, #26
 800134c:	f7ff fca0 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001350:	20b6      	movs	r0, #182	; 0xb6
 8001352:	f7ff fc8d 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001356:	200a      	movs	r0, #10
 8001358:	f7ff fc9a 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800135c:	20a2      	movs	r0, #162	; 0xa2
 800135e:	f7ff fc97 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001362:	20f2      	movs	r0, #242	; 0xf2
 8001364:	f7ff fc84 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fc91 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800136e:	2026      	movs	r0, #38	; 0x26
 8001370:	f7ff fc7e 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fc8b 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800137a:	20e0      	movs	r0, #224	; 0xe0
 800137c:	f7ff fc78 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001380:	200f      	movs	r0, #15
 8001382:	f7ff fc85 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001386:	202a      	movs	r0, #42	; 0x2a
 8001388:	f7ff fc82 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800138c:	2028      	movs	r0, #40	; 0x28
 800138e:	f7ff fc7f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001392:	2008      	movs	r0, #8
 8001394:	f7ff fc7c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001398:	200e      	movs	r0, #14
 800139a:	f7ff fc79 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800139e:	2008      	movs	r0, #8
 80013a0:	f7ff fc76 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80013a4:	2054      	movs	r0, #84	; 0x54
 80013a6:	f7ff fc73 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80013aa:	20a9      	movs	r0, #169	; 0xa9
 80013ac:	f7ff fc70 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80013b0:	2043      	movs	r0, #67	; 0x43
 80013b2:	f7ff fc6d 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80013b6:	200a      	movs	r0, #10
 80013b8:	f7ff fc6a 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013bc:	200f      	movs	r0, #15
 80013be:	f7ff fc67 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fc64 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fc61 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fc5e 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fc5b 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013da:	20e1      	movs	r0, #225	; 0xe1
 80013dc:	f7ff fc48 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fc55 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013e6:	2015      	movs	r0, #21
 80013e8:	f7ff fc52 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013ec:	2017      	movs	r0, #23
 80013ee:	f7ff fc4f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f7ff fc4c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013f8:	2011      	movs	r0, #17
 80013fa:	f7ff fc49 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013fe:	2006      	movs	r0, #6
 8001400:	f7ff fc46 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001404:	202b      	movs	r0, #43	; 0x2b
 8001406:	f7ff fc43 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800140a:	2056      	movs	r0, #86	; 0x56
 800140c:	f7ff fc40 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001410:	203c      	movs	r0, #60	; 0x3c
 8001412:	f7ff fc3d 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001416:	2005      	movs	r0, #5
 8001418:	f7ff fc3a 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800141c:	2010      	movs	r0, #16
 800141e:	f7ff fc37 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001422:	200f      	movs	r0, #15
 8001424:	f7ff fc34 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001428:	203f      	movs	r0, #63	; 0x3f
 800142a:	f7ff fc31 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800142e:	203f      	movs	r0, #63	; 0x3f
 8001430:	f7ff fc2e 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001434:	200f      	movs	r0, #15
 8001436:	f7ff fc2b 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800143a:	202b      	movs	r0, #43	; 0x2b
 800143c:	f7ff fc18 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fc25 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fc22 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff fc1f 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001452:	203f      	movs	r0, #63	; 0x3f
 8001454:	f7ff fc1c 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001458:	202a      	movs	r0, #42	; 0x2a
 800145a:	f7ff fc09 	bl	8000c70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fc16 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff fc13 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fc10 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001470:	20ef      	movs	r0, #239	; 0xef
 8001472:	f7ff fc0d 	bl	8000c90 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001476:	2011      	movs	r0, #17
 8001478:	f7ff fbfa 	bl	8000c70 <LCD_WR_REG>
	HAL_Delay(120);
 800147c:	2078      	movs	r0, #120	; 0x78
 800147e:	f000 fe49 	bl	8002114 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001482:	2029      	movs	r0, #41	; 0x29
 8001484:	f7ff fbf4 	bl	8000c70 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <lcd_init+0x2bc>)
 8001490:	f001 f9a4 	bl	80027dc <HAL_GPIO_WritePin>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40020800 	.word	0x40020800
 800149c:	20000184 	.word	0x20000184
 80014a0:	40020000 	.word	0x40020000

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f000 fdc1 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ae:	f000 f853 	bl	8001558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b2:	f7ff fa5f 	bl	8000974 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014b6:	f000 fa0b 	bl	80018d0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80014ba:	f000 fba3 	bl	8001c04 <MX_TIM2_Init>
  MX_FSMC_Init();
 80014be:	f7ff f989 	bl	80007d4 <MX_FSMC_Init>
  MX_I2C1_Init();
 80014c2:	f7ff fb5f 	bl	8000b84 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014c6:	f000 fcd1 	bl	8001e6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80014ca:	f000 f8af 	bl	800162c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff fc4c 	bl	8000d6c <lcd_Clear>
	UpdateTime();
 80014d4:	f000 f8f6 	bl	80016c4 <UpdateTime>

	while (1) {
		while (!flag_timer2);
 80014d8:	bf00      	nop
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <main+0xa4>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0fb      	beq.n	80014da <main+0x36>
		flag_timer2 = 0;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <main+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	801a      	strh	r2, [r3, #0]
		button_Scan();
 80014e8:	f7ff f83e 	bl	8000568 <button_Scan>
        if (statusSystem == MODE_1){
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <main+0xa8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <main+0x54>
            ds3231_ReadTime();
 80014f4:	f7ff f90a 	bl	800070c <ds3231_ReadTime>
//            if (ds3231_hours > set_hour)
//            {
//            	HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
//            }
        }
        TestUart();
 80014f8:	f000 f8b8 	bl	800166c <TestUart>
		if (!isRingBufferEmpty(&buffer)) {
 80014fc:	4814      	ldr	r0, [pc, #80]	; (8001550 <main+0xac>)
 80014fe:	f000 f906 	bl	800170e <isRingBufferEmpty>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <main+0x88>
			lcd_ShowIntNum(120, 220, getFromRingBuffer(&buffer), 2, YELLOW, BLACK, 16);
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <main+0xac>)
 800150a:	f000 f961 	bl	80017d0 <getFromRingBuffer>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	2310      	movs	r3, #16
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2302      	movs	r3, #2
 8001522:	21dc      	movs	r1, #220	; 0xdc
 8001524:	2078      	movs	r0, #120	; 0x78
 8001526:	f7ff fd57 	bl	8000fd8 <lcd_ShowIntNum>
 800152a:	e7d5      	b.n	80014d8 <main+0x34>
		} else {
			lcd_ShowString(100, 220, "Empty!", WHITE, BLACK, 16, 0);
 800152c:	2300      	movs	r3, #0
 800152e:	9302      	str	r3, [sp, #8]
 8001530:	2310      	movs	r3, #16
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2300      	movs	r3, #0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <main+0xb0>)
 800153e:	21dc      	movs	r1, #220	; 0xdc
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f7ff fdc7 	bl	80010d4 <lcd_ShowString>
		while (!flag_timer2);
 8001546:	e7c7      	b.n	80014d8 <main+0x34>
 8001548:	20000098 	.word	0x20000098
 800154c:	20000094 	.word	0x20000094
 8001550:	200002c4 	.word	0x200002c4
 8001554:	0800773c 	.word	0x0800773c

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b094      	sub	sp, #80	; 0x50
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2230      	movs	r2, #48	; 0x30
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f005 f8a8 	bl	80066bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	4b28      	ldr	r3, [pc, #160]	; (8001624 <SystemClock_Config+0xcc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a27      	ldr	r2, [pc, #156]	; (8001624 <SystemClock_Config+0xcc>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b25      	ldr	r3, [pc, #148]	; (8001624 <SystemClock_Config+0xcc>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <SystemClock_Config+0xd0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a21      	ldr	r2, [pc, #132]	; (8001628 <SystemClock_Config+0xd0>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <SystemClock_Config+0xd0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015bc:	2310      	movs	r3, #16
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c8:	2308      	movs	r3, #8
 80015ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015cc:	23a8      	movs	r3, #168	; 0xa8
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 fa05 	bl	80039ec <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e8:	f000 f88c 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
 80015ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2105      	movs	r1, #5
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fc66 	bl	8003edc <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001616:	f000 f875 	bl	8001704 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	3750      	adds	r7, #80	; 0x50
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000

0800162c <system_init>:

/* USER CODE BEGIN 4 */
	void system_init() {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2120      	movs	r1, #32
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <system_init+0x3c>)
 8001636:	f001 f8d1 	bl	80027dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2140      	movs	r1, #64	; 0x40
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <system_init+0x3c>)
 8001640:	f001 f8cc 	bl	80027dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2110      	movs	r1, #16
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <system_init+0x3c>)
 800164a:	f001 f8c7 	bl	80027dc <HAL_GPIO_WritePin>

		lcd_init();
 800164e:	f7ff fdc9 	bl	80011e4 <lcd_init>
		ds3231_init();
 8001652:	f7fe fff5 	bl	8000640 <ds3231_init>
		uart_init_rs232();
 8001656:	f000 fb63 	bl	8001d20 <uart_init_rs232>

		timer_init();
 800165a:	f000 f8e9 	bl	8001830 <timer_init>
		setTimer2(50);
 800165e:	2032      	movs	r0, #50	; 0x32
 8001660:	f000 f8f0 	bl	8001844 <setTimer2>
	}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000

0800166c <TestUart>:

	void TestUart() {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
		if (button_count[13] == 1) {
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <TestUart+0x40>)
 8001672:	8b5b      	ldrh	r3, [r3, #26]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d117      	bne.n	80016a8 <TestUart+0x3c>
			uart_Rs232SendNum(ds3231_hours);
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <TestUart+0x44>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fb77 	bl	8001d70 <uart_Rs232SendNum>
			uart_Rs232SendString((void*)":");
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <TestUart+0x48>)
 8001684:	f000 fb5a 	bl	8001d3c <uart_Rs232SendString>
			uart_Rs232SendNum(ds3231_min);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <TestUart+0x4c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fb6f 	bl	8001d70 <uart_Rs232SendNum>
			uart_Rs232SendString((void*)":");
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <TestUart+0x48>)
 8001694:	f000 fb52 	bl	8001d3c <uart_Rs232SendString>
			uart_Rs232SendNum(ds3231_sec);
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <TestUart+0x50>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fb67 	bl	8001d70 <uart_Rs232SendNum>
			uart_Rs232SendString((void*)"\n");
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <TestUart+0x54>)
 80016a4:	f000 fb4a 	bl	8001d3c <uart_Rs232SendString>
		}
	}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200000b0 	.word	0x200000b0
 80016b0:	200000d5 	.word	0x200000d5
 80016b4:	08007744 	.word	0x08007744
 80016b8:	200000d2 	.word	0x200000d2
 80016bc:	200000d0 	.word	0x200000d0
 80016c0:	08007748 	.word	0x08007748

080016c4 <UpdateTime>:

	void UpdateTime(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
		ds3231_Write(ADDRESS_YEAR, 24);
 80016c8:	2118      	movs	r1, #24
 80016ca:	2006      	movs	r0, #6
 80016cc:	f7fe fffc 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, 11);
 80016d0:	210b      	movs	r1, #11
 80016d2:	2005      	movs	r0, #5
 80016d4:	f7fe fff8 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, 15);
 80016d8:	210f      	movs	r1, #15
 80016da:	2004      	movs	r0, #4
 80016dc:	f7fe fff4 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, 6);
 80016e0:	2106      	movs	r1, #6
 80016e2:	2003      	movs	r0, #3
 80016e4:	f7fe fff0 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, 2);
 80016e8:	2102      	movs	r1, #2
 80016ea:	2002      	movs	r0, #2
 80016ec:	f7fe ffec 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, 45);
 80016f0:	212d      	movs	r1, #45	; 0x2d
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7fe ffe8 	bl	80006c8 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, 0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7fe ffe4 	bl	80006c8 <ds3231_Write>
	}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	e7fe      	b.n	800170c <Error_Handler+0x8>

0800170e <isRingBufferEmpty>:
void initRingBuffer(RingBuffer *buffer) {
  buffer->head = 0;
  buffer->tail = 0;
}

int isRingBufferEmpty(RingBuffer *buffer) {
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return buffer->head == buffer->tail;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	429a      	cmp	r2, r3
 8001720:	bf0c      	ite	eq
 8001722:	2301      	moveq	r3, #1
 8001724:	2300      	movne	r3, #0
 8001726:	b2db      	uxtb	r3, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <isRingBufferFull>:

int isRingBufferFull(RingBuffer *buffer) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (buffer->tail + 1) % BUFFER_SIZE == buffer->head;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	1c59      	adds	r1, r3, #1
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <isRingBufferFull+0x40>)
 8001744:	fb83 2301 	smull	r2, r3, r3, r1
 8001748:	109a      	asrs	r2, r3, #2
 800174a:	17cb      	asrs	r3, r1, #31
 800174c:	1ad2      	subs	r2, r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	1aca      	subs	r2, r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	429a      	cmp	r2, r3
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	66666667 	.word	0x66666667

08001778 <addToRingBuffer>:

void addToRingBuffer(RingBuffer *buffer, int data) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  if (isRingBufferFull(buffer)) {
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffd6 	bl	8001734 <isRingBufferFull>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <addToRingBuffer+0x1e>
    printf("Ring buffer is full!\n");
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <addToRingBuffer+0x50>)
 8001790:	f005 f80a 	bl	80067a8 <puts>
    return;
 8001794:	e015      	b.n	80017c2 <addToRingBuffer+0x4a>
  }

  buffer->data[buffer->tail] = data;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	1c59      	adds	r1, r3, #1
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <addToRingBuffer+0x54>)
 80017aa:	fb83 2301 	smull	r2, r3, r3, r1
 80017ae:	109a      	asrs	r2, r3, #2
 80017b0:	17cb      	asrs	r3, r1, #31
 80017b2:	1ad2      	subs	r2, r2, r3
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	1aca      	subs	r2, r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	080077b8 	.word	0x080077b8
 80017cc:	66666667 	.word	0x66666667

080017d0 <getFromRingBuffer>:

int getFromRingBuffer(RingBuffer *buffer) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if (isRingBufferEmpty(buffer)) {
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff98 	bl	800170e <isRingBufferEmpty>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <getFromRingBuffer+0x20>
    printf("Ring buffer is empty!\n");
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <getFromRingBuffer+0x58>)
 80017e6:	f004 ffdf 	bl	80067a8 <puts>
    return -1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e016      	b.n	800181e <getFromRingBuffer+0x4e>
  }

  int data = buffer->data[buffer->head];
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	60fb      	str	r3, [r7, #12]
  buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	1c59      	adds	r1, r3, #1
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <getFromRingBuffer+0x5c>)
 8001804:	fb83 2301 	smull	r2, r3, r3, r1
 8001808:	109a      	asrs	r2, r3, #2
 800180a:	17cb      	asrs	r3, r1, #31
 800180c:	1ad2      	subs	r2, r2, r3
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	1aca      	subs	r2, r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  return data;
 800181c:	68fb      	ldr	r3, [r7, #12]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	080077d0 	.word	0x080077d0
 800182c:	66666667 	.word	0x66666667

08001830 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <timer_init+0x10>)
 8001836:	f003 fa4d 	bl	8004cd4 <HAL_TIM_Base_Start_IT>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000218 	.word	0x20000218

08001844 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <setTimer2+0x2c>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <setTimer2+0x2c>)
 8001856:	881a      	ldrh	r2, [r3, #0]
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <setTimer2+0x30>)
 800185a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <setTimer2+0x34>)
 800185e:	2200      	movs	r2, #0
 8001860:	801a      	strh	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	2000009c 	.word	0x2000009c
 8001874:	2000009a 	.word	0x2000009a
 8001878:	20000098 	.word	0x20000098

0800187c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d114      	bne.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(timer2_counter > 0){
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018a0:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018b6:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
//		led7_Scan();
	}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	2000009a 	.word	0x2000009a
 80018c8:	20000098 	.word	0x20000098
 80018cc:	2000009c 	.word	0x2000009c

080018d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_SPI1_Init+0x64>)
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <MX_SPI1_Init+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_SPI1_Init+0x64>)
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_SPI1_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_SPI1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_SPI1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_SPI1_Init+0x64>)
 800191c:	220a      	movs	r2, #10
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_SPI1_Init+0x64>)
 8001922:	f002 fcd7 	bl	80042d4 <HAL_SPI_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800192c:	f7ff feea 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200001c0 	.word	0x200001c0
 8001938:	40013000 	.word	0x40013000

0800193c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_SPI_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12b      	bne.n	80019b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8001996:	2338      	movs	r3, #56	; 0x38
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a6:	2305      	movs	r3, #5
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 80019b2:	f000 fd77 	bl	80024a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40013000 	.word	0x40013000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_MspInit+0x4c>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 fb34 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM2_IRQHandler+0x10>)
 8001a76:	f003 f99d 	bl	8004db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000218 	.word	0x20000218

08001a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <USART1_IRQHandler+0x10>)
 8001a8a:	f003 fe65 	bl	8005758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002f4 	.word	0x200002f4

08001a98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aaa:	f3af 8000 	nop.w
 8001aae:	4601      	mov	r1, r0
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	b2ca      	uxtb	r2, r1
 8001ab8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf0      	blt.n	8001aaa <_read+0x12>
	}

return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e009      	b.n	8001af8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf1      	blt.n	8001ae4 <_write+0x12>
	}
	return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_close>:

int _close(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	return -1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	605a      	str	r2, [r3, #4]
	return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_isatty>:

int _isatty(int file)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f004 fd60 	bl	8006668 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20020000 	.word	0x20020000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	200000a0 	.word	0x200000a0
 8001bdc:	20000350 	.word	0x20000350

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c2a:	f240 3247 	movw	r2, #839	; 0x347
 8001c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c38:	2263      	movs	r2, #99	; 0x63
 8001c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c48:	4813      	ldr	r0, [pc, #76]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c4a:	f002 fff3 	bl	8004c34 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c54:	f7ff fd56 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4619      	mov	r1, r3
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c66:	f003 f9ad 	bl	8004fc4 <HAL_TIM_ConfigClockSource>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c70:	f7ff fd48 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_TIM2_Init+0x94>)
 8001c82:	f003 fbc9 	bl	8005418 <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c8c:	f7ff fd3a 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000218 	.word	0x20000218

08001c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d115      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_TIM_Base_MspInit+0x48>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_TIM_Base_MspInit+0x48>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_TIM_Base_MspInit+0x48>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201c      	movs	r0, #28
 8001cd0:	f000 fb1f 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cd4:	201c      	movs	r0, #28
 8001cd6:	f000 fb38 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <mypow_2>:
uint8_t msg[100];
RingBuffer buffer;

/* Functions */

uint32_t mypow_2(uint8_t m, uint8_t n) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001cfc:	e004      	b.n	8001d08 <mypow_2+0x20>
		result *= m;
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	71ba      	strb	r2, [r7, #6]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f5      	bne.n	8001cfe <mypow_2+0x16>
	return result;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <uart_init_rs232>:

void uart_init_rs232() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	4903      	ldr	r1, [pc, #12]	; (8001d34 <uart_init_rs232+0x14>)
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <uart_init_rs232+0x18>)
 8001d2a:	f003 fce4 	bl	80056f6 <HAL_UART_Receive_IT>
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000a4 	.word	0x200000a4
 8001d38:	200002f4 	.word	0x200002f4

08001d3c <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t *str) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*) msg, sprintf((void*) msg, "%s", str),
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4907      	ldr	r1, [pc, #28]	; (8001d64 <uart_Rs232SendString+0x28>)
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <uart_Rs232SendString+0x2c>)
 8001d4a:	f004 fd35 	bl	80067b8 <siprintf>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	230a      	movs	r3, #10
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <uart_Rs232SendString+0x2c>)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <uart_Rs232SendString+0x30>)
 8001d58:	f003 fc3b 	bl	80055d2 <HAL_UART_Transmit>
			10);
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	080077e8 	.word	0x080077e8
 8001d68:	20000260 	.word	0x20000260
 8001d6c:	200002f4 	.word	0x200002f4

08001d70 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t *bytes, uint16_t size) {
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString((void*)"0");
 8001d7e:	4825      	ldr	r0, [pc, #148]	; (8001e14 <uart_Rs232SendNum+0xa4>)
 8001d80:	f7ff ffdc 	bl	8001d3c <uart_Rs232SendString>
		return;
 8001d84:	e043      	b.n	8001e0e <uart_Rs232SendNum+0x9e>
	}
	uint8_t num_flag = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
	int i;
	if (num < 0)
		uart_Rs232SendString((void*)"-");
	for (i = 10; i > 0; i--) {
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	e03b      	b.n	8001e08 <uart_Rs232SendNum+0x98>
		if ((num / mypow_2(10, i - 1)) != 0) {
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f7ff ffa4 	bl	8001ce8 <mypow_2>
 8001da0:	4602      	mov	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d316      	bcc.n	8001dd6 <uart_Rs232SendNum+0x66>
			num_flag = 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
			sprintf((void*) msg, "%ld", num / mypow_2(10, i - 1));
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	200a      	movs	r0, #10
 8001db8:	f7ff ff96 	bl	8001ce8 <mypow_2>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4914      	ldr	r1, [pc, #80]	; (8001e18 <uart_Rs232SendNum+0xa8>)
 8001dc8:	4814      	ldr	r0, [pc, #80]	; (8001e1c <uart_Rs232SendNum+0xac>)
 8001dca:	f004 fcf5 	bl	80067b8 <siprintf>
			uart_Rs232SendString(msg);
 8001dce:	4813      	ldr	r0, [pc, #76]	; (8001e1c <uart_Rs232SendNum+0xac>)
 8001dd0:	f7ff ffb4 	bl	8001d3c <uart_Rs232SendString>
 8001dd4:	e005      	b.n	8001de2 <uart_Rs232SendNum+0x72>
		} else {
			if (num_flag != 0)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <uart_Rs232SendNum+0x72>
				uart_Rs232SendString((void*)"0");
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <uart_Rs232SendNum+0xa4>)
 8001dde:	f7ff ffad 	bl	8001d3c <uart_Rs232SendString>
		}
		num %= mypow_2(10, i - 1);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	200a      	movs	r0, #10
 8001dee:	f7ff ff7b 	bl	8001ce8 <mypow_2>
 8001df2:	4602      	mov	r2, r0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dfa:	fb02 f201 	mul.w	r2, r2, r1
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	607b      	str	r3, [r7, #4]
	for (i = 10; i > 0; i--) {
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	dcc0      	bgt.n	8001d90 <uart_Rs232SendNum+0x20>
	}
}
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	080077ec 	.word	0x080077ec
 8001e18:	080077f0 	.word	0x080077f0
 8001e1c:	20000260 	.word	0x20000260

08001e20 <HAL_UART_RxCpltCallback>:
	uart_Rs232SendString((void*)".");
	sprintf((void*) msg, "%ld", num % 100);
	uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_UART_RxCpltCallback+0x3c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d110      	bne.n	8001e54 <HAL_UART_RxCpltCallback+0x34>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001e32:	230a      	movs	r3, #10
 8001e34:	2201      	movs	r2, #1
 8001e36:	490a      	ldr	r1, [pc, #40]	; (8001e60 <HAL_UART_RxCpltCallback+0x40>)
 8001e38:	480a      	ldr	r0, [pc, #40]	; (8001e64 <HAL_UART_RxCpltCallback+0x44>)
 8001e3a:	f003 fbca 	bl	80055d2 <HAL_UART_Transmit>


		// turn on the receice interrupt
		addToRingBuffer(&buffer, receive_buffer1);
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_UART_RxCpltCallback+0x40>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4808      	ldr	r0, [pc, #32]	; (8001e68 <HAL_UART_RxCpltCallback+0x48>)
 8001e46:	f7ff fc97 	bl	8001778 <addToRingBuffer>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <HAL_UART_RxCpltCallback+0x40>)
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <HAL_UART_RxCpltCallback+0x44>)
 8001e50:	f003 fc51 	bl	80056f6 <HAL_UART_Receive_IT>
	}
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	200000a4 	.word	0x200000a4
 8001e64:	200002f4 	.word	0x200002f4
 8001e68:	200002c4 	.word	0x200002c4

08001e6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <MX_USART1_UART_Init+0x50>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	f003 fb48 	bl	8005538 <HAL_UART_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eae:	f7ff fc29 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200002f4 	.word	0x200002f4
 8001ebc:	40011000 	.word	0x40011000

08001ec0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_UART_MspInit+0x94>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d134      	bne.n	8001f4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_UART_MspInit+0x98>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0x98>)
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_UART_MspInit+0x98>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_MspInit+0x98>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <HAL_UART_MspInit+0x98>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_UART_MspInit+0x98>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_UART_MspInit+0x9c>)
 8001f38:	f000 fab4 	bl	80024a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2025      	movs	r0, #37	; 0x25
 8001f42:	f000 f9e6 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f46:	2025      	movs	r0, #37	; 0x25
 8001f48:	f000 f9ff 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40011000 	.word	0x40011000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000

08001f60 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <DEC2BCD+0x44>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	08db      	lsrs	r3, r3, #3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	b258      	sxtb	r0, r3
 8001fae:	79fa      	ldrb	r2, [r7, #7]
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <DEC2BCD+0x44>)
 8001fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb6:	08d9      	lsrs	r1, r3, #3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	4303      	orrs	r3, r0
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	cccccccd 	.word	0xcccccccd

08001fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff8:	4c0b      	ldr	r4, [pc, #44]	; (8002028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002006:	f7ff fdeb 	bl	8001be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f004 fb33 	bl	8006674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200e:	f7ff fa49 	bl	80014a4 <main>
  bx  lr    
 8002012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002020:	0800a838 	.word	0x0800a838
  ldr r2, =_sbss
 8002024:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002028:	2000034c 	.word	0x2000034c

0800202c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_Init+0x40>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_Init+0x40>)
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x40>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 f94f 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	200f      	movs	r0, #15
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fcb2 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f967 	bl	8002366 <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 f92f 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000008 	.word	0x20000008
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000338 	.word	0x20000338

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000338 	.word	0x20000338

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000008 	.word	0x20000008

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <__NVIC_SetPriority+0x50>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff8e 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff29 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff3e 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff8e 	bl	8002250 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5d 	bl	80021fc <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff31 	bl	80021c0 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff feb6 	bl	80020fc <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d008      	beq.n	80023b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e052      	b.n	8002456 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0216 	bic.w	r2, r2, #22
 80023be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <HAL_DMA_Abort+0x62>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0208 	bic.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002400:	e013      	b.n	800242a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002402:	f7ff fe7b 	bl	80020fc <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b05      	cmp	r3, #5
 800240e:	d90c      	bls.n	800242a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2203      	movs	r2, #3
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e015      	b.n	8002456 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e4      	bne.n	8002402 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	223f      	movs	r2, #63	; 0x3f
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d004      	beq.n	800247c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e00c      	b.n	8002496 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2205      	movs	r2, #5
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e16b      	b.n	8002798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 815a 	bne.w	8002792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80b4 	beq.w	8002792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a5f      	ldr	r2, [pc, #380]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002646:	4a5b      	ldr	r2, [pc, #364]	; (80027b4 <HAL_GPIO_Init+0x310>)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_GPIO_Init+0x314>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d02b      	beq.n	80026ca <HAL_GPIO_Init+0x226>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a51      	ldr	r2, [pc, #324]	; (80027bc <HAL_GPIO_Init+0x318>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d025      	beq.n	80026c6 <HAL_GPIO_Init+0x222>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a50      	ldr	r2, [pc, #320]	; (80027c0 <HAL_GPIO_Init+0x31c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <HAL_GPIO_Init+0x21e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4f      	ldr	r2, [pc, #316]	; (80027c4 <HAL_GPIO_Init+0x320>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <HAL_GPIO_Init+0x21a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4e      	ldr	r2, [pc, #312]	; (80027c8 <HAL_GPIO_Init+0x324>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0x216>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4d      	ldr	r2, [pc, #308]	; (80027cc <HAL_GPIO_Init+0x328>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00d      	beq.n	80026b6 <HAL_GPIO_Init+0x212>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4c      	ldr	r2, [pc, #304]	; (80027d0 <HAL_GPIO_Init+0x32c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <HAL_GPIO_Init+0x20e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	; (80027d4 <HAL_GPIO_Init+0x330>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_Init+0x20a>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e00e      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ae:	2308      	movs	r3, #8
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x310>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_GPIO_Init+0x334>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270e:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <HAL_GPIO_Init+0x334>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_GPIO_Init+0x334>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_GPIO_Init+0x334>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae90 	bls.w	80024c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40013c00 	.word	0x40013c00

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f8:	e003      	b.n	8002802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	041a      	lsls	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e12b      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe f9d2 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002874:	f001 fd06 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8002878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a81      	ldr	r2, [pc, #516]	; (8002a84 <HAL_I2C_Init+0x274>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d807      	bhi.n	8002894 <HAL_I2C_Init+0x84>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a80      	ldr	r2, [pc, #512]	; (8002a88 <HAL_I2C_Init+0x278>)
 8002888:	4293      	cmp	r3, r2
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e006      	b.n	80028a2 <HAL_I2C_Init+0x92>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a7d      	ldr	r2, [pc, #500]	; (8002a8c <HAL_I2C_Init+0x27c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	bf94      	ite	ls
 800289c:	2301      	movls	r3, #1
 800289e:	2300      	movhi	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0e7      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a78      	ldr	r2, [pc, #480]	; (8002a90 <HAL_I2C_Init+0x280>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <HAL_I2C_Init+0x274>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d802      	bhi.n	80028e4 <HAL_I2C_Init+0xd4>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3301      	adds	r3, #1
 80028e2:	e009      	b.n	80028f8 <HAL_I2C_Init+0xe8>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	4a69      	ldr	r2, [pc, #420]	; (8002a94 <HAL_I2C_Init+0x284>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	3301      	adds	r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800290a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	495c      	ldr	r1, [pc, #368]	; (8002a84 <HAL_I2C_Init+0x274>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d819      	bhi.n	800294c <HAL_I2C_Init+0x13c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e59      	subs	r1, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fbb1 f3f3 	udiv	r3, r1, r3
 8002926:	1c59      	adds	r1, r3, #1
 8002928:	f640 73fc 	movw	r3, #4092	; 0xffc
 800292c:	400b      	ands	r3, r1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_I2C_Init+0x138>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e59      	subs	r1, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002946:	e051      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 8002948:	2304      	movs	r3, #4
 800294a:	e04f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <HAL_I2C_Init+0x168>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e012      	b.n	800299e <HAL_I2C_Init+0x18e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	0099      	lsls	r1, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Init+0x196>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e022      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10e      	bne.n	80029cc <HAL_I2C_Init+0x1bc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e58      	subs	r0, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	440b      	add	r3, r1
 80029bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ca:	e00f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	0099      	lsls	r1, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6809      	ldr	r1, [r1, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6911      	ldr	r1, [r2, #16]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	000186a0 	.word	0x000186a0
 8002a88:	001e847f 	.word	0x001e847f
 8002a8c:	003d08ff 	.word	0x003d08ff
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	10624dd3 	.word	0x10624dd3

08002a98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab2:	f7ff fb23 	bl	80020fc <HAL_GetTick>
 8002ab6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	f040 80d9 	bne.w	8002c78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2319      	movs	r3, #25
 8002acc:	2201      	movs	r2, #1
 8002ace:	496d      	ldr	r1, [pc, #436]	; (8002c84 <HAL_I2C_Mem_Write+0x1ec>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fdad 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0cc      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Mem_Write+0x56>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0c5      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d007      	beq.n	8002b14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2221      	movs	r2, #33	; 0x21
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a4d      	ldr	r2, [pc, #308]	; (8002c88 <HAL_I2C_Mem_Write+0x1f0>)
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b56:	88f8      	ldrh	r0, [r7, #6]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fbe4 	bl	8003334 <I2C_RequestMemoryWrite>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d052      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e081      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fe2e 	bl	80037dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06b      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d11b      	bne.n	8002c18 <HAL_I2C_Mem_Write+0x180>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d017      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1aa      	bne.n	8002b76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fe1a 	bl	800385e <I2C_WaitOnBTFFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e016      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	00100002 	.word	0x00100002
 8002c88:	ffff0000 	.word	0xffff0000

08002c8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ca6:	f7ff fa29 	bl	80020fc <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	f040 8208 	bne.w	80030ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2319      	movs	r3, #25
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	497b      	ldr	r1, [pc, #492]	; (8002eb0 <HAL_I2C_Mem_Read+0x224>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fcb3 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e1fb      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_Mem_Read+0x56>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e1f4      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d007      	beq.n	8002d08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2222      	movs	r2, #34	; 0x22
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a5b      	ldr	r2, [pc, #364]	; (8002eb4 <HAL_I2C_Mem_Read+0x228>)
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d4a:	88f8      	ldrh	r0, [r7, #6]
 8002d4c:	893a      	ldrh	r2, [r7, #8]
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	4603      	mov	r3, r0
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fb80 	bl	8003460 <I2C_RequestMemoryRead>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1b0      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d113      	bne.n	8002d9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e184      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d11b      	bne.n	8002dda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e164      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d11b      	bne.n	8002e1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	e144      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e30:	e138      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	f200 80f1 	bhi.w	800301e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d123      	bne.n	8002e8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fd49 	bl	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e139      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e8a:	e10b      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d14e      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4906      	ldr	r1, [pc, #24]	; (8002eb8 <HAL_I2C_Mem_Read+0x22c>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fbc6 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e10e      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
 8002eae:	bf00      	nop
 8002eb0:	00100002 	.word	0x00100002
 8002eb4:	ffff0000 	.word	0xffff0000
 8002eb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f30:	e0b8      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4966      	ldr	r1, [pc, #408]	; (80030d4 <HAL_I2C_Mem_Read+0x448>)
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fb77 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0bf      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	2200      	movs	r2, #0
 8002f96:	494f      	ldr	r1, [pc, #316]	; (80030d4 <HAL_I2C_Mem_Read+0x448>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fb49 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e091      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800301c:	e042      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fc5c 	bl	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e04c      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d118      	bne.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f47f aec2 	bne.w	8002e32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e000      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
  }
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3728      	adds	r7, #40	; 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	00010004 	.word	0x00010004

080030d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	460b      	mov	r3, r1
 80030e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7ff f808 	bl	80020fc <HAL_GetTick>
 80030ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	f040 8111 	bne.w	8003322 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	4988      	ldr	r1, [pc, #544]	; (800332c <HAL_I2C_IsDeviceReady+0x254>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fa90 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	e104      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_I2C_IsDeviceReady+0x50>
 8003124:	2302      	movs	r3, #2
 8003126:	e0fd      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x24c>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d007      	beq.n	800314e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2224      	movs	r2, #36	; 0x24
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a70      	ldr	r2, [pc, #448]	; (8003330 <HAL_I2C_IsDeviceReady+0x258>)
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003180:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa4e 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a8:	d103      	bne.n	80031b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0b6      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fe ff99 	bl	80020fc <HAL_GetTick>
 80031ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031fa:	e025      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7fe ff7e 	bl	80020fc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <HAL_I2C_IsDeviceReady+0x13a>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22a0      	movs	r2, #160	; 0xa0
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2ba0      	cmp	r3, #160	; 0xa0
 8003252:	d005      	beq.n	8003260 <HAL_I2C_IsDeviceReady+0x188>
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_I2C_IsDeviceReady+0x188>
 800325a:	7dbb      	ldrb	r3, [r7, #22]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0cd      	beq.n	80031fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d129      	bne.n	80032ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003284:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2319      	movs	r3, #25
 80032a2:	2201      	movs	r2, #1
 80032a4:	4921      	ldr	r1, [pc, #132]	; (800332c <HAL_I2C_IsDeviceReady+0x254>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f9c2 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e036      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e02c      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2319      	movs	r3, #25
 80032ea:	2201      	movs	r2, #1
 80032ec:	490f      	ldr	r1, [pc, #60]	; (800332c <HAL_I2C_IsDeviceReady+0x254>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f99e 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e012      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	3301      	adds	r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	429a      	cmp	r2, r3
 800330a:	f4ff af32 	bcc.w	8003172 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	00100002 	.word	0x00100002
 8003330:	ffff0000 	.word	0xffff0000

08003334 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4603      	mov	r3, r0
 8003344:	817b      	strh	r3, [r7, #10]
 8003346:	460b      	mov	r3, r1
 8003348:	813b      	strh	r3, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2200      	movs	r2, #0
 8003366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f960 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003384:	d103      	bne.n	800338e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e05f      	b.n	8003452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	492d      	ldr	r1, [pc, #180]	; (800345c <I2C_RequestMemoryWrite+0x128>)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f998 	bl	80036de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e04c      	b.n	8003452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fa02 	bl	80037dc <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e02b      	b.n	8003452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]
 800340a:	e021      	b.n	8003450 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800340c:	893b      	ldrh	r3, [r7, #8]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	b29b      	uxth	r3, r3
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	6a39      	ldr	r1, [r7, #32]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f9dc 	bl	80037dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b04      	cmp	r3, #4
 8003430:	d107      	bne.n	8003442 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e005      	b.n	8003452 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003446:	893b      	ldrh	r3, [r7, #8]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	00010002 	.word	0x00010002

08003460 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003488:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003498:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8c2 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c0:	d103      	bne.n	80034ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0aa      	b.n	8003624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ce:	897b      	ldrh	r3, [r7, #10]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	6a3a      	ldr	r2, [r7, #32]
 80034e2:	4952      	ldr	r1, [pc, #328]	; (800362c <I2C_RequestMemoryRead+0x1cc>)
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f8fa 	bl	80036de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e097      	b.n	8003624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350c:	6a39      	ldr	r1, [r7, #32]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f964 	bl	80037dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b04      	cmp	r3, #4
 8003520:	d107      	bne.n	8003532 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003530:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e076      	b.n	8003624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800353c:	893b      	ldrh	r3, [r7, #8]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	e021      	b.n	800358c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003548:	893b      	ldrh	r3, [r7, #8]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b29b      	uxth	r3, r3
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	6a39      	ldr	r1, [r7, #32]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f93e 	bl	80037dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b04      	cmp	r3, #4
 800356c:	d107      	bne.n	800357e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e050      	b.n	8003624 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003582:	893b      	ldrh	r3, [r7, #8]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	6a39      	ldr	r1, [r7, #32]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f923 	bl	80037dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d107      	bne.n	80035b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e035      	b.n	8003624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f82b 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	d103      	bne.n	80035f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e013      	b.n	8003624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035fc:	897b      	ldrh	r3, [r7, #10]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	b2da      	uxtb	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	6a3a      	ldr	r2, [r7, #32]
 8003610:	4906      	ldr	r1, [pc, #24]	; (800362c <I2C_RequestMemoryRead+0x1cc>)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f863 	bl	80036de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	00010002 	.word	0x00010002

08003630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003640:	e025      	b.n	800368e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d021      	beq.n	800368e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364a:	f7fe fd57 	bl	80020fc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d116      	bne.n	800368e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e023      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10d      	bne.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	e00c      	b.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0b6      	beq.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ec:	e051      	b.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fc:	d123      	bne.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e046      	b.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d021      	beq.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fe fcd5 	bl	80020fc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d116      	bne.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e020      	b.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d10c      	bne.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e00b      	b.n	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	43da      	mvns	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d18d      	bne.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e8:	e02d      	b.n	8003846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f8ce 	bl	800398c <I2C_IsAcknowledgeFailed>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e02d      	b.n	8003856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d021      	beq.n	8003846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fe fc7b 	bl	80020fc <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e007      	b.n	8003856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d1ca      	bne.n	80037ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800386a:	e02d      	b.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f88d 	bl	800398c <I2C_IsAcknowledgeFailed>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e02d      	b.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d021      	beq.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003884:	f7fe fc3a 	bl	80020fc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e007      	b.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d1ca      	bne.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ec:	e042      	b.n	8003974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d119      	bne.n	8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e029      	b.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fe fbe4 	bl	80020fc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e007      	b.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d1b5      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d11b      	bne.n	80039dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e264      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d075      	beq.n	8003af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a0a:	4ba3      	ldr	r3, [pc, #652]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4ba0      	ldr	r3, [pc, #640]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b9d      	ldr	r3, [pc, #628]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b99      	ldr	r3, [pc, #612]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e23f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b91      	ldr	r3, [pc, #580]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a90      	ldr	r2, [pc, #576]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x98>
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a8a      	ldr	r2, [pc, #552]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a87      	ldr	r2, [pc, #540]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a84:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a83      	ldr	r2, [pc, #524]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b81      	ldr	r3, [pc, #516]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a80      	ldr	r2, [pc, #512]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fb2a 	bl	80020fc <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe fb26 	bl	80020fc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e204      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe fb16 	bl	80020fc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fe fb12 	bl	80020fc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1f0      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0e:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1c4      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4952      	ldr	r1, [pc, #328]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	e03a      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCC_OscConfig+0x2b0>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe facb 	bl	80020fc <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fac7 	bl	80020fc <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1a5      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b46      	ldr	r3, [pc, #280]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4940      	ldr	r1, [pc, #256]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_OscConfig+0x2b0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe faaa 	bl	80020fc <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fe faa6 	bl	80020fc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e184      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d030      	beq.n	8003c38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fe fa8a 	bl	80020fc <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fe fa86 	bl	80020fc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e164      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x200>
 8003c0a:	e015      	b.n	8003c38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fe fa73 	bl	80020fc <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7fe fa6f 	bl	80020fc <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e14d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a0 	beq.w	8003d86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d121      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fa35 	bl	80020fc <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	e011      	b.n	8003cba <HAL_RCC_OscConfig+0x2ce>
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	42470000 	.word	0x42470000
 8003ca0:	42470e80 	.word	0x42470e80
 8003ca4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7fe fa28 	bl	80020fc <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e106      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cba:	4b85      	ldr	r3, [pc, #532]	; (8003ed0 <HAL_RCC_OscConfig+0x4e4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCC_OscConfig+0x2f0>
 8003cce:	4b81      	ldr	r3, [pc, #516]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a80      	ldr	r2, [pc, #512]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cda:	e01c      	b.n	8003d16 <HAL_RCC_OscConfig+0x32a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x312>
 8003ce4:	4b7b      	ldr	r3, [pc, #492]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a7a      	ldr	r2, [pc, #488]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	4b78      	ldr	r3, [pc, #480]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a77      	ldr	r2, [pc, #476]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCC_OscConfig+0x32a>
 8003cfe:	4b75      	ldr	r3, [pc, #468]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a74      	ldr	r2, [pc, #464]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0a:	4b72      	ldr	r3, [pc, #456]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe f9ed 	bl	80020fc <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe f9e9 	bl	80020fc <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0c5      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	4b65      	ldr	r3, [pc, #404]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ee      	beq.n	8003d26 <HAL_RCC_OscConfig+0x33a>
 8003d48:	e014      	b.n	8003d74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe f9d7 	bl	80020fc <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe f9d3 	bl	80020fc <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0af      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d68:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ee      	bne.n	8003d52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b56      	ldr	r3, [pc, #344]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a55      	ldr	r2, [pc, #340]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 809b 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d05c      	beq.n	8003e56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d141      	bne.n	8003e28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da4:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fe f9a7 	bl	80020fc <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fe f9a3 	bl	80020fc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e081      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	3b01      	subs	r3, #1
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	061b      	lsls	r3, r3, #24
 8003df4:	4937      	ldr	r1, [pc, #220]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dfa:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe f97c 	bl	80020fc <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe f978 	bl	80020fc <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e056      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x41c>
 8003e26:	e04e      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe f965 	bl	80020fc <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe f961 	bl	80020fc <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e03f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x44a>
 8003e54:	e037      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e032      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e62:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d028      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d121      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d11a      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	42470060 	.word	0x42470060

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cc      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b68      	ldr	r3, [pc, #416]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90c      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b65      	ldr	r3, [pc, #404]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e067      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4934      	ldr	r1, [pc, #208]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fe f896 	bl	80020fc <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7fe f892 	bl	80020fc <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d20c      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fff6 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	0800a778 	.word	0x0800a778
 80040a0:	20000000 	.word	0x20000000
 80040a4:	20000004 	.word	0x20000004

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	2300      	movs	r3, #0
 80040ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c0:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d00d      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x40>
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	f200 80bd 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x1a4>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x34>
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040da:	e0b7      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b61      	ldr	r3, [pc, #388]	; (8004264 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040de:	60bb      	str	r3, [r7, #8]
       break;
 80040e0:	e0b7      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e2:	4b61      	ldr	r3, [pc, #388]	; (8004268 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040e4:	60bb      	str	r3, [r7, #8]
      break;
 80040e6:	e0b4      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e8:	4b5d      	ldr	r3, [pc, #372]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f2:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d04d      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fe:	4b58      	ldr	r3, [pc, #352]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	461a      	mov	r2, r3
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800410e:	f04f 0100 	mov.w	r1, #0
 8004112:	ea02 0800 	and.w	r8, r2, r0
 8004116:	ea03 0901 	and.w	r9, r3, r1
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	014b      	lsls	r3, r1, #5
 8004128:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800412c:	0142      	lsls	r2, r0, #5
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	ebb0 0008 	subs.w	r0, r0, r8
 8004136:	eb61 0109 	sbc.w	r1, r1, r9
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	018b      	lsls	r3, r1, #6
 8004144:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004148:	0182      	lsls	r2, r0, #6
 800414a:	1a12      	subs	r2, r2, r0
 800414c:	eb63 0301 	sbc.w	r3, r3, r1
 8004150:	f04f 0000 	mov.w	r0, #0
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	00d9      	lsls	r1, r3, #3
 800415a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800415e:	00d0      	lsls	r0, r2, #3
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	eb12 0208 	adds.w	r2, r2, r8
 8004168:	eb43 0309 	adc.w	r3, r3, r9
 800416c:	f04f 0000 	mov.w	r0, #0
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	0259      	lsls	r1, r3, #9
 8004176:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800417a:	0250      	lsls	r0, r2, #9
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	461a      	mov	r2, r3
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	f7fc f870 	bl	8000270 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4613      	mov	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e04a      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	461a      	mov	r2, r3
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041aa:	f04f 0100 	mov.w	r1, #0
 80041ae:	ea02 0400 	and.w	r4, r2, r0
 80041b2:	ea03 0501 	and.w	r5, r3, r1
 80041b6:	4620      	mov	r0, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	014b      	lsls	r3, r1, #5
 80041c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041c8:	0142      	lsls	r2, r0, #5
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	1b00      	subs	r0, r0, r4
 80041d0:	eb61 0105 	sbc.w	r1, r1, r5
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	018b      	lsls	r3, r1, #6
 80041de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041e2:	0182      	lsls	r2, r0, #6
 80041e4:	1a12      	subs	r2, r2, r0
 80041e6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ea:	f04f 0000 	mov.w	r0, #0
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	00d9      	lsls	r1, r3, #3
 80041f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041f8:	00d0      	lsls	r0, r2, #3
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	1912      	adds	r2, r2, r4
 8004200:	eb45 0303 	adc.w	r3, r5, r3
 8004204:	f04f 0000 	mov.w	r0, #0
 8004208:	f04f 0100 	mov.w	r1, #0
 800420c:	0299      	lsls	r1, r3, #10
 800420e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004212:	0290      	lsls	r0, r2, #10
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	f7fc f824 	bl	8000270 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4613      	mov	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	60bb      	str	r3, [r7, #8]
      break;
 800424a:	e002      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800424e:	60bb      	str	r3, [r7, #8]
      break;
 8004250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004252:	68bb      	ldr	r3, [r7, #8]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	00f42400 	.word	0x00f42400
 8004268:	007a1200 	.word	0x007a1200

0800426c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_RCC_GetHCLKFreq+0x14>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000000 	.word	0x20000000

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004288:	f7ff fff0 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0a9b      	lsrs	r3, r3, #10
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4903      	ldr	r1, [pc, #12]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0800a788 	.word	0x0800a788

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042b0:	f7ff ffdc 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0b5b      	lsrs	r3, r3, #13
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	; (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	0800a788 	.word	0x0800a788

080042d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07b      	b.n	80043de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d108      	bne.n	8004300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f6:	d009      	beq.n	800430c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	61da      	str	r2, [r3, #28]
 80042fe:	e005      	b.n	800430c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fb08 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004342:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004390:	ea42 0103 	orr.w	r1, r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	f003 0104 	and.w	r1, r3, #4
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f003 0210 	and.w	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b088      	sub	sp, #32
 80043ea:	af02      	add	r7, sp, #8
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004402:	d112      	bne.n	800442a <HAL_SPI_Receive+0x44>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10e      	bne.n	800442a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2204      	movs	r2, #4
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f8f1 	bl	8004608 <HAL_SPI_TransmitReceive>
 8004426:	4603      	mov	r3, r0
 8004428:	e0ea      	b.n	8004600 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_SPI_Receive+0x52>
 8004434:	2302      	movs	r3, #2
 8004436:	e0e3      	b.n	8004600 <HAL_SPI_Receive+0x21a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004440:	f7fd fe5c 	bl	80020fc <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004452:	2302      	movs	r3, #2
 8004454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004456:	e0ca      	b.n	80045ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SPI_Receive+0x7e>
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004468:	e0c1      	b.n	80045ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2204      	movs	r2, #4
 800446e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	88fa      	ldrh	r2, [r7, #6]
 8004482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d10f      	bne.n	80044d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d007      	beq.n	80044f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d162      	bne.n	80045be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044f8:	e02e      	b.n	8004558 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d115      	bne.n	8004534 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f103 020c 	add.w	r2, r3, #12
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004532:	e011      	b.n	8004558 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004534:	f7fd fde2 	bl	80020fc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d803      	bhi.n	800454c <HAL_SPI_Receive+0x166>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d102      	bne.n	8004552 <HAL_SPI_Receive+0x16c>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004556:	e04a      	b.n	80045ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1cb      	bne.n	80044fa <HAL_SPI_Receive+0x114>
 8004562:	e031      	b.n	80045c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d113      	bne.n	800459a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	b292      	uxth	r2, r2
 800457e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	1c9a      	adds	r2, r3, #2
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004598:	e011      	b.n	80045be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800459a:	f7fd fdaf 	bl	80020fc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d803      	bhi.n	80045b2 <HAL_SPI_Receive+0x1cc>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_Receive+0x1d2>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045bc:	e017      	b.n	80045ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1cd      	bne.n	8004564 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	6839      	ldr	r1, [r7, #0]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fa45 	bl	8004a5c <SPI_EndRxTransaction>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
 80045ea:	e000      	b.n	80045ee <HAL_SPI_Receive+0x208>
  }

error :
 80045ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004616:	2301      	movs	r3, #1
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_SPI_TransmitReceive+0x26>
 800462a:	2302      	movs	r3, #2
 800462c:	e18a      	b.n	8004944 <HAL_SPI_TransmitReceive+0x33c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004636:	f7fd fd61 	bl	80020fc <HAL_GetTick>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004654:	2b01      	cmp	r3, #1
 8004656:	d00f      	beq.n	8004678 <HAL_SPI_TransmitReceive+0x70>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465e:	d107      	bne.n	8004670 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <HAL_SPI_TransmitReceive+0x68>
 8004668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800466c:	2b04      	cmp	r3, #4
 800466e:	d003      	beq.n	8004678 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004670:	2302      	movs	r3, #2
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004676:	e15b      	b.n	8004930 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_SPI_TransmitReceive+0x82>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_SPI_TransmitReceive+0x82>
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004690:	e14e      	b.n	8004930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b04      	cmp	r3, #4
 800469c:	d003      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2205      	movs	r2, #5
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	887a      	ldrh	r2, [r7, #2]
 80046b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	887a      	ldrh	r2, [r7, #2]
 80046bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	887a      	ldrh	r2, [r7, #2]
 80046ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d007      	beq.n	80046fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004702:	d178      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x10a>
 800470c:	8b7b      	ldrh	r3, [r7, #26]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d166      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	1c9a      	adds	r2, r3, #2
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004736:	e053      	b.n	80047e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d11b      	bne.n	800477e <HAL_SPI_TransmitReceive+0x176>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d016      	beq.n	800477e <HAL_SPI_TransmitReceive+0x176>
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d113      	bne.n	800477e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d119      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x1b8>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d014      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	b292      	uxth	r2, r2
 80047a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047bc:	2301      	movs	r3, #1
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047c0:	f7fd fc9c 	bl	80020fc <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d807      	bhi.n	80047e0 <HAL_SPI_TransmitReceive+0x1d8>
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d003      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047de:	e0a7      	b.n	8004930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1a6      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x130>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1a1      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x130>
 80047f4:	e07c      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x1fc>
 80047fe:	8b7b      	ldrh	r3, [r7, #26]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d16b      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	7812      	ldrb	r2, [r2, #0]
 8004810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482a:	e057      	b.n	80048dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11c      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x26c>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x26c>
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	2b01      	cmp	r3, #1
 8004848:	d114      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d119      	bne.n	80048b6 <HAL_SPI_TransmitReceive+0x2ae>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d014      	beq.n	80048b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b2:	2301      	movs	r3, #1
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048b6:	f7fd fc21 	bl	80020fc <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d803      	bhi.n	80048ce <HAL_SPI_TransmitReceive+0x2c6>
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_TransmitReceive+0x2cc>
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048da:	e029      	b.n	8004930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1a2      	bne.n	800482c <HAL_SPI_TransmitReceive+0x224>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d19d      	bne.n	800482c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f917 	bl	8004b28 <SPI_EndRxTxTransaction>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800490c:	e010      	b.n	8004930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	e000      	b.n	8004930 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800492e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004940:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004944:	4618      	mov	r0, r3
 8004946:	3730      	adds	r7, #48	; 0x30
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800495c:	f7fd fbce 	bl	80020fc <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	4413      	add	r3, r2
 800496a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800496c:	f7fd fbc6 	bl	80020fc <HAL_GetTick>
 8004970:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004972:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	015b      	lsls	r3, r3, #5
 8004978:	0d1b      	lsrs	r3, r3, #20
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004982:	e054      	b.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d050      	beq.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800498c:	f7fd fbb6 	bl	80020fc <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	d902      	bls.n	80049a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d13d      	bne.n	8004a1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d111      	bne.n	80049e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d004      	beq.n	80049d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ce:	d107      	bne.n	80049e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d10f      	bne.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e017      	b.n	8004a4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d19b      	bne.n	8004984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000000 	.word	0x20000000

08004a5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a70:	d111      	bne.n	8004a96 <SPI_EndRxTransaction+0x3a>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7a:	d004      	beq.n	8004a86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d107      	bne.n	8004a96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9e:	d12a      	bne.n	8004af6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa8:	d012      	beq.n	8004ad0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff ff49 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02d      	beq.n	8004b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e026      	b.n	8004b1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2101      	movs	r1, #1
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff ff36 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01a      	beq.n	8004b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e013      	b.n	8004b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2101      	movs	r1, #1
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff ff23 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e000      	b.n	8004b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <SPI_EndRxTxTransaction+0x7c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <SPI_EndRxTxTransaction+0x80>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0d5b      	lsrs	r3, r3, #21
 8004b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b52:	d112      	bne.n	8004b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff fef4 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d0f2      	beq.n	8004b7a <SPI_EndRxTxTransaction+0x52>
 8004b94:	e000      	b.n	8004b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b96:	bf00      	nop
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	165e9f81 	.word	0x165e9f81

08004bac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e034      	b.n	8004c2c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7fb fec2 	bl	8000960 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3308      	adds	r3, #8
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f001 fc6e 	bl	80064c8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	f001 fcb8 	bl	800656c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6858      	ldr	r0, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	f001 fced 	bl	80065e8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	6892      	ldr	r2, [r2, #8]
 8004c16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	f041 0101 	orr.w	r1, r1, #1
 8004c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd f81e 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fa96 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e04e      	b.n	8004d8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a23      	ldr	r2, [pc, #140]	; (8004d98 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d022      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d01d      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <HAL_TIM_Base_Start_IT+0xc8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d018      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00e      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <HAL_TIM_Base_Start_IT+0xd8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x80>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b06      	cmp	r3, #6
 8004d64:	d010      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0201 	orr.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d76:	e007      	b.n	8004d88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40010400 	.word	0x40010400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40001800 	.word	0x40001800

08004db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0202 	mvn.w	r2, #2
 8004de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9b5 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f9a7 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f9b8 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0204 	mvn.w	r2, #4
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f98b 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f97d 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f98e 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0208 	mvn.w	r2, #8
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f961 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f953 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f964 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d122      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d11b      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0210 	mvn.w	r2, #16
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f937 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f929 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f93a 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10e      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0201 	mvn.w	r2, #1
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc fca2 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fae0 	bl	8005524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d10e      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d107      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f8ff 	bl	800518e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0220 	mvn.w	r2, #32
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 faaa 	bl	8005510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e0b4      	b.n	800514a <HAL_TIM_ConfigClockSource+0x186>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005018:	d03e      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0xd4>
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501e:	f200 8087 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	f000 8086 	beq.w	8005136 <HAL_TIM_ConfigClockSource+0x172>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	d87f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b70      	cmp	r3, #112	; 0x70
 8005032:	d01a      	beq.n	800506a <HAL_TIM_ConfigClockSource+0xa6>
 8005034:	2b70      	cmp	r3, #112	; 0x70
 8005036:	d87b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b60      	cmp	r3, #96	; 0x60
 800503a:	d050      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x11a>
 800503c:	2b60      	cmp	r3, #96	; 0x60
 800503e:	d877      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b50      	cmp	r3, #80	; 0x50
 8005042:	d03c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0xfa>
 8005044:	2b50      	cmp	r3, #80	; 0x50
 8005046:	d873      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d058      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x13a>
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d86f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b30      	cmp	r3, #48	; 0x30
 8005052:	d064      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x15a>
 8005054:	2b30      	cmp	r3, #48	; 0x30
 8005056:	d86b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d060      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x15a>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d867      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05c      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b10      	cmp	r3, #16
 8005066:	d05a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x15a>
 8005068:	e062      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6899      	ldr	r1, [r3, #8]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f000 f9ad 	bl	80053d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800508c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
      break;
 8005096:	e04f      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6899      	ldr	r1, [r3, #8]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f000 f996 	bl	80053d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ba:	609a      	str	r2, [r3, #8]
      break;
 80050bc:	e03c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 f90a 	bl	80052e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2150      	movs	r1, #80	; 0x50
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f963 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 80050dc:	e02c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 f929 	bl	8005342 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2160      	movs	r1, #96	; 0x60
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f953 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 80050fc:	e01c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	461a      	mov	r2, r3
 800510c:	f000 f8ea 	bl	80052e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2140      	movs	r1, #64	; 0x40
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f943 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 800511c:	e00c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f000 f93a 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 800512e:	e003      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	e000      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a40      	ldr	r2, [pc, #256]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a3d      	ldr	r2, [pc, #244]	; (80052bc <TIM_Base_SetConfig+0x118>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3c      	ldr	r2, [pc, #240]	; (80052c0 <TIM_Base_SetConfig+0x11c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3b      	ldr	r2, [pc, #236]	; (80052c4 <TIM_Base_SetConfig+0x120>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3a      	ldr	r2, [pc, #232]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2f      	ldr	r2, [pc, #188]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d02b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d027      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <TIM_Base_SetConfig+0x118>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d023      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2b      	ldr	r2, [pc, #172]	; (80052c0 <TIM_Base_SetConfig+0x11c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <TIM_Base_SetConfig+0x120>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d017      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <TIM_Base_SetConfig+0x128>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <TIM_Base_SetConfig+0x12c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <TIM_Base_SetConfig+0x130>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a25      	ldr	r2, [pc, #148]	; (80052d8 <TIM_Base_SetConfig+0x134>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a24      	ldr	r2, [pc, #144]	; (80052dc <TIM_Base_SetConfig+0x138>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <TIM_Base_SetConfig+0x13c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0xf8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40010400 	.word	0x40010400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400
 80052d4:	40014800 	.word	0x40014800
 80052d8:	40001800 	.word	0x40001800
 80052dc:	40001c00 	.word	0x40001c00
 80052e0:	40002000 	.word	0x40002000

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 030a 	bic.w	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0210 	bic.w	r2, r3, #16
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800537e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f043 0307 	orr.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800542c:	2302      	movs	r3, #2
 800542e:	e05a      	b.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d022      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d01d      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d018      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a17      	ldr	r2, [pc, #92]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a15      	ldr	r2, [pc, #84]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10c      	bne.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40001800 	.word	0x40001800

08005510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e03f      	b.n	80055ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fc fcae 	bl	8001ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fddb 	bl	8006138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b08a      	sub	sp, #40	; 0x28
 80055d6:	af02      	add	r7, sp, #8
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d17c      	bne.n	80056ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_UART_Transmit+0x2c>
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e075      	b.n	80056ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit+0x3e>
 800560c:	2302      	movs	r3, #2
 800560e:	e06e      	b.n	80056ee <HAL_UART_Transmit+0x11c>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005626:	f7fc fd69 	bl	80020fc <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x82>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005664:	e02a      	b.n	80056bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fb1f 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e036      	b.n	80056ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	3302      	adds	r3, #2
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	e007      	b.n	80056ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1cf      	bne.n	8005666 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2140      	movs	r1, #64	; 0x40
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 faef 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e006      	b.n	80056ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	4613      	mov	r3, r2
 8005702:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b20      	cmp	r3, #32
 800570e:	d11d      	bne.n	800574c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_UART_Receive_IT+0x26>
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e016      	b.n	800574e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_UART_Receive_IT+0x38>
 800572a:	2302      	movs	r3, #2
 800572c:	e00f      	b.n	800574e <HAL_UART_Receive_IT+0x58>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	461a      	mov	r2, r3
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fb24 	bl	8005d90 <UART_Start_Receive_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	e000      	b.n	800574e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b0ba      	sub	sp, #232	; 0xe8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800577e:	2300      	movs	r3, #0
 8005780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005784:	2300      	movs	r3, #0
 8005786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10f      	bne.n	80057be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <HAL_UART_IRQHandler+0x66>
 80057aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fc03 	bl	8005fc2 <UART_Receive_IT>
      return;
 80057bc:	e256      	b.n	8005c6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 80de 	beq.w	8005984 <HAL_UART_IRQHandler+0x22c>
 80057c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80d1 	beq.w	8005984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <HAL_UART_IRQHandler+0xae>
 80057ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f043 0201 	orr.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <HAL_UART_IRQHandler+0xd2>
 8005812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f043 0202 	orr.w	r2, r3, #2
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_UART_IRQHandler+0xf6>
 8005836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f043 0204 	orr.w	r2, r3, #4
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d011      	beq.n	800587e <HAL_UART_IRQHandler+0x126>
 800585a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d105      	bne.n	8005872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f043 0208 	orr.w	r2, r3, #8
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 81ed 	beq.w	8005c62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_UART_IRQHandler+0x14e>
 8005894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fb8e 	bl	8005fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <HAL_UART_IRQHandler+0x17a>
 80058ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d04f      	beq.n	8005972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fa96 	bl	8005e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d141      	bne.n	800596a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3314      	adds	r3, #20
 80058ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3314      	adds	r3, #20
 800590e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005912:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800591e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800592a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1d9      	bne.n	80058e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	2b00      	cmp	r3, #0
 8005938:	d013      	beq.n	8005962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	4a7d      	ldr	r2, [pc, #500]	; (8005b34 <HAL_UART_IRQHandler+0x3dc>)
 8005940:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	4618      	mov	r0, r3
 8005948:	f7fc fd89 	bl	800245e <HAL_DMA_Abort_IT>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800595c:	4610      	mov	r0, r2
 800595e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	e00e      	b.n	8005980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f990 	bl	8005c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005968:	e00a      	b.n	8005980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f98c 	bl	8005c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	e006      	b.n	8005980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f988 	bl	8005c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800597e:	e170      	b.n	8005c62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	bf00      	nop
    return;
 8005982:	e16e      	b.n	8005c62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	2b01      	cmp	r3, #1
 800598a:	f040 814a 	bne.w	8005c22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8143 	beq.w	8005c22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 813c 	beq.w	8005c22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	f040 80b4 	bne.w	8005b38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8140 	beq.w	8005c66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ee:	429a      	cmp	r2, r3
 80059f0:	f080 8139 	bcs.w	8005c66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a06:	f000 8088 	beq.w	8005b1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1d9      	bne.n	8005a0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3314      	adds	r3, #20
 8005a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e1      	bne.n	8005a56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3314      	adds	r3, #20
 8005ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ab8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005abc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e3      	bne.n	8005a92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aea:	f023 0310 	bic.w	r3, r3, #16
 8005aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005afc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005afe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e3      	bne.n	8005ad8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fc fc32 	bl	800237e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8b6 	bl	8005c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b30:	e099      	b.n	8005c66 <HAL_UART_IRQHandler+0x50e>
 8005b32:	bf00      	nop
 8005b34:	08005ecb 	.word	0x08005ecb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 808b 	beq.w	8005c6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8086 	beq.w	8005c6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b82:	647a      	str	r2, [r7, #68]	; 0x44
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3314      	adds	r3, #20
 8005bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bba:	633a      	str	r2, [r7, #48]	; 0x30
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e3      	bne.n	8005b96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0310 	bic.w	r3, r3, #16
 8005bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c00:	61fa      	str	r2, [r7, #28]
 8005c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69b9      	ldr	r1, [r7, #24]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e3      	bne.n	8005bdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f83e 	bl	8005c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c20:	e023      	b.n	8005c6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <HAL_UART_IRQHandler+0x4ea>
 8005c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f959 	bl	8005ef2 <UART_Transmit_IT>
    return;
 8005c40:	e014      	b.n	8005c6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <HAL_UART_IRQHandler+0x514>
 8005c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f999 	bl	8005f92 <UART_EndTransmit_IT>
    return;
 8005c60:	e004      	b.n	8005c6c <HAL_UART_IRQHandler+0x514>
    return;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <HAL_UART_IRQHandler+0x514>
      return;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_UART_IRQHandler+0x514>
      return;
 8005c6a:	bf00      	nop
  }
}
 8005c6c:	37e8      	adds	r7, #232	; 0xe8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop

08005c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b090      	sub	sp, #64	; 0x40
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc4:	e050      	b.n	8005d68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d04c      	beq.n	8005d68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd4:	f7fc fa12 	bl	80020fc <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d241      	bcs.n	8005d68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d04:	637a      	str	r2, [r7, #52]	; 0x34
 8005d06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	613b      	str	r3, [r7, #16]
   return(result);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d38:	623a      	str	r2, [r7, #32]
 8005d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e00f      	b.n	8005d88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4013      	ands	r3, r2
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	bf0c      	ite	eq
 8005d78:	2301      	moveq	r3, #1
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d09f      	beq.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3740      	adds	r7, #64	; 0x40
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	88fa      	ldrh	r2, [r7, #6]
 8005dae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2222      	movs	r2, #34	; 0x22
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695a      	ldr	r2, [r3, #20]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0220 	orr.w	r2, r2, #32
 8005df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b095      	sub	sp, #84	; 0x54
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e2c:	643a      	str	r2, [r7, #64]	; 0x40
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d119      	bne.n	8005eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f023 0310 	bic.w	r3, r3, #16
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e9c:	61ba      	str	r2, [r7, #24]
 8005e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ebe:	bf00      	nop
 8005ec0:	3754      	adds	r7, #84	; 0x54
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f7ff fecf 	bl	8005c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b21      	cmp	r3, #33	; 0x21
 8005f04:	d13e      	bne.n	8005f84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	d114      	bne.n	8005f3a <UART_Transmit_IT+0x48>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d110      	bne.n	8005f3a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	621a      	str	r2, [r3, #32]
 8005f38:	e008      	b.n	8005f4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6211      	str	r1, [r2, #32]
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10f      	bne.n	8005f80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e000      	b.n	8005f86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fe5e 	bl	8005c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b08c      	sub	sp, #48	; 0x30
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b22      	cmp	r3, #34	; 0x22
 8005fd4:	f040 80ab 	bne.w	800612e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe0:	d117      	bne.n	8006012 <UART_Receive_IT+0x50>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d113      	bne.n	8006012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006000:	b29a      	uxth	r2, r3
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	1c9a      	adds	r2, r3, #2
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
 8006010:	e026      	b.n	8006060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006024:	d007      	beq.n	8006036 <UART_Receive_IT+0x74>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <UART_Receive_IT+0x82>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e008      	b.n	8006056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29b      	uxth	r3, r3
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006070:	2b00      	cmp	r3, #0
 8006072:	d15a      	bne.n	800612a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0220 	bic.w	r2, r2, #32
 8006082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d135      	bne.n	8006120 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 0310 	bic.w	r3, r3, #16
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	623a      	str	r2, [r7, #32]
 80060dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	69f9      	ldr	r1, [r7, #28]
 80060e0:	6a3a      	ldr	r2, [r7, #32]
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d10a      	bne.n	8006112 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fdbf 	bl	8005c9c <HAL_UARTEx_RxEventCallback>
 800611e:	e002      	b.n	8006126 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7fb fe7d 	bl	8001e20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e002      	b.n	8006130 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e000      	b.n	8006130 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800612e:	2302      	movs	r3, #2
  }
}
 8006130:	4618      	mov	r0, r3
 8006132:	3730      	adds	r7, #48	; 0x30
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	b09f      	sub	sp, #124	; 0x7c
 800613e:	af00      	add	r7, sp, #0
 8006140:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800614c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614e:	68d9      	ldr	r1, [r3, #12]
 8006150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	ea40 0301 	orr.w	r3, r0, r1
 8006158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	431a      	orrs	r2, r3
 8006164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	431a      	orrs	r2, r3
 800616a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	4313      	orrs	r3, r2
 8006170:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800617c:	f021 010c 	bic.w	r1, r1, #12
 8006180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006186:	430b      	orrs	r3, r1
 8006188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800618a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	6999      	ldr	r1, [r3, #24]
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	ea40 0301 	orr.w	r3, r0, r1
 80061a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4bc5      	ldr	r3, [pc, #788]	; (80064bc <UART_SetConfig+0x384>)
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d004      	beq.n	80061b6 <UART_SetConfig+0x7e>
 80061ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4bc3      	ldr	r3, [pc, #780]	; (80064c0 <UART_SetConfig+0x388>)
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d103      	bne.n	80061be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b6:	f7fe f879 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 80061ba:	6778      	str	r0, [r7, #116]	; 0x74
 80061bc:	e002      	b.n	80061c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061be:	f7fe f861 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80061c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061cc:	f040 80b6 	bne.w	800633c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d2:	461c      	mov	r4, r3
 80061d4:	f04f 0500 	mov.w	r5, #0
 80061d8:	4622      	mov	r2, r4
 80061da:	462b      	mov	r3, r5
 80061dc:	1891      	adds	r1, r2, r2
 80061de:	6439      	str	r1, [r7, #64]	; 0x40
 80061e0:	415b      	adcs	r3, r3
 80061e2:	647b      	str	r3, [r7, #68]	; 0x44
 80061e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061e8:	1912      	adds	r2, r2, r4
 80061ea:	eb45 0303 	adc.w	r3, r5, r3
 80061ee:	f04f 0000 	mov.w	r0, #0
 80061f2:	f04f 0100 	mov.w	r1, #0
 80061f6:	00d9      	lsls	r1, r3, #3
 80061f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061fc:	00d0      	lsls	r0, r2, #3
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	1911      	adds	r1, r2, r4
 8006204:	6639      	str	r1, [r7, #96]	; 0x60
 8006206:	416b      	adcs	r3, r5
 8006208:	667b      	str	r3, [r7, #100]	; 0x64
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	461a      	mov	r2, r3
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	1891      	adds	r1, r2, r2
 8006216:	63b9      	str	r1, [r7, #56]	; 0x38
 8006218:	415b      	adcs	r3, r3
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006220:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006224:	f7fa f824 	bl	8000270 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4ba5      	ldr	r3, [pc, #660]	; (80064c4 <UART_SetConfig+0x38c>)
 800622e:	fba3 2302 	umull	r2, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	011e      	lsls	r6, r3, #4
 8006236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006238:	461c      	mov	r4, r3
 800623a:	f04f 0500 	mov.w	r5, #0
 800623e:	4622      	mov	r2, r4
 8006240:	462b      	mov	r3, r5
 8006242:	1891      	adds	r1, r2, r2
 8006244:	6339      	str	r1, [r7, #48]	; 0x30
 8006246:	415b      	adcs	r3, r3
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
 800624a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800624e:	1912      	adds	r2, r2, r4
 8006250:	eb45 0303 	adc.w	r3, r5, r3
 8006254:	f04f 0000 	mov.w	r0, #0
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	00d9      	lsls	r1, r3, #3
 800625e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006262:	00d0      	lsls	r0, r2, #3
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	1911      	adds	r1, r2, r4
 800626a:	65b9      	str	r1, [r7, #88]	; 0x58
 800626c:	416b      	adcs	r3, r5
 800626e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	461a      	mov	r2, r3
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	1891      	adds	r1, r2, r2
 800627c:	62b9      	str	r1, [r7, #40]	; 0x28
 800627e:	415b      	adcs	r3, r3
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006286:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800628a:	f7f9 fff1 	bl	8000270 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4b8c      	ldr	r3, [pc, #560]	; (80064c4 <UART_SetConfig+0x38c>)
 8006294:	fba3 1302 	umull	r1, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	2164      	movs	r1, #100	; 0x64
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	3332      	adds	r3, #50	; 0x32
 80062a6:	4a87      	ldr	r2, [pc, #540]	; (80064c4 <UART_SetConfig+0x38c>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062b4:	441e      	add	r6, r3
 80062b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b8:	4618      	mov	r0, r3
 80062ba:	f04f 0100 	mov.w	r1, #0
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	1894      	adds	r4, r2, r2
 80062c4:	623c      	str	r4, [r7, #32]
 80062c6:	415b      	adcs	r3, r3
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ce:	1812      	adds	r2, r2, r0
 80062d0:	eb41 0303 	adc.w	r3, r1, r3
 80062d4:	f04f 0400 	mov.w	r4, #0
 80062d8:	f04f 0500 	mov.w	r5, #0
 80062dc:	00dd      	lsls	r5, r3, #3
 80062de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062e2:	00d4      	lsls	r4, r2, #3
 80062e4:	4622      	mov	r2, r4
 80062e6:	462b      	mov	r3, r5
 80062e8:	1814      	adds	r4, r2, r0
 80062ea:	653c      	str	r4, [r7, #80]	; 0x50
 80062ec:	414b      	adcs	r3, r1
 80062ee:	657b      	str	r3, [r7, #84]	; 0x54
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	1891      	adds	r1, r2, r2
 80062fc:	61b9      	str	r1, [r7, #24]
 80062fe:	415b      	adcs	r3, r3
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006306:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800630a:	f7f9 ffb1 	bl	8000270 <__aeabi_uldivmod>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4b6c      	ldr	r3, [pc, #432]	; (80064c4 <UART_SetConfig+0x38c>)
 8006314:	fba3 1302 	umull	r1, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	2164      	movs	r1, #100	; 0x64
 800631c:	fb01 f303 	mul.w	r3, r1, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	3332      	adds	r3, #50	; 0x32
 8006326:	4a67      	ldr	r2, [pc, #412]	; (80064c4 <UART_SetConfig+0x38c>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	f003 0207 	and.w	r2, r3, #7
 8006332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4432      	add	r2, r6
 8006338:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800633a:	e0b9      	b.n	80064b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800633c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800633e:	461c      	mov	r4, r3
 8006340:	f04f 0500 	mov.w	r5, #0
 8006344:	4622      	mov	r2, r4
 8006346:	462b      	mov	r3, r5
 8006348:	1891      	adds	r1, r2, r2
 800634a:	6139      	str	r1, [r7, #16]
 800634c:	415b      	adcs	r3, r3
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006354:	1912      	adds	r2, r2, r4
 8006356:	eb45 0303 	adc.w	r3, r5, r3
 800635a:	f04f 0000 	mov.w	r0, #0
 800635e:	f04f 0100 	mov.w	r1, #0
 8006362:	00d9      	lsls	r1, r3, #3
 8006364:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006368:	00d0      	lsls	r0, r2, #3
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	eb12 0804 	adds.w	r8, r2, r4
 8006372:	eb43 0905 	adc.w	r9, r3, r5
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4618      	mov	r0, r3
 800637c:	f04f 0100 	mov.w	r1, #0
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	008b      	lsls	r3, r1, #2
 800638a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800638e:	0082      	lsls	r2, r0, #2
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7f9 ff6c 	bl	8000270 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4b49      	ldr	r3, [pc, #292]	; (80064c4 <UART_SetConfig+0x38c>)
 800639e:	fba3 2302 	umull	r2, r3, r3, r2
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	011e      	lsls	r6, r3, #4
 80063a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a8:	4618      	mov	r0, r3
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	1894      	adds	r4, r2, r2
 80063b4:	60bc      	str	r4, [r7, #8]
 80063b6:	415b      	adcs	r3, r3
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063be:	1812      	adds	r2, r2, r0
 80063c0:	eb41 0303 	adc.w	r3, r1, r3
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	f04f 0500 	mov.w	r5, #0
 80063cc:	00dd      	lsls	r5, r3, #3
 80063ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063d2:	00d4      	lsls	r4, r2, #3
 80063d4:	4622      	mov	r2, r4
 80063d6:	462b      	mov	r3, r5
 80063d8:	1814      	adds	r4, r2, r0
 80063da:	64bc      	str	r4, [r7, #72]	; 0x48
 80063dc:	414b      	adcs	r3, r1
 80063de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	008b      	lsls	r3, r1, #2
 80063f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063f8:	0082      	lsls	r2, r0, #2
 80063fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80063fe:	f7f9 ff37 	bl	8000270 <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <UART_SetConfig+0x38c>)
 8006408:	fba3 1302 	umull	r1, r3, r3, r2
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	2164      	movs	r1, #100	; 0x64
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	3332      	adds	r3, #50	; 0x32
 800641a:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <UART_SetConfig+0x38c>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006426:	441e      	add	r6, r3
 8006428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800642a:	4618      	mov	r0, r3
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	1894      	adds	r4, r2, r2
 8006436:	603c      	str	r4, [r7, #0]
 8006438:	415b      	adcs	r3, r3
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006440:	1812      	adds	r2, r2, r0
 8006442:	eb41 0303 	adc.w	r3, r1, r3
 8006446:	f04f 0400 	mov.w	r4, #0
 800644a:	f04f 0500 	mov.w	r5, #0
 800644e:	00dd      	lsls	r5, r3, #3
 8006450:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006454:	00d4      	lsls	r4, r2, #3
 8006456:	4622      	mov	r2, r4
 8006458:	462b      	mov	r3, r5
 800645a:	eb12 0a00 	adds.w	sl, r2, r0
 800645e:	eb43 0b01 	adc.w	fp, r3, r1
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	4618      	mov	r0, r3
 8006468:	f04f 0100 	mov.w	r1, #0
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	008b      	lsls	r3, r1, #2
 8006476:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800647a:	0082      	lsls	r2, r0, #2
 800647c:	4650      	mov	r0, sl
 800647e:	4659      	mov	r1, fp
 8006480:	f7f9 fef6 	bl	8000270 <__aeabi_uldivmod>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <UART_SetConfig+0x38c>)
 800648a:	fba3 1302 	umull	r1, r3, r3, r2
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	2164      	movs	r1, #100	; 0x64
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	3332      	adds	r3, #50	; 0x32
 800649c:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <UART_SetConfig+0x38c>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4432      	add	r2, r6
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	377c      	adds	r7, #124	; 0x7c
 80064b4:	46bd      	mov	sp, r7
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	bf00      	nop
 80064bc:	40011000 	.word	0x40011000
 80064c0:	40011400 	.word	0x40011400
 80064c4:	51eb851f 	.word	0x51eb851f

080064c8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4b20      	ldr	r3, [pc, #128]	; (8006568 <FSMC_NORSRAM_Init+0xa0>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80064f2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80064f8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80064fe:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006504:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800650a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006510:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006516:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800651c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006522:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006528:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800652e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006534:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d103      	bne.n	800654c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	fff00080 	.word	0xfff00080

0800656c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006586:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800658e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800659a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80065a2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80065aa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80065b4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	3b02      	subs	r3, #2
 80065bc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80065be:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80065c4:	4313      	orrs	r3, r2
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6979      	ldr	r1, [r7, #20]
 80065d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006600:	d122      	bne.n	8006648 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4b15      	ldr	r3, [pc, #84]	; (8006664 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006610:	4013      	ands	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800661e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006626:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800662e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006634:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6979      	ldr	r1, [r7, #20]
 8006642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006646:	e005      	b.n	8006654 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	cff00000 	.word	0xcff00000

08006668 <__errno>:
 8006668:	4b01      	ldr	r3, [pc, #4]	; (8006670 <__errno+0x8>)
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	2000000c 	.word	0x2000000c

08006674 <__libc_init_array>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4d0d      	ldr	r5, [pc, #52]	; (80066ac <__libc_init_array+0x38>)
 8006678:	4c0d      	ldr	r4, [pc, #52]	; (80066b0 <__libc_init_array+0x3c>)
 800667a:	1b64      	subs	r4, r4, r5
 800667c:	10a4      	asrs	r4, r4, #2
 800667e:	2600      	movs	r6, #0
 8006680:	42a6      	cmp	r6, r4
 8006682:	d109      	bne.n	8006698 <__libc_init_array+0x24>
 8006684:	4d0b      	ldr	r5, [pc, #44]	; (80066b4 <__libc_init_array+0x40>)
 8006686:	4c0c      	ldr	r4, [pc, #48]	; (80066b8 <__libc_init_array+0x44>)
 8006688:	f001 f84c 	bl	8007724 <_init>
 800668c:	1b64      	subs	r4, r4, r5
 800668e:	10a4      	asrs	r4, r4, #2
 8006690:	2600      	movs	r6, #0
 8006692:	42a6      	cmp	r6, r4
 8006694:	d105      	bne.n	80066a2 <__libc_init_array+0x2e>
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f855 3b04 	ldr.w	r3, [r5], #4
 800669c:	4798      	blx	r3
 800669e:	3601      	adds	r6, #1
 80066a0:	e7ee      	b.n	8006680 <__libc_init_array+0xc>
 80066a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a6:	4798      	blx	r3
 80066a8:	3601      	adds	r6, #1
 80066aa:	e7f2      	b.n	8006692 <__libc_init_array+0x1e>
 80066ac:	0800a830 	.word	0x0800a830
 80066b0:	0800a830 	.word	0x0800a830
 80066b4:	0800a830 	.word	0x0800a830
 80066b8:	0800a834 	.word	0x0800a834

080066bc <memset>:
 80066bc:	4402      	add	r2, r0
 80066be:	4603      	mov	r3, r0
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d100      	bne.n	80066c6 <memset+0xa>
 80066c4:	4770      	bx	lr
 80066c6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ca:	e7f9      	b.n	80066c0 <memset+0x4>

080066cc <_puts_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	460e      	mov	r6, r1
 80066d0:	4605      	mov	r5, r0
 80066d2:	b118      	cbz	r0, 80066dc <_puts_r+0x10>
 80066d4:	6983      	ldr	r3, [r0, #24]
 80066d6:	b90b      	cbnz	r3, 80066dc <_puts_r+0x10>
 80066d8:	f000 fa68 	bl	8006bac <__sinit>
 80066dc:	69ab      	ldr	r3, [r5, #24]
 80066de:	68ac      	ldr	r4, [r5, #8]
 80066e0:	b913      	cbnz	r3, 80066e8 <_puts_r+0x1c>
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 fa62 	bl	8006bac <__sinit>
 80066e8:	4b2c      	ldr	r3, [pc, #176]	; (800679c <_puts_r+0xd0>)
 80066ea:	429c      	cmp	r4, r3
 80066ec:	d120      	bne.n	8006730 <_puts_r+0x64>
 80066ee:	686c      	ldr	r4, [r5, #4]
 80066f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066f2:	07db      	lsls	r3, r3, #31
 80066f4:	d405      	bmi.n	8006702 <_puts_r+0x36>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	0598      	lsls	r0, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_puts_r+0x36>
 80066fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fe:	f000 faf3 	bl	8006ce8 <__retarget_lock_acquire_recursive>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	0719      	lsls	r1, r3, #28
 8006706:	d51d      	bpl.n	8006744 <_puts_r+0x78>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	b1db      	cbz	r3, 8006744 <_puts_r+0x78>
 800670c:	3e01      	subs	r6, #1
 800670e:	68a3      	ldr	r3, [r4, #8]
 8006710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006714:	3b01      	subs	r3, #1
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	bb39      	cbnz	r1, 800676a <_puts_r+0x9e>
 800671a:	2b00      	cmp	r3, #0
 800671c:	da38      	bge.n	8006790 <_puts_r+0xc4>
 800671e:	4622      	mov	r2, r4
 8006720:	210a      	movs	r1, #10
 8006722:	4628      	mov	r0, r5
 8006724:	f000 f868 	bl	80067f8 <__swbuf_r>
 8006728:	3001      	adds	r0, #1
 800672a:	d011      	beq.n	8006750 <_puts_r+0x84>
 800672c:	250a      	movs	r5, #10
 800672e:	e011      	b.n	8006754 <_puts_r+0x88>
 8006730:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <_puts_r+0xd4>)
 8006732:	429c      	cmp	r4, r3
 8006734:	d101      	bne.n	800673a <_puts_r+0x6e>
 8006736:	68ac      	ldr	r4, [r5, #8]
 8006738:	e7da      	b.n	80066f0 <_puts_r+0x24>
 800673a:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <_puts_r+0xd8>)
 800673c:	429c      	cmp	r4, r3
 800673e:	bf08      	it	eq
 8006740:	68ec      	ldreq	r4, [r5, #12]
 8006742:	e7d5      	b.n	80066f0 <_puts_r+0x24>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f8a8 	bl	800689c <__swsetup_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0dd      	beq.n	800670c <_puts_r+0x40>
 8006750:	f04f 35ff 	mov.w	r5, #4294967295
 8006754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006756:	07da      	lsls	r2, r3, #31
 8006758:	d405      	bmi.n	8006766 <_puts_r+0x9a>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	059b      	lsls	r3, r3, #22
 800675e:	d402      	bmi.n	8006766 <_puts_r+0x9a>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f000 fac2 	bl	8006cea <__retarget_lock_release_recursive>
 8006766:	4628      	mov	r0, r5
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	2b00      	cmp	r3, #0
 800676c:	da04      	bge.n	8006778 <_puts_r+0xac>
 800676e:	69a2      	ldr	r2, [r4, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	dc06      	bgt.n	8006782 <_puts_r+0xb6>
 8006774:	290a      	cmp	r1, #10
 8006776:	d004      	beq.n	8006782 <_puts_r+0xb6>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	6022      	str	r2, [r4, #0]
 800677e:	7019      	strb	r1, [r3, #0]
 8006780:	e7c5      	b.n	800670e <_puts_r+0x42>
 8006782:	4622      	mov	r2, r4
 8006784:	4628      	mov	r0, r5
 8006786:	f000 f837 	bl	80067f8 <__swbuf_r>
 800678a:	3001      	adds	r0, #1
 800678c:	d1bf      	bne.n	800670e <_puts_r+0x42>
 800678e:	e7df      	b.n	8006750 <_puts_r+0x84>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	250a      	movs	r5, #10
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	701d      	strb	r5, [r3, #0]
 800679a:	e7db      	b.n	8006754 <_puts_r+0x88>
 800679c:	0800a7b4 	.word	0x0800a7b4
 80067a0:	0800a7d4 	.word	0x0800a7d4
 80067a4:	0800a794 	.word	0x0800a794

080067a8 <puts>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <puts+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f7ff bf8d 	b.w	80066cc <_puts_r>
 80067b2:	bf00      	nop
 80067b4:	2000000c 	.word	0x2000000c

080067b8 <siprintf>:
 80067b8:	b40e      	push	{r1, r2, r3}
 80067ba:	b500      	push	{lr}
 80067bc:	b09c      	sub	sp, #112	; 0x70
 80067be:	ab1d      	add	r3, sp, #116	; 0x74
 80067c0:	9002      	str	r0, [sp, #8]
 80067c2:	9006      	str	r0, [sp, #24]
 80067c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067c8:	4809      	ldr	r0, [pc, #36]	; (80067f0 <siprintf+0x38>)
 80067ca:	9107      	str	r1, [sp, #28]
 80067cc:	9104      	str	r1, [sp, #16]
 80067ce:	4909      	ldr	r1, [pc, #36]	; (80067f4 <siprintf+0x3c>)
 80067d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d4:	9105      	str	r1, [sp, #20]
 80067d6:	6800      	ldr	r0, [r0, #0]
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	a902      	add	r1, sp, #8
 80067dc:	f000 fbf0 	bl	8006fc0 <_svfiprintf_r>
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	b01c      	add	sp, #112	; 0x70
 80067e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067ec:	b003      	add	sp, #12
 80067ee:	4770      	bx	lr
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	ffff0208 	.word	0xffff0208

080067f8 <__swbuf_r>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	460e      	mov	r6, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	4605      	mov	r5, r0
 8006800:	b118      	cbz	r0, 800680a <__swbuf_r+0x12>
 8006802:	6983      	ldr	r3, [r0, #24]
 8006804:	b90b      	cbnz	r3, 800680a <__swbuf_r+0x12>
 8006806:	f000 f9d1 	bl	8006bac <__sinit>
 800680a:	4b21      	ldr	r3, [pc, #132]	; (8006890 <__swbuf_r+0x98>)
 800680c:	429c      	cmp	r4, r3
 800680e:	d12b      	bne.n	8006868 <__swbuf_r+0x70>
 8006810:	686c      	ldr	r4, [r5, #4]
 8006812:	69a3      	ldr	r3, [r4, #24]
 8006814:	60a3      	str	r3, [r4, #8]
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	071a      	lsls	r2, r3, #28
 800681a:	d52f      	bpl.n	800687c <__swbuf_r+0x84>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	b36b      	cbz	r3, 800687c <__swbuf_r+0x84>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	1ac0      	subs	r0, r0, r3
 8006826:	6963      	ldr	r3, [r4, #20]
 8006828:	b2f6      	uxtb	r6, r6
 800682a:	4283      	cmp	r3, r0
 800682c:	4637      	mov	r7, r6
 800682e:	dc04      	bgt.n	800683a <__swbuf_r+0x42>
 8006830:	4621      	mov	r1, r4
 8006832:	4628      	mov	r0, r5
 8006834:	f000 f926 	bl	8006a84 <_fflush_r>
 8006838:	bb30      	cbnz	r0, 8006888 <__swbuf_r+0x90>
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	3b01      	subs	r3, #1
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	701e      	strb	r6, [r3, #0]
 8006848:	6963      	ldr	r3, [r4, #20]
 800684a:	3001      	adds	r0, #1
 800684c:	4283      	cmp	r3, r0
 800684e:	d004      	beq.n	800685a <__swbuf_r+0x62>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	07db      	lsls	r3, r3, #31
 8006854:	d506      	bpl.n	8006864 <__swbuf_r+0x6c>
 8006856:	2e0a      	cmp	r6, #10
 8006858:	d104      	bne.n	8006864 <__swbuf_r+0x6c>
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f911 	bl	8006a84 <_fflush_r>
 8006862:	b988      	cbnz	r0, 8006888 <__swbuf_r+0x90>
 8006864:	4638      	mov	r0, r7
 8006866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <__swbuf_r+0x9c>)
 800686a:	429c      	cmp	r4, r3
 800686c:	d101      	bne.n	8006872 <__swbuf_r+0x7a>
 800686e:	68ac      	ldr	r4, [r5, #8]
 8006870:	e7cf      	b.n	8006812 <__swbuf_r+0x1a>
 8006872:	4b09      	ldr	r3, [pc, #36]	; (8006898 <__swbuf_r+0xa0>)
 8006874:	429c      	cmp	r4, r3
 8006876:	bf08      	it	eq
 8006878:	68ec      	ldreq	r4, [r5, #12]
 800687a:	e7ca      	b.n	8006812 <__swbuf_r+0x1a>
 800687c:	4621      	mov	r1, r4
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f80c 	bl	800689c <__swsetup_r>
 8006884:	2800      	cmp	r0, #0
 8006886:	d0cb      	beq.n	8006820 <__swbuf_r+0x28>
 8006888:	f04f 37ff 	mov.w	r7, #4294967295
 800688c:	e7ea      	b.n	8006864 <__swbuf_r+0x6c>
 800688e:	bf00      	nop
 8006890:	0800a7b4 	.word	0x0800a7b4
 8006894:	0800a7d4 	.word	0x0800a7d4
 8006898:	0800a794 	.word	0x0800a794

0800689c <__swsetup_r>:
 800689c:	4b32      	ldr	r3, [pc, #200]	; (8006968 <__swsetup_r+0xcc>)
 800689e:	b570      	push	{r4, r5, r6, lr}
 80068a0:	681d      	ldr	r5, [r3, #0]
 80068a2:	4606      	mov	r6, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	b125      	cbz	r5, 80068b2 <__swsetup_r+0x16>
 80068a8:	69ab      	ldr	r3, [r5, #24]
 80068aa:	b913      	cbnz	r3, 80068b2 <__swsetup_r+0x16>
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 f97d 	bl	8006bac <__sinit>
 80068b2:	4b2e      	ldr	r3, [pc, #184]	; (800696c <__swsetup_r+0xd0>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d10f      	bne.n	80068d8 <__swsetup_r+0x3c>
 80068b8:	686c      	ldr	r4, [r5, #4]
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c0:	0719      	lsls	r1, r3, #28
 80068c2:	d42c      	bmi.n	800691e <__swsetup_r+0x82>
 80068c4:	06dd      	lsls	r5, r3, #27
 80068c6:	d411      	bmi.n	80068ec <__swsetup_r+0x50>
 80068c8:	2309      	movs	r3, #9
 80068ca:	6033      	str	r3, [r6, #0]
 80068cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	e03e      	b.n	8006956 <__swsetup_r+0xba>
 80068d8:	4b25      	ldr	r3, [pc, #148]	; (8006970 <__swsetup_r+0xd4>)
 80068da:	429c      	cmp	r4, r3
 80068dc:	d101      	bne.n	80068e2 <__swsetup_r+0x46>
 80068de:	68ac      	ldr	r4, [r5, #8]
 80068e0:	e7eb      	b.n	80068ba <__swsetup_r+0x1e>
 80068e2:	4b24      	ldr	r3, [pc, #144]	; (8006974 <__swsetup_r+0xd8>)
 80068e4:	429c      	cmp	r4, r3
 80068e6:	bf08      	it	eq
 80068e8:	68ec      	ldreq	r4, [r5, #12]
 80068ea:	e7e6      	b.n	80068ba <__swsetup_r+0x1e>
 80068ec:	0758      	lsls	r0, r3, #29
 80068ee:	d512      	bpl.n	8006916 <__swsetup_r+0x7a>
 80068f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f2:	b141      	cbz	r1, 8006906 <__swsetup_r+0x6a>
 80068f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f8:	4299      	cmp	r1, r3
 80068fa:	d002      	beq.n	8006902 <__swsetup_r+0x66>
 80068fc:	4630      	mov	r0, r6
 80068fe:	f000 fa59 	bl	8006db4 <_free_r>
 8006902:	2300      	movs	r3, #0
 8006904:	6363      	str	r3, [r4, #52]	; 0x34
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	2300      	movs	r3, #0
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f043 0308 	orr.w	r3, r3, #8
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	b94b      	cbnz	r3, 8006936 <__swsetup_r+0x9a>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d003      	beq.n	8006936 <__swsetup_r+0x9a>
 800692e:	4621      	mov	r1, r4
 8006930:	4630      	mov	r0, r6
 8006932:	f000 f9ff 	bl	8006d34 <__smakebuf_r>
 8006936:	89a0      	ldrh	r0, [r4, #12]
 8006938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800693c:	f010 0301 	ands.w	r3, r0, #1
 8006940:	d00a      	beq.n	8006958 <__swsetup_r+0xbc>
 8006942:	2300      	movs	r3, #0
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	6963      	ldr	r3, [r4, #20]
 8006948:	425b      	negs	r3, r3
 800694a:	61a3      	str	r3, [r4, #24]
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	b943      	cbnz	r3, 8006962 <__swsetup_r+0xc6>
 8006950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006954:	d1ba      	bne.n	80068cc <__swsetup_r+0x30>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	0781      	lsls	r1, r0, #30
 800695a:	bf58      	it	pl
 800695c:	6963      	ldrpl	r3, [r4, #20]
 800695e:	60a3      	str	r3, [r4, #8]
 8006960:	e7f4      	b.n	800694c <__swsetup_r+0xb0>
 8006962:	2000      	movs	r0, #0
 8006964:	e7f7      	b.n	8006956 <__swsetup_r+0xba>
 8006966:	bf00      	nop
 8006968:	2000000c 	.word	0x2000000c
 800696c:	0800a7b4 	.word	0x0800a7b4
 8006970:	0800a7d4 	.word	0x0800a7d4
 8006974:	0800a794 	.word	0x0800a794

08006978 <__sflush_r>:
 8006978:	898a      	ldrh	r2, [r1, #12]
 800697a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800697e:	4605      	mov	r5, r0
 8006980:	0710      	lsls	r0, r2, #28
 8006982:	460c      	mov	r4, r1
 8006984:	d458      	bmi.n	8006a38 <__sflush_r+0xc0>
 8006986:	684b      	ldr	r3, [r1, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dc05      	bgt.n	8006998 <__sflush_r+0x20>
 800698c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	dc02      	bgt.n	8006998 <__sflush_r+0x20>
 8006992:	2000      	movs	r0, #0
 8006994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800699a:	2e00      	cmp	r6, #0
 800699c:	d0f9      	beq.n	8006992 <__sflush_r+0x1a>
 800699e:	2300      	movs	r3, #0
 80069a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069a4:	682f      	ldr	r7, [r5, #0]
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	d032      	beq.n	8006a10 <__sflush_r+0x98>
 80069aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	075a      	lsls	r2, r3, #29
 80069b0:	d505      	bpl.n	80069be <__sflush_r+0x46>
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	1ac0      	subs	r0, r0, r3
 80069b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b8:	b10b      	cbz	r3, 80069be <__sflush_r+0x46>
 80069ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069bc:	1ac0      	subs	r0, r0, r3
 80069be:	2300      	movs	r3, #0
 80069c0:	4602      	mov	r2, r0
 80069c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069c4:	6a21      	ldr	r1, [r4, #32]
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b0      	blx	r6
 80069ca:	1c43      	adds	r3, r0, #1
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	d106      	bne.n	80069de <__sflush_r+0x66>
 80069d0:	6829      	ldr	r1, [r5, #0]
 80069d2:	291d      	cmp	r1, #29
 80069d4:	d82c      	bhi.n	8006a30 <__sflush_r+0xb8>
 80069d6:	4a2a      	ldr	r2, [pc, #168]	; (8006a80 <__sflush_r+0x108>)
 80069d8:	40ca      	lsrs	r2, r1
 80069da:	07d6      	lsls	r6, r2, #31
 80069dc:	d528      	bpl.n	8006a30 <__sflush_r+0xb8>
 80069de:	2200      	movs	r2, #0
 80069e0:	6062      	str	r2, [r4, #4]
 80069e2:	04d9      	lsls	r1, r3, #19
 80069e4:	6922      	ldr	r2, [r4, #16]
 80069e6:	6022      	str	r2, [r4, #0]
 80069e8:	d504      	bpl.n	80069f4 <__sflush_r+0x7c>
 80069ea:	1c42      	adds	r2, r0, #1
 80069ec:	d101      	bne.n	80069f2 <__sflush_r+0x7a>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	b903      	cbnz	r3, 80069f4 <__sflush_r+0x7c>
 80069f2:	6560      	str	r0, [r4, #84]	; 0x54
 80069f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f6:	602f      	str	r7, [r5, #0]
 80069f8:	2900      	cmp	r1, #0
 80069fa:	d0ca      	beq.n	8006992 <__sflush_r+0x1a>
 80069fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d002      	beq.n	8006a0a <__sflush_r+0x92>
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 f9d5 	bl	8006db4 <_free_r>
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a0e:	e7c1      	b.n	8006994 <__sflush_r+0x1c>
 8006a10:	6a21      	ldr	r1, [r4, #32]
 8006a12:	2301      	movs	r3, #1
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b0      	blx	r6
 8006a18:	1c41      	adds	r1, r0, #1
 8006a1a:	d1c7      	bne.n	80069ac <__sflush_r+0x34>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0c4      	beq.n	80069ac <__sflush_r+0x34>
 8006a22:	2b1d      	cmp	r3, #29
 8006a24:	d001      	beq.n	8006a2a <__sflush_r+0xb2>
 8006a26:	2b16      	cmp	r3, #22
 8006a28:	d101      	bne.n	8006a2e <__sflush_r+0xb6>
 8006a2a:	602f      	str	r7, [r5, #0]
 8006a2c:	e7b1      	b.n	8006992 <__sflush_r+0x1a>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	e7ad      	b.n	8006994 <__sflush_r+0x1c>
 8006a38:	690f      	ldr	r7, [r1, #16]
 8006a3a:	2f00      	cmp	r7, #0
 8006a3c:	d0a9      	beq.n	8006992 <__sflush_r+0x1a>
 8006a3e:	0793      	lsls	r3, r2, #30
 8006a40:	680e      	ldr	r6, [r1, #0]
 8006a42:	bf08      	it	eq
 8006a44:	694b      	ldreq	r3, [r1, #20]
 8006a46:	600f      	str	r7, [r1, #0]
 8006a48:	bf18      	it	ne
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	eba6 0807 	sub.w	r8, r6, r7
 8006a50:	608b      	str	r3, [r1, #8]
 8006a52:	f1b8 0f00 	cmp.w	r8, #0
 8006a56:	dd9c      	ble.n	8006992 <__sflush_r+0x1a>
 8006a58:	6a21      	ldr	r1, [r4, #32]
 8006a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a5c:	4643      	mov	r3, r8
 8006a5e:	463a      	mov	r2, r7
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b0      	blx	r6
 8006a64:	2800      	cmp	r0, #0
 8006a66:	dc06      	bgt.n	8006a76 <__sflush_r+0xfe>
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	e78e      	b.n	8006994 <__sflush_r+0x1c>
 8006a76:	4407      	add	r7, r0
 8006a78:	eba8 0800 	sub.w	r8, r8, r0
 8006a7c:	e7e9      	b.n	8006a52 <__sflush_r+0xda>
 8006a7e:	bf00      	nop
 8006a80:	20400001 	.word	0x20400001

08006a84 <_fflush_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	690b      	ldr	r3, [r1, #16]
 8006a88:	4605      	mov	r5, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	b913      	cbnz	r3, 8006a94 <_fflush_r+0x10>
 8006a8e:	2500      	movs	r5, #0
 8006a90:	4628      	mov	r0, r5
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	b118      	cbz	r0, 8006a9e <_fflush_r+0x1a>
 8006a96:	6983      	ldr	r3, [r0, #24]
 8006a98:	b90b      	cbnz	r3, 8006a9e <_fflush_r+0x1a>
 8006a9a:	f000 f887 	bl	8006bac <__sinit>
 8006a9e:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <_fflush_r+0x6c>)
 8006aa0:	429c      	cmp	r4, r3
 8006aa2:	d11b      	bne.n	8006adc <_fflush_r+0x58>
 8006aa4:	686c      	ldr	r4, [r5, #4]
 8006aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0ef      	beq.n	8006a8e <_fflush_r+0xa>
 8006aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ab0:	07d0      	lsls	r0, r2, #31
 8006ab2:	d404      	bmi.n	8006abe <_fflush_r+0x3a>
 8006ab4:	0599      	lsls	r1, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_fflush_r+0x3a>
 8006ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aba:	f000 f915 	bl	8006ce8 <__retarget_lock_acquire_recursive>
 8006abe:	4628      	mov	r0, r5
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	f7ff ff59 	bl	8006978 <__sflush_r>
 8006ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac8:	07da      	lsls	r2, r3, #31
 8006aca:	4605      	mov	r5, r0
 8006acc:	d4e0      	bmi.n	8006a90 <_fflush_r+0xc>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	059b      	lsls	r3, r3, #22
 8006ad2:	d4dd      	bmi.n	8006a90 <_fflush_r+0xc>
 8006ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad6:	f000 f908 	bl	8006cea <__retarget_lock_release_recursive>
 8006ada:	e7d9      	b.n	8006a90 <_fflush_r+0xc>
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <_fflush_r+0x70>)
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	d101      	bne.n	8006ae6 <_fflush_r+0x62>
 8006ae2:	68ac      	ldr	r4, [r5, #8]
 8006ae4:	e7df      	b.n	8006aa6 <_fflush_r+0x22>
 8006ae6:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <_fflush_r+0x74>)
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	bf08      	it	eq
 8006aec:	68ec      	ldreq	r4, [r5, #12]
 8006aee:	e7da      	b.n	8006aa6 <_fflush_r+0x22>
 8006af0:	0800a7b4 	.word	0x0800a7b4
 8006af4:	0800a7d4 	.word	0x0800a7d4
 8006af8:	0800a794 	.word	0x0800a794

08006afc <std>:
 8006afc:	2300      	movs	r3, #0
 8006afe:	b510      	push	{r4, lr}
 8006b00:	4604      	mov	r4, r0
 8006b02:	e9c0 3300 	strd	r3, r3, [r0]
 8006b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b0a:	6083      	str	r3, [r0, #8]
 8006b0c:	8181      	strh	r1, [r0, #12]
 8006b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b10:	81c2      	strh	r2, [r0, #14]
 8006b12:	6183      	str	r3, [r0, #24]
 8006b14:	4619      	mov	r1, r3
 8006b16:	2208      	movs	r2, #8
 8006b18:	305c      	adds	r0, #92	; 0x5c
 8006b1a:	f7ff fdcf 	bl	80066bc <memset>
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <std+0x38>)
 8006b20:	6263      	str	r3, [r4, #36]	; 0x24
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <std+0x3c>)
 8006b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <std+0x40>)
 8006b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std+0x44>)
 8006b2c:	6224      	str	r4, [r4, #32]
 8006b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	bf00      	nop
 8006b34:	08007509 	.word	0x08007509
 8006b38:	0800752b 	.word	0x0800752b
 8006b3c:	08007563 	.word	0x08007563
 8006b40:	08007587 	.word	0x08007587

08006b44 <_cleanup_r>:
 8006b44:	4901      	ldr	r1, [pc, #4]	; (8006b4c <_cleanup_r+0x8>)
 8006b46:	f000 b8af 	b.w	8006ca8 <_fwalk_reent>
 8006b4a:	bf00      	nop
 8006b4c:	08006a85 	.word	0x08006a85

08006b50 <__sfmoreglue>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	1e4a      	subs	r2, r1, #1
 8006b54:	2568      	movs	r5, #104	; 0x68
 8006b56:	4355      	muls	r5, r2
 8006b58:	460e      	mov	r6, r1
 8006b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b5e:	f000 f979 	bl	8006e54 <_malloc_r>
 8006b62:	4604      	mov	r4, r0
 8006b64:	b140      	cbz	r0, 8006b78 <__sfmoreglue+0x28>
 8006b66:	2100      	movs	r1, #0
 8006b68:	e9c0 1600 	strd	r1, r6, [r0]
 8006b6c:	300c      	adds	r0, #12
 8006b6e:	60a0      	str	r0, [r4, #8]
 8006b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b74:	f7ff fda2 	bl	80066bc <memset>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}

08006b7c <__sfp_lock_acquire>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	; (8006b84 <__sfp_lock_acquire+0x8>)
 8006b7e:	f000 b8b3 	b.w	8006ce8 <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	20000344 	.word	0x20000344

08006b88 <__sfp_lock_release>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__sfp_lock_release+0x8>)
 8006b8a:	f000 b8ae 	b.w	8006cea <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20000344 	.word	0x20000344

08006b94 <__sinit_lock_acquire>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__sinit_lock_acquire+0x8>)
 8006b96:	f000 b8a7 	b.w	8006ce8 <__retarget_lock_acquire_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	2000033f 	.word	0x2000033f

08006ba0 <__sinit_lock_release>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__sinit_lock_release+0x8>)
 8006ba2:	f000 b8a2 	b.w	8006cea <__retarget_lock_release_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	2000033f 	.word	0x2000033f

08006bac <__sinit>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	4604      	mov	r4, r0
 8006bb0:	f7ff fff0 	bl	8006b94 <__sinit_lock_acquire>
 8006bb4:	69a3      	ldr	r3, [r4, #24]
 8006bb6:	b11b      	cbz	r3, 8006bc0 <__sinit+0x14>
 8006bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bbc:	f7ff bff0 	b.w	8006ba0 <__sinit_lock_release>
 8006bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8006bc6:	4b13      	ldr	r3, [pc, #76]	; (8006c14 <__sinit+0x68>)
 8006bc8:	4a13      	ldr	r2, [pc, #76]	; (8006c18 <__sinit+0x6c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bce:	42a3      	cmp	r3, r4
 8006bd0:	bf04      	itt	eq
 8006bd2:	2301      	moveq	r3, #1
 8006bd4:	61a3      	streq	r3, [r4, #24]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 f820 	bl	8006c1c <__sfp>
 8006bdc:	6060      	str	r0, [r4, #4]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f81c 	bl	8006c1c <__sfp>
 8006be4:	60a0      	str	r0, [r4, #8]
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f818 	bl	8006c1c <__sfp>
 8006bec:	2200      	movs	r2, #0
 8006bee:	60e0      	str	r0, [r4, #12]
 8006bf0:	2104      	movs	r1, #4
 8006bf2:	6860      	ldr	r0, [r4, #4]
 8006bf4:	f7ff ff82 	bl	8006afc <std>
 8006bf8:	68a0      	ldr	r0, [r4, #8]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	2109      	movs	r1, #9
 8006bfe:	f7ff ff7d 	bl	8006afc <std>
 8006c02:	68e0      	ldr	r0, [r4, #12]
 8006c04:	2202      	movs	r2, #2
 8006c06:	2112      	movs	r1, #18
 8006c08:	f7ff ff78 	bl	8006afc <std>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	61a3      	str	r3, [r4, #24]
 8006c10:	e7d2      	b.n	8006bb8 <__sinit+0xc>
 8006c12:	bf00      	nop
 8006c14:	0800a790 	.word	0x0800a790
 8006c18:	08006b45 	.word	0x08006b45

08006c1c <__sfp>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	4607      	mov	r7, r0
 8006c20:	f7ff ffac 	bl	8006b7c <__sfp_lock_acquire>
 8006c24:	4b1e      	ldr	r3, [pc, #120]	; (8006ca0 <__sfp+0x84>)
 8006c26:	681e      	ldr	r6, [r3, #0]
 8006c28:	69b3      	ldr	r3, [r6, #24]
 8006c2a:	b913      	cbnz	r3, 8006c32 <__sfp+0x16>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f7ff ffbd 	bl	8006bac <__sinit>
 8006c32:	3648      	adds	r6, #72	; 0x48
 8006c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	d503      	bpl.n	8006c44 <__sfp+0x28>
 8006c3c:	6833      	ldr	r3, [r6, #0]
 8006c3e:	b30b      	cbz	r3, 8006c84 <__sfp+0x68>
 8006c40:	6836      	ldr	r6, [r6, #0]
 8006c42:	e7f7      	b.n	8006c34 <__sfp+0x18>
 8006c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c48:	b9d5      	cbnz	r5, 8006c80 <__sfp+0x64>
 8006c4a:	4b16      	ldr	r3, [pc, #88]	; (8006ca4 <__sfp+0x88>)
 8006c4c:	60e3      	str	r3, [r4, #12]
 8006c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c52:	6665      	str	r5, [r4, #100]	; 0x64
 8006c54:	f000 f847 	bl	8006ce6 <__retarget_lock_init_recursive>
 8006c58:	f7ff ff96 	bl	8006b88 <__sfp_lock_release>
 8006c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c64:	6025      	str	r5, [r4, #0]
 8006c66:	61a5      	str	r5, [r4, #24]
 8006c68:	2208      	movs	r2, #8
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c70:	f7ff fd24 	bl	80066bc <memset>
 8006c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c80:	3468      	adds	r4, #104	; 0x68
 8006c82:	e7d9      	b.n	8006c38 <__sfp+0x1c>
 8006c84:	2104      	movs	r1, #4
 8006c86:	4638      	mov	r0, r7
 8006c88:	f7ff ff62 	bl	8006b50 <__sfmoreglue>
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	6030      	str	r0, [r6, #0]
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d1d5      	bne.n	8006c40 <__sfp+0x24>
 8006c94:	f7ff ff78 	bl	8006b88 <__sfp_lock_release>
 8006c98:	230c      	movs	r3, #12
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	e7ee      	b.n	8006c7c <__sfp+0x60>
 8006c9e:	bf00      	nop
 8006ca0:	0800a790 	.word	0x0800a790
 8006ca4:	ffff0001 	.word	0xffff0001

08006ca8 <_fwalk_reent>:
 8006ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cac:	4606      	mov	r6, r0
 8006cae:	4688      	mov	r8, r1
 8006cb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cb4:	2700      	movs	r7, #0
 8006cb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cba:	f1b9 0901 	subs.w	r9, r9, #1
 8006cbe:	d505      	bpl.n	8006ccc <_fwalk_reent+0x24>
 8006cc0:	6824      	ldr	r4, [r4, #0]
 8006cc2:	2c00      	cmp	r4, #0
 8006cc4:	d1f7      	bne.n	8006cb6 <_fwalk_reent+0xe>
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ccc:	89ab      	ldrh	r3, [r5, #12]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d907      	bls.n	8006ce2 <_fwalk_reent+0x3a>
 8006cd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	d003      	beq.n	8006ce2 <_fwalk_reent+0x3a>
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4630      	mov	r0, r6
 8006cde:	47c0      	blx	r8
 8006ce0:	4307      	orrs	r7, r0
 8006ce2:	3568      	adds	r5, #104	; 0x68
 8006ce4:	e7e9      	b.n	8006cba <_fwalk_reent+0x12>

08006ce6 <__retarget_lock_init_recursive>:
 8006ce6:	4770      	bx	lr

08006ce8 <__retarget_lock_acquire_recursive>:
 8006ce8:	4770      	bx	lr

08006cea <__retarget_lock_release_recursive>:
 8006cea:	4770      	bx	lr

08006cec <__swhatbuf_r>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	460e      	mov	r6, r1
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	b096      	sub	sp, #88	; 0x58
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	461d      	mov	r5, r3
 8006cfc:	da07      	bge.n	8006d0e <__swhatbuf_r+0x22>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	89b3      	ldrh	r3, [r6, #12]
 8006d04:	061a      	lsls	r2, r3, #24
 8006d06:	d410      	bmi.n	8006d2a <__swhatbuf_r+0x3e>
 8006d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0c:	e00e      	b.n	8006d2c <__swhatbuf_r+0x40>
 8006d0e:	466a      	mov	r2, sp
 8006d10:	f000 fc60 	bl	80075d4 <_fstat_r>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	dbf2      	blt.n	8006cfe <__swhatbuf_r+0x12>
 8006d18:	9a01      	ldr	r2, [sp, #4]
 8006d1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d22:	425a      	negs	r2, r3
 8006d24:	415a      	adcs	r2, r3
 8006d26:	602a      	str	r2, [r5, #0]
 8006d28:	e7ee      	b.n	8006d08 <__swhatbuf_r+0x1c>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	b016      	add	sp, #88	; 0x58
 8006d32:	bd70      	pop	{r4, r5, r6, pc}

08006d34 <__smakebuf_r>:
 8006d34:	898b      	ldrh	r3, [r1, #12]
 8006d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d38:	079d      	lsls	r5, r3, #30
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	d507      	bpl.n	8006d50 <__smakebuf_r+0x1c>
 8006d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	2301      	movs	r3, #1
 8006d4a:	6163      	str	r3, [r4, #20]
 8006d4c:	b002      	add	sp, #8
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	ab01      	add	r3, sp, #4
 8006d52:	466a      	mov	r2, sp
 8006d54:	f7ff ffca 	bl	8006cec <__swhatbuf_r>
 8006d58:	9900      	ldr	r1, [sp, #0]
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f000 f879 	bl	8006e54 <_malloc_r>
 8006d62:	b948      	cbnz	r0, 8006d78 <__smakebuf_r+0x44>
 8006d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d68:	059a      	lsls	r2, r3, #22
 8006d6a:	d4ef      	bmi.n	8006d4c <__smakebuf_r+0x18>
 8006d6c:	f023 0303 	bic.w	r3, r3, #3
 8006d70:	f043 0302 	orr.w	r3, r3, #2
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	e7e3      	b.n	8006d40 <__smakebuf_r+0xc>
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <__smakebuf_r+0x7c>)
 8006d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	6020      	str	r0, [r4, #0]
 8006d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	9b00      	ldr	r3, [sp, #0]
 8006d88:	6163      	str	r3, [r4, #20]
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	6120      	str	r0, [r4, #16]
 8006d8e:	b15b      	cbz	r3, 8006da8 <__smakebuf_r+0x74>
 8006d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d94:	4630      	mov	r0, r6
 8006d96:	f000 fc2f 	bl	80075f8 <_isatty_r>
 8006d9a:	b128      	cbz	r0, 8006da8 <__smakebuf_r+0x74>
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	f023 0303 	bic.w	r3, r3, #3
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	89a0      	ldrh	r0, [r4, #12]
 8006daa:	4305      	orrs	r5, r0
 8006dac:	81a5      	strh	r5, [r4, #12]
 8006dae:	e7cd      	b.n	8006d4c <__smakebuf_r+0x18>
 8006db0:	08006b45 	.word	0x08006b45

08006db4 <_free_r>:
 8006db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006db6:	2900      	cmp	r1, #0
 8006db8:	d048      	beq.n	8006e4c <_free_r+0x98>
 8006dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dbe:	9001      	str	r0, [sp, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8006dc6:	bfb8      	it	lt
 8006dc8:	18e4      	addlt	r4, r4, r3
 8006dca:	f000 fc5f 	bl	800768c <__malloc_lock>
 8006dce:	4a20      	ldr	r2, [pc, #128]	; (8006e50 <_free_r+0x9c>)
 8006dd0:	9801      	ldr	r0, [sp, #4]
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	4615      	mov	r5, r2
 8006dd6:	b933      	cbnz	r3, 8006de6 <_free_r+0x32>
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	6014      	str	r4, [r2, #0]
 8006ddc:	b003      	add	sp, #12
 8006dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006de2:	f000 bc59 	b.w	8007698 <__malloc_unlock>
 8006de6:	42a3      	cmp	r3, r4
 8006de8:	d90b      	bls.n	8006e02 <_free_r+0x4e>
 8006dea:	6821      	ldr	r1, [r4, #0]
 8006dec:	1862      	adds	r2, r4, r1
 8006dee:	4293      	cmp	r3, r2
 8006df0:	bf04      	itt	eq
 8006df2:	681a      	ldreq	r2, [r3, #0]
 8006df4:	685b      	ldreq	r3, [r3, #4]
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	bf04      	itt	eq
 8006dfa:	1852      	addeq	r2, r2, r1
 8006dfc:	6022      	streq	r2, [r4, #0]
 8006dfe:	602c      	str	r4, [r5, #0]
 8006e00:	e7ec      	b.n	8006ddc <_free_r+0x28>
 8006e02:	461a      	mov	r2, r3
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	b10b      	cbz	r3, 8006e0c <_free_r+0x58>
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	d9fa      	bls.n	8006e02 <_free_r+0x4e>
 8006e0c:	6811      	ldr	r1, [r2, #0]
 8006e0e:	1855      	adds	r5, r2, r1
 8006e10:	42a5      	cmp	r5, r4
 8006e12:	d10b      	bne.n	8006e2c <_free_r+0x78>
 8006e14:	6824      	ldr	r4, [r4, #0]
 8006e16:	4421      	add	r1, r4
 8006e18:	1854      	adds	r4, r2, r1
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	6011      	str	r1, [r2, #0]
 8006e1e:	d1dd      	bne.n	8006ddc <_free_r+0x28>
 8006e20:	681c      	ldr	r4, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	6053      	str	r3, [r2, #4]
 8006e26:	4421      	add	r1, r4
 8006e28:	6011      	str	r1, [r2, #0]
 8006e2a:	e7d7      	b.n	8006ddc <_free_r+0x28>
 8006e2c:	d902      	bls.n	8006e34 <_free_r+0x80>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	e7d3      	b.n	8006ddc <_free_r+0x28>
 8006e34:	6825      	ldr	r5, [r4, #0]
 8006e36:	1961      	adds	r1, r4, r5
 8006e38:	428b      	cmp	r3, r1
 8006e3a:	bf04      	itt	eq
 8006e3c:	6819      	ldreq	r1, [r3, #0]
 8006e3e:	685b      	ldreq	r3, [r3, #4]
 8006e40:	6063      	str	r3, [r4, #4]
 8006e42:	bf04      	itt	eq
 8006e44:	1949      	addeq	r1, r1, r5
 8006e46:	6021      	streq	r1, [r4, #0]
 8006e48:	6054      	str	r4, [r2, #4]
 8006e4a:	e7c7      	b.n	8006ddc <_free_r+0x28>
 8006e4c:	b003      	add	sp, #12
 8006e4e:	bd30      	pop	{r4, r5, pc}
 8006e50:	200000a8 	.word	0x200000a8

08006e54 <_malloc_r>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	1ccd      	adds	r5, r1, #3
 8006e58:	f025 0503 	bic.w	r5, r5, #3
 8006e5c:	3508      	adds	r5, #8
 8006e5e:	2d0c      	cmp	r5, #12
 8006e60:	bf38      	it	cc
 8006e62:	250c      	movcc	r5, #12
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	4606      	mov	r6, r0
 8006e68:	db01      	blt.n	8006e6e <_malloc_r+0x1a>
 8006e6a:	42a9      	cmp	r1, r5
 8006e6c:	d903      	bls.n	8006e76 <_malloc_r+0x22>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	2000      	movs	r0, #0
 8006e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e76:	f000 fc09 	bl	800768c <__malloc_lock>
 8006e7a:	4921      	ldr	r1, [pc, #132]	; (8006f00 <_malloc_r+0xac>)
 8006e7c:	680a      	ldr	r2, [r1, #0]
 8006e7e:	4614      	mov	r4, r2
 8006e80:	b99c      	cbnz	r4, 8006eaa <_malloc_r+0x56>
 8006e82:	4f20      	ldr	r7, [pc, #128]	; (8006f04 <_malloc_r+0xb0>)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	b923      	cbnz	r3, 8006e92 <_malloc_r+0x3e>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f000 fb2c 	bl	80074e8 <_sbrk_r>
 8006e90:	6038      	str	r0, [r7, #0]
 8006e92:	4629      	mov	r1, r5
 8006e94:	4630      	mov	r0, r6
 8006e96:	f000 fb27 	bl	80074e8 <_sbrk_r>
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d123      	bne.n	8006ee6 <_malloc_r+0x92>
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f000 fbf8 	bl	8007698 <__malloc_unlock>
 8006ea8:	e7e3      	b.n	8006e72 <_malloc_r+0x1e>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	1b5b      	subs	r3, r3, r5
 8006eae:	d417      	bmi.n	8006ee0 <_malloc_r+0x8c>
 8006eb0:	2b0b      	cmp	r3, #11
 8006eb2:	d903      	bls.n	8006ebc <_malloc_r+0x68>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	441c      	add	r4, r3
 8006eb8:	6025      	str	r5, [r4, #0]
 8006eba:	e004      	b.n	8006ec6 <_malloc_r+0x72>
 8006ebc:	6863      	ldr	r3, [r4, #4]
 8006ebe:	42a2      	cmp	r2, r4
 8006ec0:	bf0c      	ite	eq
 8006ec2:	600b      	streq	r3, [r1, #0]
 8006ec4:	6053      	strne	r3, [r2, #4]
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f000 fbe6 	bl	8007698 <__malloc_unlock>
 8006ecc:	f104 000b 	add.w	r0, r4, #11
 8006ed0:	1d23      	adds	r3, r4, #4
 8006ed2:	f020 0007 	bic.w	r0, r0, #7
 8006ed6:	1ac2      	subs	r2, r0, r3
 8006ed8:	d0cc      	beq.n	8006e74 <_malloc_r+0x20>
 8006eda:	1a1b      	subs	r3, r3, r0
 8006edc:	50a3      	str	r3, [r4, r2]
 8006ede:	e7c9      	b.n	8006e74 <_malloc_r+0x20>
 8006ee0:	4622      	mov	r2, r4
 8006ee2:	6864      	ldr	r4, [r4, #4]
 8006ee4:	e7cc      	b.n	8006e80 <_malloc_r+0x2c>
 8006ee6:	1cc4      	adds	r4, r0, #3
 8006ee8:	f024 0403 	bic.w	r4, r4, #3
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d0e3      	beq.n	8006eb8 <_malloc_r+0x64>
 8006ef0:	1a21      	subs	r1, r4, r0
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f000 faf8 	bl	80074e8 <_sbrk_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d1dd      	bne.n	8006eb8 <_malloc_r+0x64>
 8006efc:	e7cf      	b.n	8006e9e <_malloc_r+0x4a>
 8006efe:	bf00      	nop
 8006f00:	200000a8 	.word	0x200000a8
 8006f04:	200000ac 	.word	0x200000ac

08006f08 <__ssputs_r>:
 8006f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0c:	688e      	ldr	r6, [r1, #8]
 8006f0e:	429e      	cmp	r6, r3
 8006f10:	4682      	mov	sl, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	4690      	mov	r8, r2
 8006f16:	461f      	mov	r7, r3
 8006f18:	d838      	bhi.n	8006f8c <__ssputs_r+0x84>
 8006f1a:	898a      	ldrh	r2, [r1, #12]
 8006f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f20:	d032      	beq.n	8006f88 <__ssputs_r+0x80>
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	6909      	ldr	r1, [r1, #16]
 8006f26:	eba5 0901 	sub.w	r9, r5, r1
 8006f2a:	6965      	ldr	r5, [r4, #20]
 8006f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f34:	3301      	adds	r3, #1
 8006f36:	444b      	add	r3, r9
 8006f38:	106d      	asrs	r5, r5, #1
 8006f3a:	429d      	cmp	r5, r3
 8006f3c:	bf38      	it	cc
 8006f3e:	461d      	movcc	r5, r3
 8006f40:	0553      	lsls	r3, r2, #21
 8006f42:	d531      	bpl.n	8006fa8 <__ssputs_r+0xa0>
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7ff ff85 	bl	8006e54 <_malloc_r>
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	b950      	cbnz	r0, 8006f64 <__ssputs_r+0x5c>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	f8ca 3000 	str.w	r3, [sl]
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f64:	6921      	ldr	r1, [r4, #16]
 8006f66:	464a      	mov	r2, r9
 8006f68:	f000 fb68 	bl	800763c <memcpy>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	6126      	str	r6, [r4, #16]
 8006f7a:	6165      	str	r5, [r4, #20]
 8006f7c:	444e      	add	r6, r9
 8006f7e:	eba5 0509 	sub.w	r5, r5, r9
 8006f82:	6026      	str	r6, [r4, #0]
 8006f84:	60a5      	str	r5, [r4, #8]
 8006f86:	463e      	mov	r6, r7
 8006f88:	42be      	cmp	r6, r7
 8006f8a:	d900      	bls.n	8006f8e <__ssputs_r+0x86>
 8006f8c:	463e      	mov	r6, r7
 8006f8e:	4632      	mov	r2, r6
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	4641      	mov	r1, r8
 8006f94:	f000 fb60 	bl	8007658 <memmove>
 8006f98:	68a3      	ldr	r3, [r4, #8]
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	1b9b      	subs	r3, r3, r6
 8006f9e:	4432      	add	r2, r6
 8006fa0:	60a3      	str	r3, [r4, #8]
 8006fa2:	6022      	str	r2, [r4, #0]
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e7db      	b.n	8006f60 <__ssputs_r+0x58>
 8006fa8:	462a      	mov	r2, r5
 8006faa:	f000 fb7b 	bl	80076a4 <_realloc_r>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d1e1      	bne.n	8006f78 <__ssputs_r+0x70>
 8006fb4:	6921      	ldr	r1, [r4, #16]
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	f7ff fefc 	bl	8006db4 <_free_r>
 8006fbc:	e7c7      	b.n	8006f4e <__ssputs_r+0x46>
	...

08006fc0 <_svfiprintf_r>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	4698      	mov	r8, r3
 8006fc6:	898b      	ldrh	r3, [r1, #12]
 8006fc8:	061b      	lsls	r3, r3, #24
 8006fca:	b09d      	sub	sp, #116	; 0x74
 8006fcc:	4607      	mov	r7, r0
 8006fce:	460d      	mov	r5, r1
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	d50e      	bpl.n	8006ff2 <_svfiprintf_r+0x32>
 8006fd4:	690b      	ldr	r3, [r1, #16]
 8006fd6:	b963      	cbnz	r3, 8006ff2 <_svfiprintf_r+0x32>
 8006fd8:	2140      	movs	r1, #64	; 0x40
 8006fda:	f7ff ff3b 	bl	8006e54 <_malloc_r>
 8006fde:	6028      	str	r0, [r5, #0]
 8006fe0:	6128      	str	r0, [r5, #16]
 8006fe2:	b920      	cbnz	r0, 8006fee <_svfiprintf_r+0x2e>
 8006fe4:	230c      	movs	r3, #12
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	e0d1      	b.n	8007192 <_svfiprintf_r+0x1d2>
 8006fee:	2340      	movs	r3, #64	; 0x40
 8006ff0:	616b      	str	r3, [r5, #20]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007000:	2330      	movs	r3, #48	; 0x30
 8007002:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071ac <_svfiprintf_r+0x1ec>
 8007006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800700a:	f04f 0901 	mov.w	r9, #1
 800700e:	4623      	mov	r3, r4
 8007010:	469a      	mov	sl, r3
 8007012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007016:	b10a      	cbz	r2, 800701c <_svfiprintf_r+0x5c>
 8007018:	2a25      	cmp	r2, #37	; 0x25
 800701a:	d1f9      	bne.n	8007010 <_svfiprintf_r+0x50>
 800701c:	ebba 0b04 	subs.w	fp, sl, r4
 8007020:	d00b      	beq.n	800703a <_svfiprintf_r+0x7a>
 8007022:	465b      	mov	r3, fp
 8007024:	4622      	mov	r2, r4
 8007026:	4629      	mov	r1, r5
 8007028:	4638      	mov	r0, r7
 800702a:	f7ff ff6d 	bl	8006f08 <__ssputs_r>
 800702e:	3001      	adds	r0, #1
 8007030:	f000 80aa 	beq.w	8007188 <_svfiprintf_r+0x1c8>
 8007034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007036:	445a      	add	r2, fp
 8007038:	9209      	str	r2, [sp, #36]	; 0x24
 800703a:	f89a 3000 	ldrb.w	r3, [sl]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 80a2 	beq.w	8007188 <_svfiprintf_r+0x1c8>
 8007044:	2300      	movs	r3, #0
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800704e:	f10a 0a01 	add.w	sl, sl, #1
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	9307      	str	r3, [sp, #28]
 8007056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800705a:	931a      	str	r3, [sp, #104]	; 0x68
 800705c:	4654      	mov	r4, sl
 800705e:	2205      	movs	r2, #5
 8007060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007064:	4851      	ldr	r0, [pc, #324]	; (80071ac <_svfiprintf_r+0x1ec>)
 8007066:	f7f9 f8b3 	bl	80001d0 <memchr>
 800706a:	9a04      	ldr	r2, [sp, #16]
 800706c:	b9d8      	cbnz	r0, 80070a6 <_svfiprintf_r+0xe6>
 800706e:	06d0      	lsls	r0, r2, #27
 8007070:	bf44      	itt	mi
 8007072:	2320      	movmi	r3, #32
 8007074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007078:	0711      	lsls	r1, r2, #28
 800707a:	bf44      	itt	mi
 800707c:	232b      	movmi	r3, #43	; 0x2b
 800707e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007082:	f89a 3000 	ldrb.w	r3, [sl]
 8007086:	2b2a      	cmp	r3, #42	; 0x2a
 8007088:	d015      	beq.n	80070b6 <_svfiprintf_r+0xf6>
 800708a:	9a07      	ldr	r2, [sp, #28]
 800708c:	4654      	mov	r4, sl
 800708e:	2000      	movs	r0, #0
 8007090:	f04f 0c0a 	mov.w	ip, #10
 8007094:	4621      	mov	r1, r4
 8007096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800709a:	3b30      	subs	r3, #48	; 0x30
 800709c:	2b09      	cmp	r3, #9
 800709e:	d94e      	bls.n	800713e <_svfiprintf_r+0x17e>
 80070a0:	b1b0      	cbz	r0, 80070d0 <_svfiprintf_r+0x110>
 80070a2:	9207      	str	r2, [sp, #28]
 80070a4:	e014      	b.n	80070d0 <_svfiprintf_r+0x110>
 80070a6:	eba0 0308 	sub.w	r3, r0, r8
 80070aa:	fa09 f303 	lsl.w	r3, r9, r3
 80070ae:	4313      	orrs	r3, r2
 80070b0:	9304      	str	r3, [sp, #16]
 80070b2:	46a2      	mov	sl, r4
 80070b4:	e7d2      	b.n	800705c <_svfiprintf_r+0x9c>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	1d19      	adds	r1, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	9103      	str	r1, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfbb      	ittet	lt
 80070c2:	425b      	neglt	r3, r3
 80070c4:	f042 0202 	orrlt.w	r2, r2, #2
 80070c8:	9307      	strge	r3, [sp, #28]
 80070ca:	9307      	strlt	r3, [sp, #28]
 80070cc:	bfb8      	it	lt
 80070ce:	9204      	strlt	r2, [sp, #16]
 80070d0:	7823      	ldrb	r3, [r4, #0]
 80070d2:	2b2e      	cmp	r3, #46	; 0x2e
 80070d4:	d10c      	bne.n	80070f0 <_svfiprintf_r+0x130>
 80070d6:	7863      	ldrb	r3, [r4, #1]
 80070d8:	2b2a      	cmp	r3, #42	; 0x2a
 80070da:	d135      	bne.n	8007148 <_svfiprintf_r+0x188>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	1d1a      	adds	r2, r3, #4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	9203      	str	r2, [sp, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfb8      	it	lt
 80070e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80070ec:	3402      	adds	r4, #2
 80070ee:	9305      	str	r3, [sp, #20]
 80070f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071bc <_svfiprintf_r+0x1fc>
 80070f4:	7821      	ldrb	r1, [r4, #0]
 80070f6:	2203      	movs	r2, #3
 80070f8:	4650      	mov	r0, sl
 80070fa:	f7f9 f869 	bl	80001d0 <memchr>
 80070fe:	b140      	cbz	r0, 8007112 <_svfiprintf_r+0x152>
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	eba0 000a 	sub.w	r0, r0, sl
 8007106:	fa03 f000 	lsl.w	r0, r3, r0
 800710a:	9b04      	ldr	r3, [sp, #16]
 800710c:	4303      	orrs	r3, r0
 800710e:	3401      	adds	r4, #1
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007116:	4826      	ldr	r0, [pc, #152]	; (80071b0 <_svfiprintf_r+0x1f0>)
 8007118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800711c:	2206      	movs	r2, #6
 800711e:	f7f9 f857 	bl	80001d0 <memchr>
 8007122:	2800      	cmp	r0, #0
 8007124:	d038      	beq.n	8007198 <_svfiprintf_r+0x1d8>
 8007126:	4b23      	ldr	r3, [pc, #140]	; (80071b4 <_svfiprintf_r+0x1f4>)
 8007128:	bb1b      	cbnz	r3, 8007172 <_svfiprintf_r+0x1b2>
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	3307      	adds	r3, #7
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	3308      	adds	r3, #8
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007138:	4433      	add	r3, r6
 800713a:	9309      	str	r3, [sp, #36]	; 0x24
 800713c:	e767      	b.n	800700e <_svfiprintf_r+0x4e>
 800713e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007142:	460c      	mov	r4, r1
 8007144:	2001      	movs	r0, #1
 8007146:	e7a5      	b.n	8007094 <_svfiprintf_r+0xd4>
 8007148:	2300      	movs	r3, #0
 800714a:	3401      	adds	r4, #1
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	4619      	mov	r1, r3
 8007150:	f04f 0c0a 	mov.w	ip, #10
 8007154:	4620      	mov	r0, r4
 8007156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800715a:	3a30      	subs	r2, #48	; 0x30
 800715c:	2a09      	cmp	r2, #9
 800715e:	d903      	bls.n	8007168 <_svfiprintf_r+0x1a8>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0c5      	beq.n	80070f0 <_svfiprintf_r+0x130>
 8007164:	9105      	str	r1, [sp, #20]
 8007166:	e7c3      	b.n	80070f0 <_svfiprintf_r+0x130>
 8007168:	fb0c 2101 	mla	r1, ip, r1, r2
 800716c:	4604      	mov	r4, r0
 800716e:	2301      	movs	r3, #1
 8007170:	e7f0      	b.n	8007154 <_svfiprintf_r+0x194>
 8007172:	ab03      	add	r3, sp, #12
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	462a      	mov	r2, r5
 8007178:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <_svfiprintf_r+0x1f8>)
 800717a:	a904      	add	r1, sp, #16
 800717c:	4638      	mov	r0, r7
 800717e:	f3af 8000 	nop.w
 8007182:	1c42      	adds	r2, r0, #1
 8007184:	4606      	mov	r6, r0
 8007186:	d1d6      	bne.n	8007136 <_svfiprintf_r+0x176>
 8007188:	89ab      	ldrh	r3, [r5, #12]
 800718a:	065b      	lsls	r3, r3, #25
 800718c:	f53f af2c 	bmi.w	8006fe8 <_svfiprintf_r+0x28>
 8007190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007192:	b01d      	add	sp, #116	; 0x74
 8007194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007198:	ab03      	add	r3, sp, #12
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	462a      	mov	r2, r5
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <_svfiprintf_r+0x1f8>)
 80071a0:	a904      	add	r1, sp, #16
 80071a2:	4638      	mov	r0, r7
 80071a4:	f000 f87a 	bl	800729c <_printf_i>
 80071a8:	e7eb      	b.n	8007182 <_svfiprintf_r+0x1c2>
 80071aa:	bf00      	nop
 80071ac:	0800a7f4 	.word	0x0800a7f4
 80071b0:	0800a7fe 	.word	0x0800a7fe
 80071b4:	00000000 	.word	0x00000000
 80071b8:	08006f09 	.word	0x08006f09
 80071bc:	0800a7fa 	.word	0x0800a7fa

080071c0 <_printf_common>:
 80071c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	4616      	mov	r6, r2
 80071c6:	4699      	mov	r9, r3
 80071c8:	688a      	ldr	r2, [r1, #8]
 80071ca:	690b      	ldr	r3, [r1, #16]
 80071cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071d0:	4293      	cmp	r3, r2
 80071d2:	bfb8      	it	lt
 80071d4:	4613      	movlt	r3, r2
 80071d6:	6033      	str	r3, [r6, #0]
 80071d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071dc:	4607      	mov	r7, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	b10a      	cbz	r2, 80071e6 <_printf_common+0x26>
 80071e2:	3301      	adds	r3, #1
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	0699      	lsls	r1, r3, #26
 80071ea:	bf42      	ittt	mi
 80071ec:	6833      	ldrmi	r3, [r6, #0]
 80071ee:	3302      	addmi	r3, #2
 80071f0:	6033      	strmi	r3, [r6, #0]
 80071f2:	6825      	ldr	r5, [r4, #0]
 80071f4:	f015 0506 	ands.w	r5, r5, #6
 80071f8:	d106      	bne.n	8007208 <_printf_common+0x48>
 80071fa:	f104 0a19 	add.w	sl, r4, #25
 80071fe:	68e3      	ldr	r3, [r4, #12]
 8007200:	6832      	ldr	r2, [r6, #0]
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	42ab      	cmp	r3, r5
 8007206:	dc26      	bgt.n	8007256 <_printf_common+0x96>
 8007208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800720c:	1e13      	subs	r3, r2, #0
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	bf18      	it	ne
 8007212:	2301      	movne	r3, #1
 8007214:	0692      	lsls	r2, r2, #26
 8007216:	d42b      	bmi.n	8007270 <_printf_common+0xb0>
 8007218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800721c:	4649      	mov	r1, r9
 800721e:	4638      	mov	r0, r7
 8007220:	47c0      	blx	r8
 8007222:	3001      	adds	r0, #1
 8007224:	d01e      	beq.n	8007264 <_printf_common+0xa4>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	68e5      	ldr	r5, [r4, #12]
 800722a:	6832      	ldr	r2, [r6, #0]
 800722c:	f003 0306 	and.w	r3, r3, #6
 8007230:	2b04      	cmp	r3, #4
 8007232:	bf08      	it	eq
 8007234:	1aad      	subeq	r5, r5, r2
 8007236:	68a3      	ldr	r3, [r4, #8]
 8007238:	6922      	ldr	r2, [r4, #16]
 800723a:	bf0c      	ite	eq
 800723c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007240:	2500      	movne	r5, #0
 8007242:	4293      	cmp	r3, r2
 8007244:	bfc4      	itt	gt
 8007246:	1a9b      	subgt	r3, r3, r2
 8007248:	18ed      	addgt	r5, r5, r3
 800724a:	2600      	movs	r6, #0
 800724c:	341a      	adds	r4, #26
 800724e:	42b5      	cmp	r5, r6
 8007250:	d11a      	bne.n	8007288 <_printf_common+0xc8>
 8007252:	2000      	movs	r0, #0
 8007254:	e008      	b.n	8007268 <_printf_common+0xa8>
 8007256:	2301      	movs	r3, #1
 8007258:	4652      	mov	r2, sl
 800725a:	4649      	mov	r1, r9
 800725c:	4638      	mov	r0, r7
 800725e:	47c0      	blx	r8
 8007260:	3001      	adds	r0, #1
 8007262:	d103      	bne.n	800726c <_printf_common+0xac>
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	3501      	adds	r5, #1
 800726e:	e7c6      	b.n	80071fe <_printf_common+0x3e>
 8007270:	18e1      	adds	r1, r4, r3
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	2030      	movs	r0, #48	; 0x30
 8007276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800727a:	4422      	add	r2, r4
 800727c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007284:	3302      	adds	r3, #2
 8007286:	e7c7      	b.n	8007218 <_printf_common+0x58>
 8007288:	2301      	movs	r3, #1
 800728a:	4622      	mov	r2, r4
 800728c:	4649      	mov	r1, r9
 800728e:	4638      	mov	r0, r7
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d0e6      	beq.n	8007264 <_printf_common+0xa4>
 8007296:	3601      	adds	r6, #1
 8007298:	e7d9      	b.n	800724e <_printf_common+0x8e>
	...

0800729c <_printf_i>:
 800729c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	460c      	mov	r4, r1
 80072a2:	4691      	mov	r9, r2
 80072a4:	7e27      	ldrb	r7, [r4, #24]
 80072a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072a8:	2f78      	cmp	r7, #120	; 0x78
 80072aa:	4680      	mov	r8, r0
 80072ac:	469a      	mov	sl, r3
 80072ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b2:	d807      	bhi.n	80072c4 <_printf_i+0x28>
 80072b4:	2f62      	cmp	r7, #98	; 0x62
 80072b6:	d80a      	bhi.n	80072ce <_printf_i+0x32>
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	f000 80d8 	beq.w	800746e <_printf_i+0x1d2>
 80072be:	2f58      	cmp	r7, #88	; 0x58
 80072c0:	f000 80a3 	beq.w	800740a <_printf_i+0x16e>
 80072c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072cc:	e03a      	b.n	8007344 <_printf_i+0xa8>
 80072ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072d2:	2b15      	cmp	r3, #21
 80072d4:	d8f6      	bhi.n	80072c4 <_printf_i+0x28>
 80072d6:	a001      	add	r0, pc, #4	; (adr r0, 80072dc <_printf_i+0x40>)
 80072d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007349 	.word	0x08007349
 80072e4:	080072c5 	.word	0x080072c5
 80072e8:	080072c5 	.word	0x080072c5
 80072ec:	080072c5 	.word	0x080072c5
 80072f0:	080072c5 	.word	0x080072c5
 80072f4:	08007349 	.word	0x08007349
 80072f8:	080072c5 	.word	0x080072c5
 80072fc:	080072c5 	.word	0x080072c5
 8007300:	080072c5 	.word	0x080072c5
 8007304:	080072c5 	.word	0x080072c5
 8007308:	08007455 	.word	0x08007455
 800730c:	08007379 	.word	0x08007379
 8007310:	08007437 	.word	0x08007437
 8007314:	080072c5 	.word	0x080072c5
 8007318:	080072c5 	.word	0x080072c5
 800731c:	08007477 	.word	0x08007477
 8007320:	080072c5 	.word	0x080072c5
 8007324:	08007379 	.word	0x08007379
 8007328:	080072c5 	.word	0x080072c5
 800732c:	080072c5 	.word	0x080072c5
 8007330:	0800743f 	.word	0x0800743f
 8007334:	680b      	ldr	r3, [r1, #0]
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	600a      	str	r2, [r1, #0]
 800733c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007344:	2301      	movs	r3, #1
 8007346:	e0a3      	b.n	8007490 <_printf_i+0x1f4>
 8007348:	6825      	ldr	r5, [r4, #0]
 800734a:	6808      	ldr	r0, [r1, #0]
 800734c:	062e      	lsls	r6, r5, #24
 800734e:	f100 0304 	add.w	r3, r0, #4
 8007352:	d50a      	bpl.n	800736a <_printf_i+0xce>
 8007354:	6805      	ldr	r5, [r0, #0]
 8007356:	600b      	str	r3, [r1, #0]
 8007358:	2d00      	cmp	r5, #0
 800735a:	da03      	bge.n	8007364 <_printf_i+0xc8>
 800735c:	232d      	movs	r3, #45	; 0x2d
 800735e:	426d      	negs	r5, r5
 8007360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007364:	485e      	ldr	r0, [pc, #376]	; (80074e0 <_printf_i+0x244>)
 8007366:	230a      	movs	r3, #10
 8007368:	e019      	b.n	800739e <_printf_i+0x102>
 800736a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800736e:	6805      	ldr	r5, [r0, #0]
 8007370:	600b      	str	r3, [r1, #0]
 8007372:	bf18      	it	ne
 8007374:	b22d      	sxthne	r5, r5
 8007376:	e7ef      	b.n	8007358 <_printf_i+0xbc>
 8007378:	680b      	ldr	r3, [r1, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	1d18      	adds	r0, r3, #4
 800737e:	6008      	str	r0, [r1, #0]
 8007380:	0628      	lsls	r0, r5, #24
 8007382:	d501      	bpl.n	8007388 <_printf_i+0xec>
 8007384:	681d      	ldr	r5, [r3, #0]
 8007386:	e002      	b.n	800738e <_printf_i+0xf2>
 8007388:	0669      	lsls	r1, r5, #25
 800738a:	d5fb      	bpl.n	8007384 <_printf_i+0xe8>
 800738c:	881d      	ldrh	r5, [r3, #0]
 800738e:	4854      	ldr	r0, [pc, #336]	; (80074e0 <_printf_i+0x244>)
 8007390:	2f6f      	cmp	r7, #111	; 0x6f
 8007392:	bf0c      	ite	eq
 8007394:	2308      	moveq	r3, #8
 8007396:	230a      	movne	r3, #10
 8007398:	2100      	movs	r1, #0
 800739a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800739e:	6866      	ldr	r6, [r4, #4]
 80073a0:	60a6      	str	r6, [r4, #8]
 80073a2:	2e00      	cmp	r6, #0
 80073a4:	bfa2      	ittt	ge
 80073a6:	6821      	ldrge	r1, [r4, #0]
 80073a8:	f021 0104 	bicge.w	r1, r1, #4
 80073ac:	6021      	strge	r1, [r4, #0]
 80073ae:	b90d      	cbnz	r5, 80073b4 <_printf_i+0x118>
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	d04d      	beq.n	8007450 <_printf_i+0x1b4>
 80073b4:	4616      	mov	r6, r2
 80073b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ba:	fb03 5711 	mls	r7, r3, r1, r5
 80073be:	5dc7      	ldrb	r7, [r0, r7]
 80073c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073c4:	462f      	mov	r7, r5
 80073c6:	42bb      	cmp	r3, r7
 80073c8:	460d      	mov	r5, r1
 80073ca:	d9f4      	bls.n	80073b6 <_printf_i+0x11a>
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d10b      	bne.n	80073e8 <_printf_i+0x14c>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	07df      	lsls	r7, r3, #31
 80073d4:	d508      	bpl.n	80073e8 <_printf_i+0x14c>
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	4299      	cmp	r1, r3
 80073dc:	bfde      	ittt	le
 80073de:	2330      	movle	r3, #48	; 0x30
 80073e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073e8:	1b92      	subs	r2, r2, r6
 80073ea:	6122      	str	r2, [r4, #16]
 80073ec:	f8cd a000 	str.w	sl, [sp]
 80073f0:	464b      	mov	r3, r9
 80073f2:	aa03      	add	r2, sp, #12
 80073f4:	4621      	mov	r1, r4
 80073f6:	4640      	mov	r0, r8
 80073f8:	f7ff fee2 	bl	80071c0 <_printf_common>
 80073fc:	3001      	adds	r0, #1
 80073fe:	d14c      	bne.n	800749a <_printf_i+0x1fe>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b004      	add	sp, #16
 8007406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800740a:	4835      	ldr	r0, [pc, #212]	; (80074e0 <_printf_i+0x244>)
 800740c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	680e      	ldr	r6, [r1, #0]
 8007414:	061f      	lsls	r7, r3, #24
 8007416:	f856 5b04 	ldr.w	r5, [r6], #4
 800741a:	600e      	str	r6, [r1, #0]
 800741c:	d514      	bpl.n	8007448 <_printf_i+0x1ac>
 800741e:	07d9      	lsls	r1, r3, #31
 8007420:	bf44      	itt	mi
 8007422:	f043 0320 	orrmi.w	r3, r3, #32
 8007426:	6023      	strmi	r3, [r4, #0]
 8007428:	b91d      	cbnz	r5, 8007432 <_printf_i+0x196>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	f023 0320 	bic.w	r3, r3, #32
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	2310      	movs	r3, #16
 8007434:	e7b0      	b.n	8007398 <_printf_i+0xfc>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	f043 0320 	orr.w	r3, r3, #32
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	2378      	movs	r3, #120	; 0x78
 8007440:	4828      	ldr	r0, [pc, #160]	; (80074e4 <_printf_i+0x248>)
 8007442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007446:	e7e3      	b.n	8007410 <_printf_i+0x174>
 8007448:	065e      	lsls	r6, r3, #25
 800744a:	bf48      	it	mi
 800744c:	b2ad      	uxthmi	r5, r5
 800744e:	e7e6      	b.n	800741e <_printf_i+0x182>
 8007450:	4616      	mov	r6, r2
 8007452:	e7bb      	b.n	80073cc <_printf_i+0x130>
 8007454:	680b      	ldr	r3, [r1, #0]
 8007456:	6826      	ldr	r6, [r4, #0]
 8007458:	6960      	ldr	r0, [r4, #20]
 800745a:	1d1d      	adds	r5, r3, #4
 800745c:	600d      	str	r5, [r1, #0]
 800745e:	0635      	lsls	r5, r6, #24
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	d501      	bpl.n	8007468 <_printf_i+0x1cc>
 8007464:	6018      	str	r0, [r3, #0]
 8007466:	e002      	b.n	800746e <_printf_i+0x1d2>
 8007468:	0671      	lsls	r1, r6, #25
 800746a:	d5fb      	bpl.n	8007464 <_printf_i+0x1c8>
 800746c:	8018      	strh	r0, [r3, #0]
 800746e:	2300      	movs	r3, #0
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	4616      	mov	r6, r2
 8007474:	e7ba      	b.n	80073ec <_printf_i+0x150>
 8007476:	680b      	ldr	r3, [r1, #0]
 8007478:	1d1a      	adds	r2, r3, #4
 800747a:	600a      	str	r2, [r1, #0]
 800747c:	681e      	ldr	r6, [r3, #0]
 800747e:	6862      	ldr	r2, [r4, #4]
 8007480:	2100      	movs	r1, #0
 8007482:	4630      	mov	r0, r6
 8007484:	f7f8 fea4 	bl	80001d0 <memchr>
 8007488:	b108      	cbz	r0, 800748e <_printf_i+0x1f2>
 800748a:	1b80      	subs	r0, r0, r6
 800748c:	6060      	str	r0, [r4, #4]
 800748e:	6863      	ldr	r3, [r4, #4]
 8007490:	6123      	str	r3, [r4, #16]
 8007492:	2300      	movs	r3, #0
 8007494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007498:	e7a8      	b.n	80073ec <_printf_i+0x150>
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	4632      	mov	r2, r6
 800749e:	4649      	mov	r1, r9
 80074a0:	4640      	mov	r0, r8
 80074a2:	47d0      	blx	sl
 80074a4:	3001      	adds	r0, #1
 80074a6:	d0ab      	beq.n	8007400 <_printf_i+0x164>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	079b      	lsls	r3, r3, #30
 80074ac:	d413      	bmi.n	80074d6 <_printf_i+0x23a>
 80074ae:	68e0      	ldr	r0, [r4, #12]
 80074b0:	9b03      	ldr	r3, [sp, #12]
 80074b2:	4298      	cmp	r0, r3
 80074b4:	bfb8      	it	lt
 80074b6:	4618      	movlt	r0, r3
 80074b8:	e7a4      	b.n	8007404 <_printf_i+0x168>
 80074ba:	2301      	movs	r3, #1
 80074bc:	4632      	mov	r2, r6
 80074be:	4649      	mov	r1, r9
 80074c0:	4640      	mov	r0, r8
 80074c2:	47d0      	blx	sl
 80074c4:	3001      	adds	r0, #1
 80074c6:	d09b      	beq.n	8007400 <_printf_i+0x164>
 80074c8:	3501      	adds	r5, #1
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	9903      	ldr	r1, [sp, #12]
 80074ce:	1a5b      	subs	r3, r3, r1
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	dcf2      	bgt.n	80074ba <_printf_i+0x21e>
 80074d4:	e7eb      	b.n	80074ae <_printf_i+0x212>
 80074d6:	2500      	movs	r5, #0
 80074d8:	f104 0619 	add.w	r6, r4, #25
 80074dc:	e7f5      	b.n	80074ca <_printf_i+0x22e>
 80074de:	bf00      	nop
 80074e0:	0800a805 	.word	0x0800a805
 80074e4:	0800a816 	.word	0x0800a816

080074e8 <_sbrk_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d06      	ldr	r5, [pc, #24]	; (8007504 <_sbrk_r+0x1c>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	f7fa fb3e 	bl	8001b74 <_sbrk>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_sbrk_r+0x1a>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_sbrk_r+0x1a>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20000348 	.word	0x20000348

08007508 <__sread>:
 8007508:	b510      	push	{r4, lr}
 800750a:	460c      	mov	r4, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	f000 f8ee 	bl	80076f0 <_read_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	bfab      	itete	ge
 8007518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800751a:	89a3      	ldrhlt	r3, [r4, #12]
 800751c:	181b      	addge	r3, r3, r0
 800751e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007522:	bfac      	ite	ge
 8007524:	6563      	strge	r3, [r4, #84]	; 0x54
 8007526:	81a3      	strhlt	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__swrite>:
 800752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752e:	461f      	mov	r7, r3
 8007530:	898b      	ldrh	r3, [r1, #12]
 8007532:	05db      	lsls	r3, r3, #23
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	4616      	mov	r6, r2
 800753a:	d505      	bpl.n	8007548 <__swrite+0x1e>
 800753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007540:	2302      	movs	r3, #2
 8007542:	2200      	movs	r2, #0
 8007544:	f000 f868 	bl	8007618 <_lseek_r>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	4632      	mov	r2, r6
 8007556:	463b      	mov	r3, r7
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	f000 b817 	b.w	8007590 <_write_r>

08007562 <__sseek>:
 8007562:	b510      	push	{r4, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756a:	f000 f855 	bl	8007618 <_lseek_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	bf15      	itete	ne
 8007574:	6560      	strne	r0, [r4, #84]	; 0x54
 8007576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800757a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800757e:	81a3      	strheq	r3, [r4, #12]
 8007580:	bf18      	it	ne
 8007582:	81a3      	strhne	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__sclose>:
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 b813 	b.w	80075b4 <_close_r>
	...

08007590 <_write_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_write_r+0x20>)
 8007594:	4604      	mov	r4, r0
 8007596:	4608      	mov	r0, r1
 8007598:	4611      	mov	r1, r2
 800759a:	2200      	movs	r2, #0
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f7fa fa97 	bl	8001ad2 <_write>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_write_r+0x1e>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_write_r+0x1e>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000348 	.word	0x20000348

080075b4 <_close_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d06      	ldr	r5, [pc, #24]	; (80075d0 <_close_r+0x1c>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fa faa3 	bl	8001b0a <_close>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_close_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_close_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000348 	.word	0x20000348

080075d4 <_fstat_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <_fstat_r+0x20>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	f7fa fa9e 	bl	8001b22 <_fstat>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	d102      	bne.n	80075f0 <_fstat_r+0x1c>
 80075ea:	682b      	ldr	r3, [r5, #0]
 80075ec:	b103      	cbz	r3, 80075f0 <_fstat_r+0x1c>
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	bd38      	pop	{r3, r4, r5, pc}
 80075f2:	bf00      	nop
 80075f4:	20000348 	.word	0x20000348

080075f8 <_isatty_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d06      	ldr	r5, [pc, #24]	; (8007614 <_isatty_r+0x1c>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	602b      	str	r3, [r5, #0]
 8007604:	f7fa fa9d 	bl	8001b42 <_isatty>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_isatty_r+0x1a>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_isatty_r+0x1a>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20000348 	.word	0x20000348

08007618 <_lseek_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d07      	ldr	r5, [pc, #28]	; (8007638 <_lseek_r+0x20>)
 800761c:	4604      	mov	r4, r0
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7fa fa96 	bl	8001b58 <_lseek>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_lseek_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_lseek_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20000348 	.word	0x20000348

0800763c <memcpy>:
 800763c:	440a      	add	r2, r1
 800763e:	4291      	cmp	r1, r2
 8007640:	f100 33ff 	add.w	r3, r0, #4294967295
 8007644:	d100      	bne.n	8007648 <memcpy+0xc>
 8007646:	4770      	bx	lr
 8007648:	b510      	push	{r4, lr}
 800764a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007652:	4291      	cmp	r1, r2
 8007654:	d1f9      	bne.n	800764a <memcpy+0xe>
 8007656:	bd10      	pop	{r4, pc}

08007658 <memmove>:
 8007658:	4288      	cmp	r0, r1
 800765a:	b510      	push	{r4, lr}
 800765c:	eb01 0402 	add.w	r4, r1, r2
 8007660:	d902      	bls.n	8007668 <memmove+0x10>
 8007662:	4284      	cmp	r4, r0
 8007664:	4623      	mov	r3, r4
 8007666:	d807      	bhi.n	8007678 <memmove+0x20>
 8007668:	1e43      	subs	r3, r0, #1
 800766a:	42a1      	cmp	r1, r4
 800766c:	d008      	beq.n	8007680 <memmove+0x28>
 800766e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007676:	e7f8      	b.n	800766a <memmove+0x12>
 8007678:	4402      	add	r2, r0
 800767a:	4601      	mov	r1, r0
 800767c:	428a      	cmp	r2, r1
 800767e:	d100      	bne.n	8007682 <memmove+0x2a>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800768a:	e7f7      	b.n	800767c <memmove+0x24>

0800768c <__malloc_lock>:
 800768c:	4801      	ldr	r0, [pc, #4]	; (8007694 <__malloc_lock+0x8>)
 800768e:	f7ff bb2b 	b.w	8006ce8 <__retarget_lock_acquire_recursive>
 8007692:	bf00      	nop
 8007694:	20000340 	.word	0x20000340

08007698 <__malloc_unlock>:
 8007698:	4801      	ldr	r0, [pc, #4]	; (80076a0 <__malloc_unlock+0x8>)
 800769a:	f7ff bb26 	b.w	8006cea <__retarget_lock_release_recursive>
 800769e:	bf00      	nop
 80076a0:	20000340 	.word	0x20000340

080076a4 <_realloc_r>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	4607      	mov	r7, r0
 80076a8:	4614      	mov	r4, r2
 80076aa:	460e      	mov	r6, r1
 80076ac:	b921      	cbnz	r1, 80076b8 <_realloc_r+0x14>
 80076ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076b2:	4611      	mov	r1, r2
 80076b4:	f7ff bbce 	b.w	8006e54 <_malloc_r>
 80076b8:	b922      	cbnz	r2, 80076c4 <_realloc_r+0x20>
 80076ba:	f7ff fb7b 	bl	8006db4 <_free_r>
 80076be:	4625      	mov	r5, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c4:	f000 f826 	bl	8007714 <_malloc_usable_size_r>
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d20f      	bcs.n	80076ec <_realloc_r+0x48>
 80076cc:	4621      	mov	r1, r4
 80076ce:	4638      	mov	r0, r7
 80076d0:	f7ff fbc0 	bl	8006e54 <_malloc_r>
 80076d4:	4605      	mov	r5, r0
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d0f2      	beq.n	80076c0 <_realloc_r+0x1c>
 80076da:	4631      	mov	r1, r6
 80076dc:	4622      	mov	r2, r4
 80076de:	f7ff ffad 	bl	800763c <memcpy>
 80076e2:	4631      	mov	r1, r6
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff fb65 	bl	8006db4 <_free_r>
 80076ea:	e7e9      	b.n	80076c0 <_realloc_r+0x1c>
 80076ec:	4635      	mov	r5, r6
 80076ee:	e7e7      	b.n	80076c0 <_realloc_r+0x1c>

080076f0 <_read_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	; (8007710 <_read_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7fa f9ca 	bl	8001a98 <_read>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_read_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_read_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20000348 	.word	0x20000348

08007714 <_malloc_usable_size_r>:
 8007714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007718:	1f18      	subs	r0, r3, #4
 800771a:	2b00      	cmp	r3, #0
 800771c:	bfbc      	itt	lt
 800771e:	580b      	ldrlt	r3, [r1, r0]
 8007720:	18c0      	addlt	r0, r0, r3
 8007722:	4770      	bx	lr

08007724 <_init>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr

08007730 <_fini>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

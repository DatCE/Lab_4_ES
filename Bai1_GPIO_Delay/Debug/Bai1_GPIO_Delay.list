
Bai1_GPIO_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003120  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2a8  0800c2a8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2a8  0800c2a8  0001c2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2b0  0800c2b0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b0  0800c2b0  0001c2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2b4  0800c2b4  0001c2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000003d4  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000460  20000460  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd58  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004630  00000000  00000000  0003fe14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  00044448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001598  00000000  00000000  00045bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027235  00000000  00000000  00047158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f7f4  00000000  00000000  0006e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e132b  00000000  00000000  0008db81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016eeac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006978  00000000  00000000  0016ef00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009170 	.word	0x08009170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08009170 	.word	0x08009170

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_ADC1_Init+0x108>)
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_ADC1_Init+0x10c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_ADC1_Init+0x108>)
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0x110>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e04:	f002 fa02 	bl	800320c <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f001 fc47 	bl	80026a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e12:	2308      	movs	r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e24:	f002 fb64 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f001 fc37 	bl	80026a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e32:	2309      	movs	r3, #9
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e40:	f002 fb56 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4a:	f001 fc29 	bl	80026a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e5c:	f002 fb48 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e66:	f001 fc1b 	bl	80026a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e78:	f002 fb3a 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e82:	f001 fc0d 	bl	80026a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e86:	230c      	movs	r3, #12
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e94:	f002 fb2c 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e9e:	f001 fbff 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000d8 	.word	0x200000d8
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <HAL_ADC_MspInit+0x110>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d171      	bne.n	8000fbe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a33      	ldr	r2, [pc, #204]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <HAL_ADC_MspInit+0x118>)
 8000f42:	f003 fa89 	bl	8004458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x11c>)
 8000f5a:	f003 fa7d 	bl	8004458 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f002 fe56 	bl	8003c54 <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fae:	f001 fb77 	bl	80026a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000120 	.word	0x20000120
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <button_init+0x14>)
 8000fea:	f003 fbd1 	bl	8004790 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <button_Scan+0xc8>)
 8001004:	f003 fbc4 	bl	8004790 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	482c      	ldr	r0, [pc, #176]	; (80010c0 <button_Scan+0xc8>)
 800100e:	f003 fbbf 	bl	8004790 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001012:	230a      	movs	r3, #10
 8001014:	2202      	movs	r2, #2
 8001016:	492b      	ldr	r1, [pc, #172]	; (80010c4 <button_Scan+0xcc>)
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <button_Scan+0xd0>)
 800101a:	f004 fb50 	bl	80056be <HAL_SPI_Receive>
	  int button_index = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e03f      	b.n	80010ae <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db06      	blt.n	8001042 <button_Scan+0x4a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc03      	bgt.n	8001042 <button_Scan+0x4a>
			  button_index = i + 4;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e018      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dd07      	ble.n	8001058 <button_Scan+0x60>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dc04      	bgt.n	8001058 <button_Scan+0x60>
			  button_index = 7 - i;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f1c3 0307 	rsb	r3, r3, #7
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00d      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b07      	cmp	r3, #7
 800105c:	dd06      	ble.n	800106c <button_Scan+0x74>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	dc03      	bgt.n	800106c <button_Scan+0x74>
			  button_index = i + 4;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3304      	adds	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e003      	b.n	8001074 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1c3 0317 	rsb	r3, r3, #23
 8001072:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <button_Scan+0xcc>)
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	4013      	ands	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <button_Scan+0x96>
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <button_Scan+0xd4>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2100      	movs	r1, #0
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108c:	e009      	b.n	80010a2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <button_Scan+0xd4>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <button_Scan+0xd4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	ddbc      	ble.n	800102e <button_Scan+0x36>
	  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	200000a8 	.word	0x200000a8
 80010c8:	2000028c 	.word	0x2000028c
 80010cc:	20000180 	.word	0x20000180

080010d0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <buzzer_init+0x10>)
 80010d8:	f005 f832 	bl	8006140 <HAL_TIM_PWM_Start>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200002e4 	.word	0x200002e4

080010e4 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <buzzer_SetVolume+0x28>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <buzzer_SetVolume+0x28>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <buzzer_SetVolume+0x2c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200000aa 	.word	0x200000aa
 8001110:	200002e4 	.word	0x200002e4

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x3c>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f002 fd53 	bl	8003be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	; 0x38
 8001142:	f002 fd6c 	bl	8003c1e <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <MX_FSMC_Init+0xec>)
 8001182:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001186:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <MX_FSMC_Init+0xec>)
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <MX_FSMC_Init+0xf0>)
 800118c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_FSMC_Init+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_FSMC_Init+0xec>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_FSMC_Init+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_FSMC_Init+0xec>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_FSMC_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_FSMC_Init+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_FSMC_Init+0xec>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_FSMC_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_FSMC_Init+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_FSMC_Init+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_FSMC_Init+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80011e6:	230f      	movs	r3, #15
 80011e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80011ea:	230f      	movs	r3, #15
 80011ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80011ee:	233c      	movs	r3, #60	; 0x3c
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80011fa:	2311      	movs	r3, #17
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001202:	2308      	movs	r3, #8
 8001204:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800120a:	2309      	movs	r3, #9
 800120c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001216:	2311      	movs	r3, #17
 8001218:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800121e:	463a      	mov	r2, r7
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_FSMC_Init+0xec>)
 8001228:	f004 fe2c 	bl	8005e84 <HAL_SRAM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001232:	f001 fa35 	bl	80026a0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001a0 	.word	0x200001a0
 8001244:	a0000104 	.word	0xa0000104

08001248 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_FSMC_MspInit+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d131      	bne.n	80012c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_FSMC_MspInit+0x88>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6393      	str	r3, [r2, #56]	; 0x38
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001286:	f64f 7388 	movw	r3, #65416	; 0xff88
 800128a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001298:	230c      	movs	r3, #12
 800129a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_FSMC_MspInit+0x90>)
 80012a2:	f003 f8d9 	bl	8004458 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012a6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80012aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012b8:	230c      	movs	r3, #12
 80012ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_FSMC_MspInit+0x94>)
 80012c2:	f003 f8c9 	bl	8004458 <HAL_GPIO_Init>
 80012c6:	e000      	b.n	80012ca <HAL_FSMC_MspInit+0x82>
    return;
 80012c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000ac 	.word	0x200000ac
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80012e8:	f7ff ffae 	bl	8001248 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <MX_GPIO_Init+0x214>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a7d      	ldr	r2, [pc, #500]	; (8001508 <MX_GPIO_Init+0x214>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <MX_GPIO_Init+0x214>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	4b77      	ldr	r3, [pc, #476]	; (8001508 <MX_GPIO_Init+0x214>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a76      	ldr	r2, [pc, #472]	; (8001508 <MX_GPIO_Init+0x214>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b74      	ldr	r3, [pc, #464]	; (8001508 <MX_GPIO_Init+0x214>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <MX_GPIO_Init+0x214>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <MX_GPIO_Init+0x214>)
 800134c:	f043 0320 	orr.w	r3, r3, #32
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <MX_GPIO_Init+0x214>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	4b69      	ldr	r3, [pc, #420]	; (8001508 <MX_GPIO_Init+0x214>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a68      	ldr	r2, [pc, #416]	; (8001508 <MX_GPIO_Init+0x214>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b66      	ldr	r3, [pc, #408]	; (8001508 <MX_GPIO_Init+0x214>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <MX_GPIO_Init+0x214>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a61      	ldr	r2, [pc, #388]	; (8001508 <MX_GPIO_Init+0x214>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <MX_GPIO_Init+0x214>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <MX_GPIO_Init+0x214>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a5a      	ldr	r2, [pc, #360]	; (8001508 <MX_GPIO_Init+0x214>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b58      	ldr	r3, [pc, #352]	; (8001508 <MX_GPIO_Init+0x214>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b54      	ldr	r3, [pc, #336]	; (8001508 <MX_GPIO_Init+0x214>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a53      	ldr	r2, [pc, #332]	; (8001508 <MX_GPIO_Init+0x214>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <MX_GPIO_Init+0x214>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <MX_GPIO_Init+0x214>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <MX_GPIO_Init+0x214>)
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <MX_GPIO_Init+0x214>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2170      	movs	r1, #112	; 0x70
 80013ee:	4847      	ldr	r0, [pc, #284]	; (800150c <MX_GPIO_Init+0x218>)
 80013f0:	f003 f9ce 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80013fa:	4845      	ldr	r0, [pc, #276]	; (8001510 <MX_GPIO_Init+0x21c>)
 80013fc:	f003 f9c8 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001406:	4843      	ldr	r0, [pc, #268]	; (8001514 <MX_GPIO_Init+0x220>)
 8001408:	f003 f9c2 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	4841      	ldr	r0, [pc, #260]	; (8001518 <MX_GPIO_Init+0x224>)
 8001414:	f003 f9bc 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2108      	movs	r1, #8
 800141c:	483f      	ldr	r0, [pc, #252]	; (800151c <MX_GPIO_Init+0x228>)
 800141e:	f003 f9b7 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001422:	2370      	movs	r3, #112	; 0x70
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4834      	ldr	r0, [pc, #208]	; (800150c <MX_GPIO_Init+0x218>)
 800143a:	f003 f80d 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800143e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	482e      	ldr	r0, [pc, #184]	; (8001510 <MX_GPIO_Init+0x21c>)
 8001458:	f002 fffe 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	482a      	ldr	r0, [pc, #168]	; (8001518 <MX_GPIO_Init+0x224>)
 8001470:	f002 fff2 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin|T_PEN_Pin|T_MISO_Pin;
 8001474:	f241 1330 	movw	r3, #4400	; 0x1130
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4821      	ldr	r0, [pc, #132]	; (8001510 <MX_GPIO_Init+0x21c>)
 800148a:	f002 ffe5 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CLK_Pin;
 800148e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	481b      	ldr	r0, [pc, #108]	; (8001514 <MX_GPIO_Init+0x220>)
 80014a8:	f002 ffd6 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <MX_GPIO_Init+0x220>)
 80014c0:	f002 ffca 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	480e      	ldr	r0, [pc, #56]	; (8001518 <MX_GPIO_Init+0x224>)
 80014de:	f002 ffbb 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80014e2:	2308      	movs	r3, #8
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_GPIO_Init+0x228>)
 80014fa:	f002 ffad 	bl	8004458 <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	; 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000
 8001510:	40020800 	.word	0x40020800
 8001514:	40021800 	.word	0x40021800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020c00 	.word	0x40020c00

08001520 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_I2C1_Init+0x50>)
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <MX_I2C1_Init+0x54>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_I2C1_Init+0x50>)
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_I2C1_Init+0x58>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_I2C1_Init+0x50>)
 800153e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_I2C1_Init+0x50>)
 800155e:	f003 f931 	bl	80047c4 <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001568:	f001 f89a 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200001f0 	.word	0x200001f0
 8001574:	40005400 	.word	0x40005400
 8001578:	000186a0 	.word	0x000186a0

0800157c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_I2C_MspInit+0x84>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d12b      	bne.n	80015f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015be:	2312      	movs	r3, #18
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ca:	2304      	movs	r3, #4
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <HAL_I2C_MspInit+0x8c>)
 80015d6:	f002 ff3f 	bl	8004458 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005400 	.word	0x40005400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020400 	.word	0x40020400

0800160c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <LCD_WR_REG+0x1c>)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	8013      	strh	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	600ffffe 	.word	0x600ffffe

0800162c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <LCD_WR_DATA+0x1c>)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	8053      	strh	r3, [r2, #2]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	600ffffe 	.word	0x600ffffe

0800164c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <LCD_RD_DATA+0x20>)
 8001654:	885b      	ldrh	r3, [r3, #2]
 8001656:	b29b      	uxth	r3, r3
 8001658:	80fb      	strh	r3, [r7, #6]
	return ram;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	b29b      	uxth	r3, r3
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	600ffffe 	.word	0x600ffffe

08001670 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4604      	mov	r4, r0
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	4603      	mov	r3, r0
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800168e:	202a      	movs	r0, #42	; 0x2a
 8001690:	f7ff ffbc 	bl	800160c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29b      	uxth	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ffc6 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ffc0 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffba 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ffb4 	bl	800162c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80016c4:	202b      	movs	r0, #43	; 0x2b
 80016c6:	f7ff ffa1 	bl	800160c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffab 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffa5 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80016e2:	883b      	ldrh	r3, [r7, #0]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff9f 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80016ee:	883b      	ldrh	r3, [r7, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff99 	bl	800162c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80016fa:	202c      	movs	r0, #44	; 0x2c
 80016fc:	f7ff ff86 	bl	800160c <LCD_WR_REG>
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}

08001708 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <lcd_Clear+0x60>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <lcd_Clear+0x60>)
 800171c:	885b      	ldrh	r3, [r3, #2]
 800171e:	3b01      	subs	r3, #1
 8001720:	b29b      	uxth	r3, r3
 8001722:	2100      	movs	r1, #0
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff ffa3 	bl	8001670 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800172a:	2300      	movs	r3, #0
 800172c:	81fb      	strh	r3, [r7, #14]
 800172e:	e011      	b.n	8001754 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001730:	2300      	movs	r3, #0
 8001732:	81bb      	strh	r3, [r7, #12]
 8001734:	e006      	b.n	8001744 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff77 	bl	800162c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800173e:	89bb      	ldrh	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	81bb      	strh	r3, [r7, #12]
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <lcd_Clear+0x60>)
 8001746:	885b      	ldrh	r3, [r3, #2]
 8001748:	89ba      	ldrh	r2, [r7, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	d3f3      	bcc.n	8001736 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	3301      	adds	r3, #1
 8001752:	81fb      	strh	r3, [r7, #14]
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <lcd_Clear+0x60>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	89fa      	ldrh	r2, [r7, #14]
 800175a:	429a      	cmp	r2, r3
 800175c:	d3e8      	bcc.n	8001730 <lcd_Clear+0x28>
		}
	}
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000244 	.word	0x20000244

0800176c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	460b      	mov	r3, r1
 8001778:	80bb      	strh	r3, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	88b9      	ldrh	r1, [r7, #4]
 8001784:	88f8      	ldrh	r0, [r7, #6]
 8001786:	f7ff ff73 	bl	8001670 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff4d 	bl	800162c <LCD_WR_DATA>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	4613      	mov	r3, r2
 80017b8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80017c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	fb12 f303 	smulbb	r3, r2, r3
 80017f2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	3b20      	subs	r3, #32
 80017f8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4413      	add	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	b29c      	uxth	r4, r3
 8001808:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800180c:	b29a      	uxth	r2, r3
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29b      	uxth	r3, r3
 8001818:	88b9      	ldrh	r1, [r7, #4]
 800181a:	88f8      	ldrh	r0, [r7, #6]
 800181c:	4622      	mov	r2, r4
 800181e:	f7ff ff27 	bl	8001670 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001822:	2300      	movs	r3, #0
 8001824:	827b      	strh	r3, [r7, #18]
 8001826:	e07a      	b.n	800191e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800182c:	2b0c      	cmp	r3, #12
 800182e:	d028      	beq.n	8001882 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001830:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001834:	2b10      	cmp	r3, #16
 8001836:	d108      	bne.n	800184a <lcd_ShowChar+0xae>
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	8a7b      	ldrh	r3, [r7, #18]
 800183c:	493c      	ldr	r1, [pc, #240]	; (8001930 <lcd_ShowChar+0x194>)
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	440a      	add	r2, r1
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	75fb      	strb	r3, [r7, #23]
 8001848:	e01b      	b.n	8001882 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800184a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800184e:	2b18      	cmp	r3, #24
 8001850:	d10b      	bne.n	800186a <lcd_ShowChar+0xce>
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	8a79      	ldrh	r1, [r7, #18]
 8001856:	4837      	ldr	r0, [pc, #220]	; (8001934 <lcd_ShowChar+0x198>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4403      	add	r3, r0
 8001862:	440b      	add	r3, r1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	75fb      	strb	r3, [r7, #23]
 8001868:	e00b      	b.n	8001882 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800186a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800186e:	2b20      	cmp	r3, #32
 8001870:	d15a      	bne.n	8001928 <lcd_ShowChar+0x18c>
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	8a7b      	ldrh	r3, [r7, #18]
 8001876:	4930      	ldr	r1, [pc, #192]	; (8001938 <lcd_ShowChar+0x19c>)
 8001878:	0192      	lsls	r2, r2, #6
 800187a:	440a      	add	r2, r1
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001882:	2300      	movs	r3, #0
 8001884:	75bb      	strb	r3, [r7, #22]
 8001886:	e044      	b.n	8001912 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001888:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800188c:	2b00      	cmp	r3, #0
 800188e:	d120      	bne.n	80018d2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001890:	7dfa      	ldrb	r2, [r7, #23]
 8001892:	7dbb      	ldrb	r3, [r7, #22]
 8001894:	fa42 f303 	asr.w	r3, r2, r3
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <lcd_ShowChar+0x10e>
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fec2 	bl	800162c <LCD_WR_DATA>
 80018a8:	e003      	b.n	80018b2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80018aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff febd 	bl	800162c <LCD_WR_DATA>
				m++;
 80018b2:	7d7b      	ldrb	r3, [r7, #21]
 80018b4:	3301      	adds	r3, #1
 80018b6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80018b8:	7d7b      	ldrb	r3, [r7, #21]
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80018c0:	fb02 f201 	mul.w	r2, r2, r1
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d11f      	bne.n	800190c <lcd_ShowChar+0x170>
				{
					m=0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	757b      	strb	r3, [r7, #21]
					break;
 80018d0:	e022      	b.n	8001918 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80018d2:	7dfa      	ldrb	r2, [r7, #23]
 80018d4:	7dbb      	ldrb	r3, [r7, #22]
 80018d6:	fa42 f303 	asr.w	r3, r2, r3
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <lcd_ShowChar+0x152>
 80018e2:	883a      	ldrh	r2, [r7, #0]
 80018e4:	88b9      	ldrh	r1, [r7, #4]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff3f 	bl	800176c <lcd_DrawPoint>
				x++;
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	3301      	adds	r3, #1
 80018f2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80018f4:	88fa      	ldrh	r2, [r7, #6]
 80018f6:	8a3b      	ldrh	r3, [r7, #16]
 80018f8:	1ad2      	subs	r2, r2, r3
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d105      	bne.n	800190c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001900:	8a3b      	ldrh	r3, [r7, #16]
 8001902:	80fb      	strh	r3, [r7, #6]
					y++;
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	80bb      	strh	r3, [r7, #4]
					break;
 800190a:	e005      	b.n	8001918 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800190c:	7dbb      	ldrb	r3, [r7, #22]
 800190e:	3301      	adds	r3, #1
 8001910:	75bb      	strb	r3, [r7, #22]
 8001912:	7dbb      	ldrb	r3, [r7, #22]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d9b7      	bls.n	8001888 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001918:	8a7b      	ldrh	r3, [r7, #18]
 800191a:	3301      	adds	r3, #1
 800191c:	827b      	strh	r3, [r7, #18]
 800191e:	8a7a      	ldrh	r2, [r7, #18]
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	429a      	cmp	r2, r3
 8001924:	d380      	bcc.n	8001828 <lcd_ShowChar+0x8c>
 8001926:	e000      	b.n	800192a <lcd_ShowChar+0x18e>
		else return;
 8001928:	bf00      	nop
				}
			}
		}
	}
}
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	08009270 	.word	0x08009270
 8001934:	08009860 	.word	0x08009860
 8001938:	0800aa30 	.word	0x0800aa30

0800193c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	460a      	mov	r2, r1
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800194c:	2301      	movs	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001950:	e004      	b.n	800195c <mypow+0x20>
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	71ba      	strb	r2, [r7, #6]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f5      	bne.n	8001952 <mypow+0x16>
	return result;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af04      	add	r7, sp, #16
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	80fb      	strh	r3, [r7, #6]
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]
 800198e:	4613      	mov	r3, r2
 8001990:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001992:	2300      	movs	r3, #0
 8001994:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e059      	b.n	8001a58 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80019a4:	887c      	ldrh	r4, [r7, #2]
 80019a6:	787a      	ldrb	r2, [r7, #1]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	200a      	movs	r0, #10
 80019b6:	f7ff ffc1 	bl	800193c <mypow>
 80019ba:	4603      	mov	r3, r0
 80019bc:	fbb4 f1f3 	udiv	r1, r4, r3
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <lcd_ShowIntNum+0xf8>)
 80019c2:	fba3 2301 	umull	r2, r3, r3, r1
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	1aca      	subs	r2, r1, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d121      	bne.n	8001a20 <lcd_ShowIntNum+0xac>
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	da1c      	bge.n	8001a20 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80019e6:	7b3b      	ldrb	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d117      	bne.n	8001a1c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	7b7b      	ldrb	r3, [r7, #13]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	fb12 f303 	smulbb	r3, r2, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4413      	add	r3, r2
 80019fe:	b298      	uxth	r0, r3
 8001a00:	8c3a      	ldrh	r2, [r7, #32]
 8001a02:	88b9      	ldrh	r1, [r7, #4]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4613      	mov	r3, r2
 8001a14:	2220      	movs	r2, #32
 8001a16:	f7ff fec1 	bl	800179c <lcd_ShowChar>
				continue;
 8001a1a:	e01a      	b.n	8001a52 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	fb12 f303 	smulbb	r3, r2, r3
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4413      	add	r3, r2
 8001a32:	b298      	uxth	r0, r3
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	8c3c      	ldrh	r4, [r7, #32]
 8001a3c:	88b9      	ldrh	r1, [r7, #4]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	f7ff fea5 	bl	800179c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	787b      	ldrb	r3, [r7, #1]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3a1      	bcc.n	80019a4 <lcd_ShowIntNum+0x30>
	}
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	cccccccd 	.word	0xcccccccd

08001a70 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	4604      	mov	r4, r0
 8001a78:	4608      	mov	r0, r1
 8001a7a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	81fb      	strh	r3, [r7, #14]
 8001a86:	4603      	mov	r3, r0
 8001a88:	81bb      	strh	r3, [r7, #12]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001a92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b78 <lcd_ShowFloatNum+0x108>
 8001aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]
 8001ab4:	e057      	b.n	8001b66 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001ab6:	8abc      	ldrh	r4, [r7, #20]
 8001ab8:	79fa      	ldrb	r2, [r7, #7]
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f7ff ff38 	bl	800193c <mypow>
 8001acc:	4603      	mov	r3, r0
 8001ace:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <lcd_ShowFloatNum+0x10c>)
 8001ad4:	fba3 2301 	umull	r2, r3, r3, r1
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1aca      	subs	r2, r1, r3
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001ae8:	7dfa      	ldrb	r2, [r7, #23]
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	3b02      	subs	r3, #2
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d11d      	bne.n	8001b2e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	3b02      	subs	r3, #2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	7dbb      	ldrb	r3, [r7, #22]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	fb12 f303 	smulbb	r3, r2, r3
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	4413      	add	r3, r2
 8001b06:	b298      	uxth	r0, r3
 8001b08:	88ba      	ldrh	r2, [r7, #4]
 8001b0a:	89b9      	ldrh	r1, [r7, #12]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	222e      	movs	r2, #46	; 0x2e
 8001b1e:	f7ff fe3d 	bl	800179c <lcd_ShowChar>
			t++;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	3301      	adds	r3, #1
 8001b26:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	7dbb      	ldrb	r3, [r7, #22]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	fb12 f303 	smulbb	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	89fb      	ldrh	r3, [r7, #14]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b298      	uxth	r0, r3
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	3330      	adds	r3, #48	; 0x30
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	88bc      	ldrh	r4, [r7, #4]
 8001b4a:	89b9      	ldrh	r1, [r7, #12]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	f7ff fe1e 	bl	800179c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	3301      	adds	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
 8001b66:	7dfa      	ldrb	r2, [r7, #23]
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3a3      	bcc.n	8001ab6 <lcd_ShowFloatNum+0x46>
	}
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	42c80000 	.word	0x42c80000
 8001b7c:	cccccccd 	.word	0xcccccccd

08001b80 <lcd_ShowString>:

void lcd_ShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08b      	sub	sp, #44	; 0x2c
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	81bb      	strh	r3, [r7, #12]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8001b9e:	e048      	b.n	8001c32 <lcd_ShowString+0xb2>
		if (!bHz) {
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d145      	bne.n	8001c32 <lcd_ShowString+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <lcd_ShowString+0xc4>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc3f      	bgt.n	8001c3c <lcd_ShowString+0xbc>
 8001bbc:	89ba      	ldrh	r2, [r7, #12]
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <lcd_ShowString+0xc4>)
 8001bc0:	885b      	ldrh	r3, [r3, #2]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc8:	1acb      	subs	r3, r1, r3
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dc36      	bgt.n	8001c3c <lcd_ShowString+0xbc>
				return;
			if (*str > 0x80)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b80      	cmp	r3, #128	; 0x80
 8001bd4:	d902      	bls.n	8001bdc <lcd_ShowString+0x5c>
				bHz = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	e02a      	b.n	8001c32 <lcd_ShowString+0xb2>
			else {
				if (*str == 0x0D) {
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0d      	cmp	r3, #13
 8001be2:	d10b      	bne.n	8001bfc <lcd_ShowString+0x7c>
					y += sizey;
 8001be4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	89bb      	ldrh	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001bf0:	8abb      	ldrh	r3, [r7, #20]
 8001bf2:	81fb      	strh	r3, [r7, #14]
					str++;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	e017      	b.n	8001c2c <lcd_ShowString+0xac>
				} else {
					lcd_ShowChar(x, y, *str, fc, bc, sizey, mode);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	88fc      	ldrh	r4, [r7, #6]
 8001c02:	89b9      	ldrh	r1, [r7, #12]
 8001c04:	89f8      	ldrh	r0, [r7, #14]
 8001c06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7ff fdc0 	bl	800179c <lcd_ShowChar>
					x += sizey / 2;
 8001c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	89fb      	ldrh	r3, [r7, #14]
 8001c28:	4413      	add	r3, r2
 8001c2a:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1b2      	bne.n	8001ba0 <lcd_ShowString+0x20>
 8001c3a:	e000      	b.n	8001c3e <lcd_ShowString+0xbe>
				return;
 8001c3c:	bf00      	nop
			}
		}
	}
}
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	20000244 	.word	0x20000244

08001c48 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <lcd_SetDir+0x44>)
 8001c64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c68:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <lcd_SetDir+0x44>)
 8001c6c:	22f0      	movs	r2, #240	; 0xf0
 8001c6e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c70:	e006      	b.n	8001c80 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <lcd_SetDir+0x44>)
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <lcd_SetDir+0x44>)
 8001c7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c7e:	805a      	strh	r2, [r3, #2]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000244 	.word	0x20000244

08001c90 <lcd_init>:


void lcd_init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9a:	48aa      	ldr	r0, [pc, #680]	; (8001f44 <lcd_init+0x2b4>)
 8001c9c:	f002 fd78 	bl	8004790 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca4:	f001 fa8e 	bl	80031c4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	48a5      	ldr	r0, [pc, #660]	; (8001f44 <lcd_init+0x2b4>)
 8001cb0:	f002 fd6e 	bl	8004790 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb8:	f001 fa84 	bl	80031c4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff ffc3 	bl	8001c48 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001cc2:	20d3      	movs	r0, #211	; 0xd3
 8001cc4:	f7ff fca2 	bl	800160c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cc8:	f7ff fcc0 	bl	800164c <LCD_RD_DATA>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b9d      	ldr	r3, [pc, #628]	; (8001f48 <lcd_init+0x2b8>)
 8001cd2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cd4:	f7ff fcba 	bl	800164c <LCD_RD_DATA>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	; (8001f48 <lcd_init+0x2b8>)
 8001cde:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001ce0:	f7ff fcb4 	bl	800164c <LCD_RD_DATA>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b97      	ldr	r3, [pc, #604]	; (8001f48 <lcd_init+0x2b8>)
 8001cea:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cec:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <lcd_init+0x2b8>)
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b94      	ldr	r3, [pc, #592]	; (8001f48 <lcd_init+0x2b8>)
 8001cf6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001cf8:	f7ff fca8 	bl	800164c <LCD_RD_DATA>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b91      	ldr	r3, [pc, #580]	; (8001f48 <lcd_init+0x2b8>)
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b8f      	ldr	r3, [pc, #572]	; (8001f48 <lcd_init+0x2b8>)
 8001d0a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d0c:	20cf      	movs	r0, #207	; 0xcf
 8001d0e:	f7ff fc7d 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff fc8a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d18:	20c1      	movs	r0, #193	; 0xc1
 8001d1a:	f7ff fc87 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d1e:	2030      	movs	r0, #48	; 0x30
 8001d20:	f7ff fc84 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d24:	20ed      	movs	r0, #237	; 0xed
 8001d26:	f7ff fc71 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d2a:	2064      	movs	r0, #100	; 0x64
 8001d2c:	f7ff fc7e 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f7ff fc7b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d36:	2012      	movs	r0, #18
 8001d38:	f7ff fc78 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d3c:	2081      	movs	r0, #129	; 0x81
 8001d3e:	f7ff fc75 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d42:	20e8      	movs	r0, #232	; 0xe8
 8001d44:	f7ff fc62 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d48:	2085      	movs	r0, #133	; 0x85
 8001d4a:	f7ff fc6f 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d4e:	2010      	movs	r0, #16
 8001d50:	f7ff fc6c 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d54:	207a      	movs	r0, #122	; 0x7a
 8001d56:	f7ff fc69 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d5a:	20cb      	movs	r0, #203	; 0xcb
 8001d5c:	f7ff fc56 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d60:	2039      	movs	r0, #57	; 0x39
 8001d62:	f7ff fc63 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d66:	202c      	movs	r0, #44	; 0x2c
 8001d68:	f7ff fc60 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fc5d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d72:	2034      	movs	r0, #52	; 0x34
 8001d74:	f7ff fc5a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fc57 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d7e:	20f7      	movs	r0, #247	; 0xf7
 8001d80:	f7ff fc44 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d84:	2020      	movs	r0, #32
 8001d86:	f7ff fc51 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d8a:	20ea      	movs	r0, #234	; 0xea
 8001d8c:	f7ff fc3e 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff fc4b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fc48 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d9c:	20c0      	movs	r0, #192	; 0xc0
 8001d9e:	f7ff fc35 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001da2:	201b      	movs	r0, #27
 8001da4:	f7ff fc42 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001da8:	20c1      	movs	r0, #193	; 0xc1
 8001daa:	f7ff fc2f 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff fc3c 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001db4:	20c5      	movs	r0, #197	; 0xc5
 8001db6:	f7ff fc29 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001dba:	2030      	movs	r0, #48	; 0x30
 8001dbc:	f7ff fc36 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001dc0:	2030      	movs	r0, #48	; 0x30
 8001dc2:	f7ff fc33 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001dc6:	20c7      	movs	r0, #199	; 0xc7
 8001dc8:	f7ff fc20 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001dcc:	20b7      	movs	r0, #183	; 0xb7
 8001dce:	f7ff fc2d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001dd2:	2036      	movs	r0, #54	; 0x36
 8001dd4:	f7ff fc1a 	bl	800160c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001dd8:	2008      	movs	r0, #8
 8001dda:	f7ff fc27 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001dde:	203a      	movs	r0, #58	; 0x3a
 8001de0:	f7ff fc14 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001de4:	2055      	movs	r0, #85	; 0x55
 8001de6:	f7ff fc21 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dea:	20b1      	movs	r0, #177	; 0xb1
 8001dec:	f7ff fc0e 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fc1b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001df6:	201a      	movs	r0, #26
 8001df8:	f7ff fc18 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001dfc:	20b6      	movs	r0, #182	; 0xb6
 8001dfe:	f7ff fc05 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e02:	200a      	movs	r0, #10
 8001e04:	f7ff fc12 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e08:	20a2      	movs	r0, #162	; 0xa2
 8001e0a:	f7ff fc0f 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e0e:	20f2      	movs	r0, #242	; 0xf2
 8001e10:	f7ff fbfc 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff fc09 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e1a:	2026      	movs	r0, #38	; 0x26
 8001e1c:	f7ff fbf6 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff fc03 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e26:	20e0      	movs	r0, #224	; 0xe0
 8001e28:	f7ff fbf0 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e2c:	200f      	movs	r0, #15
 8001e2e:	f7ff fbfd 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e32:	202a      	movs	r0, #42	; 0x2a
 8001e34:	f7ff fbfa 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e38:	2028      	movs	r0, #40	; 0x28
 8001e3a:	f7ff fbf7 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e3e:	2008      	movs	r0, #8
 8001e40:	f7ff fbf4 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e44:	200e      	movs	r0, #14
 8001e46:	f7ff fbf1 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e4a:	2008      	movs	r0, #8
 8001e4c:	f7ff fbee 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e50:	2054      	movs	r0, #84	; 0x54
 8001e52:	f7ff fbeb 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e56:	20a9      	movs	r0, #169	; 0xa9
 8001e58:	f7ff fbe8 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e5c:	2043      	movs	r0, #67	; 0x43
 8001e5e:	f7ff fbe5 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f7ff fbe2 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e68:	200f      	movs	r0, #15
 8001e6a:	f7ff fbdf 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fbdc 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fbd9 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fbd6 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fbd3 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e86:	20e1      	movs	r0, #225	; 0xe1
 8001e88:	f7ff fbc0 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fbcd 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e92:	2015      	movs	r0, #21
 8001e94:	f7ff fbca 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e98:	2017      	movs	r0, #23
 8001e9a:	f7ff fbc7 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e9e:	2007      	movs	r0, #7
 8001ea0:	f7ff fbc4 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ea4:	2011      	movs	r0, #17
 8001ea6:	f7ff fbc1 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f7ff fbbe 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001eb0:	202b      	movs	r0, #43	; 0x2b
 8001eb2:	f7ff fbbb 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001eb6:	2056      	movs	r0, #86	; 0x56
 8001eb8:	f7ff fbb8 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ebc:	203c      	movs	r0, #60	; 0x3c
 8001ebe:	f7ff fbb5 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ec2:	2005      	movs	r0, #5
 8001ec4:	f7ff fbb2 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ec8:	2010      	movs	r0, #16
 8001eca:	f7ff fbaf 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f7ff fbac 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ed4:	203f      	movs	r0, #63	; 0x3f
 8001ed6:	f7ff fba9 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001eda:	203f      	movs	r0, #63	; 0x3f
 8001edc:	f7ff fba6 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ee0:	200f      	movs	r0, #15
 8001ee2:	f7ff fba3 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ee6:	202b      	movs	r0, #43	; 0x2b
 8001ee8:	f7ff fb90 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff fb9d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fb9a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff fb97 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001efe:	203f      	movs	r0, #63	; 0x3f
 8001f00:	f7ff fb94 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f04:	202a      	movs	r0, #42	; 0x2a
 8001f06:	f7ff fb81 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fb8e 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fb8b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fb88 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f1c:	20ef      	movs	r0, #239	; 0xef
 8001f1e:	f7ff fb85 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f22:	2011      	movs	r0, #17
 8001f24:	f7ff fb72 	bl	800160c <LCD_WR_REG>
	HAL_Delay(120);
 8001f28:	2078      	movs	r0, #120	; 0x78
 8001f2a:	f001 f94b 	bl	80031c4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f2e:	2029      	movs	r0, #41	; 0x29
 8001f30:	f7ff fb6c 	bl	800160c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f3a:	4804      	ldr	r0, [pc, #16]	; (8001f4c <lcd_init+0x2bc>)
 8001f3c:	f002 fc28 	bl	8004790 <HAL_GPIO_WritePin>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40020800 	.word	0x40020800
 8001f48:	20000244 	.word	0x20000244
 8001f4c:	40020000 	.word	0x40020000

08001f50 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2140      	movs	r1, #64	; 0x40
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <led7_init+0x14>)
 8001f5a:	f002 fc19 	bl	8004790 <HAL_GPIO_WritePin>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021800 	.word	0x40021800

08001f68 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <led7_Scan+0x104>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b3d      	ldr	r3, [pc, #244]	; (800206c <led7_Scan+0x104>)
 8001f76:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <led7_Scan+0x108>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <led7_Scan+0x10c>)
 8001f80:	5c9b      	ldrb	r3, [r3, r2]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <led7_Scan+0x104>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b36      	ldr	r3, [pc, #216]	; (800206c <led7_Scan+0x104>)
 8001f94:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <led7_Scan+0x108>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d846      	bhi.n	800202c <led7_Scan+0xc4>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <led7_Scan+0x3c>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fd3 	.word	0x08001fd3
 8001fac:	08001ff1 	.word	0x08001ff1
 8001fb0:	0800200f 	.word	0x0800200f
	case 0:
		spi_buffer |= 0x00b0;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <led7_Scan+0x104>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <led7_Scan+0x104>)
 8001fc0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <led7_Scan+0x104>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <led7_Scan+0x104>)
 8001fce:	801a      	strh	r2, [r3, #0]
		break;
 8001fd0:	e02d      	b.n	800202e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <led7_Scan+0x104>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <led7_Scan+0x104>)
 8001fde:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <led7_Scan+0x104>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f023 0320 	bic.w	r3, r3, #32
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <led7_Scan+0x104>)
 8001fec:	801a      	strh	r2, [r3, #0]
		break;
 8001fee:	e01e      	b.n	800202e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <led7_Scan+0x104>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <led7_Scan+0x104>)
 8001ffc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <led7_Scan+0x104>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f023 0310 	bic.w	r3, r3, #16
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <led7_Scan+0x104>)
 800200a:	801a      	strh	r2, [r3, #0]
		break;
 800200c:	e00f      	b.n	800202e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <led7_Scan+0x104>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <led7_Scan+0x104>)
 800201a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <led7_Scan+0x104>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <led7_Scan+0x104>)
 8002028:	801a      	strh	r2, [r3, #0]
		break;
 800202a:	e000      	b.n	800202e <led7_Scan+0xc6>
	default:
		break;
 800202c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <led7_Scan+0x108>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	425a      	negs	r2, r3
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	bf58      	it	pl
 8002040:	4253      	negpl	r3, r2
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <led7_Scan+0x108>)
 8002046:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	480a      	ldr	r0, [pc, #40]	; (8002078 <led7_Scan+0x110>)
 800204e:	f002 fb9f 	bl	8004790 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002052:	2301      	movs	r3, #1
 8002054:	2202      	movs	r2, #2
 8002056:	4905      	ldr	r1, [pc, #20]	; (800206c <led7_Scan+0x104>)
 8002058:	4808      	ldr	r0, [pc, #32]	; (800207c <led7_Scan+0x114>)
 800205a:	f003 f9f4 	bl	8005446 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800205e:	2201      	movs	r2, #1
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <led7_Scan+0x110>)
 8002064:	f002 fb94 	bl	8004790 <HAL_GPIO_WritePin>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000000e 	.word	0x2000000e
 8002070:	200000b0 	.word	0x200000b0
 8002074:	20000000 	.word	0x20000000
 8002078:	40021800 	.word	0x40021800
 800207c:	2000028c 	.word	0x2000028c

08002080 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0e      	blt.n	80020b2 <led7_SetDigit+0x32>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b09      	cmp	r3, #9
 8002098:	dc0b      	bgt.n	80020b2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <led7_SetDigit+0x40>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b2d9      	uxtb	r1, r3
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <led7_SetDigit+0x44>)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	460a      	mov	r2, r1
 80020b0:	701a      	strb	r2, [r3, #0]
	}
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000004 	.word	0x20000004
 80020c4:	20000000 	.word	0x20000000

080020c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020cc:	f001 f808 	bl	80030e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d0:	f000 f82c 	bl	800212c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d4:	f7ff f90e 	bl	80012f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80020d8:	f000 fc70 	bl	80029bc <MX_SPI1_Init>
  MX_TIM2_Init();
 80020dc:	f000 fe12 	bl	8002d04 <MX_TIM2_Init>
  MX_FSMC_Init();
 80020e0:	f7ff f838 	bl	8001154 <MX_FSMC_Init>
  MX_I2C1_Init();
 80020e4:	f7ff fa1c 	bl	8001520 <MX_I2C1_Init>
  MX_DMA_Init();
 80020e8:	f7ff f814 	bl	8001114 <MX_DMA_Init>
  MX_ADC1_Init();
 80020ec:	f7fe fe5a 	bl	8000da4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80020f0:	f000 ff52 	bl	8002f98 <MX_USART1_UART_Init>
  MX_TIM13_Init();
 80020f4:	f000 fe52 	bl	8002d9c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80020f8:	f000 f882 	bl	8002200 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fb03 	bl	8001708 <lcd_Clear>

	while (1) {
		while (!flag_timer2);
 8002102:	bf00      	nop
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <main+0x60>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0fb      	beq.n	8002104 <main+0x3c>
		flag_timer2 = 0;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <main+0x60>)
 800210e:	2200      	movs	r2, #0
 8002110:	801a      	strh	r2, [r3, #0]
		button_Scan();
 8002112:	f7fe ff71 	bl	8000ff8 <button_Scan>
		TestADC();
 8002116:	f000 f90f 	bl	8002338 <TestADC>
		TestBuzzer();
 800211a:	f000 fa75 	bl	8002608 <TestBuzzer>
		setTime_led7();
 800211e:	f000 f883 	bl	8002228 <setTime_led7>
		led7_Scan();
 8002122:	f7ff ff21 	bl	8001f68 <led7_Scan>
		while (!flag_timer2);
 8002126:	e7ec      	b.n	8002102 <main+0x3a>
 8002128:	200000c0 	.word	0x200000c0

0800212c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b094      	sub	sp, #80	; 0x50
 8002130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	2230      	movs	r2, #48	; 0x30
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f005 ffe4 	bl	8008108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <SystemClock_Config+0xcc>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <SystemClock_Config+0xcc>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <SystemClock_Config+0xcc>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <SystemClock_Config+0xd0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <SystemClock_Config+0xd0>)
 8002176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <SystemClock_Config+0xd0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002190:	2310      	movs	r3, #16
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002194:	2302      	movs	r3, #2
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002198:	2300      	movs	r3, #0
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800219c:	2308      	movs	r3, #8
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021a0:	23a8      	movs	r3, #168	; 0xa8
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021a8:	2304      	movs	r3, #4
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ac:	f107 0320 	add.w	r3, r7, #32
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fc4b 	bl	8004a4c <HAL_RCC_OscConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021bc:	f000 fa70 	bl	80026a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c0:	230f      	movs	r3, #15
 80021c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80021d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	2105      	movs	r1, #5
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 feac 	bl	8004f3c <HAL_RCC_ClockConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021ea:	f000 fa59 	bl	80026a0 <Error_Handler>
  }
}
 80021ee:	bf00      	nop
 80021f0:	3750      	adds	r7, #80	; 0x50
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40007000 	.word	0x40007000

08002200 <system_init>:

/* USER CODE BEGIN 4 */
	void system_init() {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
		button_init();
 8002204:	f7fe feec 	bl	8000fe0 <button_init>
		lcd_init();
 8002208:	f7ff fd42 	bl	8001c90 <lcd_init>
		led7_init();
 800220c:	f7ff fea0 	bl	8001f50 <led7_init>
		sensor_init();
 8002210:	f000 fa9a 	bl	8002748 <sensor_init>
		buzzer_init();
 8002214:	f7fe ff5c 	bl	80010d0 <buzzer_init>

		timer_init();
 8002218:	f000 fb80 	bl	800291c <timer_init>
		setTimer2(50);
 800221c:	2032      	movs	r0, #50	; 0x32
 800221e:	f000 fb87 	bl	8002930 <setTimer2>
	}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <setTime_led7>:
		led7_SetDigit(4, 2, 0);
		led7_SetDigit(7, 3, 0);
	}

	void setTime_led7()
	{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
		count_update = (count_update + 1) % 20;
 800222c:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <setTime_led7+0xf8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c59      	adds	r1, r3, #1
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <setTime_led7+0xfc>)
 8002234:	fb83 2301 	smull	r2, r3, r3, r1
 8002238:	10da      	asrs	r2, r3, #3
 800223a:	17cb      	asrs	r3, r1, #31
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	1aca      	subs	r2, r1, r3
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <setTime_led7+0xf8>)
 800224a:	601a      	str	r2, [r3, #0]
		if (count_update == 0)
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <setTime_led7+0xf8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d163      	bne.n	800231c <setTime_led7+0xf4>
		{
			second = second + 1;
 8002254:	4b34      	ldr	r3, [pc, #208]	; (8002328 <setTime_led7+0x100>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a33      	ldr	r2, [pc, #204]	; (8002328 <setTime_led7+0x100>)
 800225c:	6013      	str	r3, [r2, #0]
			if(second >= 60)
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <setTime_led7+0x100>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b3b      	cmp	r3, #59	; 0x3b
 8002264:	dd1e      	ble.n	80022a4 <setTime_led7+0x7c>
			{
			  second = 0;
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <setTime_led7+0x100>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
			  min = min + 1;
 800226c:	4b2f      	ldr	r3, [pc, #188]	; (800232c <setTime_led7+0x104>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a2e      	ldr	r2, [pc, #184]	; (800232c <setTime_led7+0x104>)
 8002274:	6013      	str	r3, [r2, #0]
			  if (min >= 60){
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <setTime_led7+0x104>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b3b      	cmp	r3, #59	; 0x3b
 800227c:	dd12      	ble.n	80022a4 <setTime_led7+0x7c>
				  min = 0;
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <setTime_led7+0x104>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
				  hour = (hour +1) % 24;
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <setTime_led7+0x108>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <setTime_led7+0x10c>)
 800228c:	fb83 2301 	smull	r2, r3, r3, r1
 8002290:	109a      	asrs	r2, r3, #2
 8002292:	17cb      	asrs	r3, r1, #31
 8002294:	1ad2      	subs	r2, r2, r3
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1aca      	subs	r2, r1, r3
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <setTime_led7+0x108>)
 80022a2:	601a      	str	r2, [r3, #0]
			  }
		  }
			led7_SetDigit(hour/10, 0, 0);
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <setTime_led7+0x108>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <setTime_led7+0xfc>)
 80022aa:	fb82 1203 	smull	r1, r2, r2, r3
 80022ae:	1092      	asrs	r2, r2, #2
 80022b0:	17db      	asrs	r3, r3, #31
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fee1 	bl	8002080 <led7_SetDigit>
			led7_SetDigit(hour%10, 1, 0);
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <setTime_led7+0x108>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <setTime_led7+0xfc>)
 80022c4:	fb83 1302 	smull	r1, r3, r3, r2
 80022c8:	1099      	asrs	r1, r3, #2
 80022ca:	17d3      	asrs	r3, r2, #31
 80022cc:	1ac8      	subs	r0, r1, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4403      	add	r3, r0
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	1ad0      	subs	r0, r2, r3
 80022d8:	2200      	movs	r2, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	f7ff fed0 	bl	8002080 <led7_SetDigit>
			led7_SetDigit(min/10, 2, 0);
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <setTime_led7+0x104>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <setTime_led7+0xfc>)
 80022e6:	fb82 1203 	smull	r1, r2, r2, r3
 80022ea:	1092      	asrs	r2, r2, #2
 80022ec:	17db      	asrs	r3, r3, #31
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	2102      	movs	r1, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fec3 	bl	8002080 <led7_SetDigit>
			led7_SetDigit(min%10, 3, 0);
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <setTime_led7+0x104>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <setTime_led7+0xfc>)
 8002300:	fb83 1302 	smull	r1, r3, r3, r2
 8002304:	1099      	asrs	r1, r3, #2
 8002306:	17d3      	asrs	r3, r2, #31
 8002308:	1ac8      	subs	r0, r1, r3
 800230a:	4603      	mov	r3, r0
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4403      	add	r3, r0
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	1ad0      	subs	r0, r2, r3
 8002314:	2200      	movs	r2, #0
 8002316:	2103      	movs	r1, #3
 8002318:	f7ff feb2 	bl	8002080 <led7_SetDigit>
		}
	}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200000b4 	.word	0x200000b4
 8002324:	66666667 	.word	0x66666667
 8002328:	20000018 	.word	0x20000018
 800232c:	20000014 	.word	0x20000014
 8002330:	20000010 	.word	0x20000010
 8002334:	2aaaaaab 	.word	0x2aaaaaab

08002338 <TestADC>:
		}
	}

	uint8_t count_adc = 0;
	int alert = 0;
	void TestADC() {
 8002338:	b580      	push	{r7, lr}
 800233a:	ed2d 8b02 	vpush	{d8}
 800233e:	b084      	sub	sp, #16
 8002340:	af04      	add	r7, sp, #16
		count_adc = (count_adc + 1) % 20;
 8002342:	4ba2      	ldr	r3, [pc, #648]	; (80025cc <TestADC+0x294>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	4ba1      	ldr	r3, [pc, #644]	; (80025d0 <TestADC+0x298>)
 800234a:	fb83 1302 	smull	r1, r3, r3, r2
 800234e:	10d9      	asrs	r1, r3, #3
 8002350:	17d3      	asrs	r3, r2, #31
 8002352:	1ac9      	subs	r1, r1, r3
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	1ad1      	subs	r1, r2, r3
 800235e:	b2ca      	uxtb	r2, r1
 8002360:	4b9a      	ldr	r3, [pc, #616]	; (80025cc <TestADC+0x294>)
 8002362:	701a      	strb	r2, [r3, #0]
		if (count_adc == 0) {
 8002364:	4b99      	ldr	r3, [pc, #612]	; (80025cc <TestADC+0x294>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 812a 	bne.w	80025c2 <TestADC+0x28a>
			sensor_Read();
 800236e:	f000 f9f9 	bl	8002764 <sensor_Read>
			if (sensor_GetPotentiometer()*100/4095 >= 10)
 8002372:	f000 fa11 	bl	8002798 <sensor_GetPotentiometer>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	2364      	movs	r3, #100	; 0x64
 800237c:	fb03 f302 	mul.w	r3, r3, r2
 8002380:	f649 72f5 	movw	r2, #40949	; 0x9ff5
 8002384:	4293      	cmp	r3, r2
 8002386:	dd1b      	ble.n	80023c0 <TestADC+0x88>
			{
				if (alert == 0)
 8002388:	4b92      	ldr	r3, [pc, #584]	; (80025d4 <TestADC+0x29c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <TestADC+0x66>
				{
					buzzer_SetVolume(0);
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fea7 	bl	80010e4 <buzzer_SetVolume>
					alert = 1;
 8002396:	4b8f      	ldr	r3, [pc, #572]	; (80025d4 <TestADC+0x29c>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e009      	b.n	80023b2 <TestADC+0x7a>
				}
				else if (alert == 1)
 800239e:	4b8d      	ldr	r3, [pc, #564]	; (80025d4 <TestADC+0x29c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <TestADC+0x7a>
				{
					buzzer_SetVolume(75);
 80023a6:	204b      	movs	r0, #75	; 0x4b
 80023a8:	f7fe fe9c 	bl	80010e4 <buzzer_SetVolume>
					alert = 0;
 80023ac:	4b89      	ldr	r3, [pc, #548]	; (80025d4 <TestADC+0x29c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
				}
				uart_Rs232SendString("------WARNING------\n");
 80023b2:	4889      	ldr	r0, [pc, #548]	; (80025d8 <TestADC+0x2a0>)
 80023b4:	f000 fdb6 	bl	8002f24 <uart_Rs232SendString>
				uart_Rs232SendString("Potentiometer > 70%\n");
 80023b8:	4888      	ldr	r0, [pc, #544]	; (80025dc <TestADC+0x2a4>)
 80023ba:	f000 fdb3 	bl	8002f24 <uart_Rs232SendString>
 80023be:	e002      	b.n	80023c6 <TestADC+0x8e>
			}
			else
			{
				buzzer_SetVolume(0);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fe8f 	bl	80010e4 <buzzer_SetVolume>
			}
			lcd_ShowString(10, 80, "Voltage(V):", RED, BLACK, 16, 0);
 80023c6:	2300      	movs	r3, #0
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	2310      	movs	r3, #16
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023d6:	4a82      	ldr	r2, [pc, #520]	; (80025e0 <TestADC+0x2a8>)
 80023d8:	2150      	movs	r1, #80	; 0x50
 80023da:	200a      	movs	r0, #10
 80023dc:	f7ff fbd0 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 80, sensor_GetVoltage(), 4, RED, BLACK, 16);
 80023e0:	f000 f9e6 	bl	80027b0 <sensor_GetVoltage>
 80023e4:	eef0 7a40 	vmov.f32	s15, s0
 80023e8:	2310      	movs	r3, #16
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023f4:	2204      	movs	r2, #4
 80023f6:	eeb0 0a67 	vmov.f32	s0, s15
 80023fa:	2150      	movs	r1, #80	; 0x50
 80023fc:	208c      	movs	r0, #140	; 0x8c
 80023fe:	f7ff fb37 	bl	8001a70 <lcd_ShowFloatNum>
			lcd_ShowString(10, 100, "Current(mA):", RED, BLACK, 16, 0);
 8002402:	2300      	movs	r3, #0
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2310      	movs	r3, #16
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2300      	movs	r3, #0
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002412:	4a74      	ldr	r2, [pc, #464]	; (80025e4 <TestADC+0x2ac>)
 8002414:	2164      	movs	r1, #100	; 0x64
 8002416:	200a      	movs	r0, #10
 8002418:	f7ff fbb2 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 100, sensor_GetCurrent(), 4, RED, BLACK, 16);
 800241c:	f000 fa04 	bl	8002828 <sensor_GetCurrent>
 8002420:	eef0 7a40 	vmov.f32	s15, s0
 8002424:	2310      	movs	r3, #16
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002430:	2204      	movs	r2, #4
 8002432:	eeb0 0a67 	vmov.f32	s0, s15
 8002436:	2164      	movs	r1, #100	; 0x64
 8002438:	208c      	movs	r0, #140	; 0x8c
 800243a:	f7ff fb19 	bl	8001a70 <lcd_ShowFloatNum>


			lcd_ShowString(10, 120, "Power(mW):", RED, BLACK, 16, 0);
 800243e:	2300      	movs	r3, #0
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	2310      	movs	r3, #16
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800244e:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <TestADC+0x2b0>)
 8002450:	2178      	movs	r1, #120	; 0x78
 8002452:	200a      	movs	r0, #10
 8002454:	f7ff fb94 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 120, sensor_GetCurrent() * sensor_GetVoltage(), 4, RED, BLACK, 16);
 8002458:	f000 f9e6 	bl	8002828 <sensor_GetCurrent>
 800245c:	eeb0 8a40 	vmov.f32	s16, s0
 8002460:	f000 f9a6 	bl	80027b0 <sensor_GetVoltage>
 8002464:	eef0 7a40 	vmov.f32	s15, s0
 8002468:	ee68 7a27 	vmul.f32	s15, s16, s15
 800246c:	2310      	movs	r3, #16
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002478:	2204      	movs	r2, #4
 800247a:	eeb0 0a67 	vmov.f32	s0, s15
 800247e:	2178      	movs	r1, #120	; 0x78
 8002480:	208c      	movs	r0, #140	; 0x8c
 8002482:	f7ff faf5 	bl	8001a70 <lcd_ShowFloatNum>

			if (sensor_GetLight() <= 4095 * 0.5)
 8002486:	f000 f97b 	bl	8002780 <sensor_GetLight>
 800248a:	4603      	mov	r3, r0
 800248c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002490:	d21a      	bcs.n	80024c8 <TestADC+0x190>
			{
				lcd_ShowString(10, 140, "Light:", RED, BLACK, 16, 0);
 8002492:	2300      	movs	r3, #0
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	2310      	movs	r3, #16
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024a2:	4a52      	ldr	r2, [pc, #328]	; (80025ec <TestADC+0x2b4>)
 80024a4:	218c      	movs	r1, #140	; 0x8c
 80024a6:	200a      	movs	r0, #10
 80024a8:	f7ff fb6a 	bl	8001b80 <lcd_ShowString>
				lcd_ShowString(140, 140, "Strong", RED, BLACK, 16, 0);
 80024ac:	2300      	movs	r3, #0
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	2310      	movs	r3, #16
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024bc:	4a4c      	ldr	r2, [pc, #304]	; (80025f0 <TestADC+0x2b8>)
 80024be:	218c      	movs	r1, #140	; 0x8c
 80024c0:	208c      	movs	r0, #140	; 0x8c
 80024c2:	f7ff fb5d 	bl	8001b80 <lcd_ShowString>
 80024c6:	e019      	b.n	80024fc <TestADC+0x1c4>
			}
			else
			{
				lcd_ShowString(10, 140, "Light:", RED, BLACK, 16, 0);
 80024c8:	2300      	movs	r3, #0
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	2310      	movs	r3, #16
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024d8:	4a44      	ldr	r2, [pc, #272]	; (80025ec <TestADC+0x2b4>)
 80024da:	218c      	movs	r1, #140	; 0x8c
 80024dc:	200a      	movs	r0, #10
 80024de:	f7ff fb4f 	bl	8001b80 <lcd_ShowString>
				lcd_ShowString(140, 140, "Weak", RED, BLACK, 16, 0);
 80024e2:	2300      	movs	r3, #0
 80024e4:	9302      	str	r3, [sp, #8]
 80024e6:	2310      	movs	r3, #16
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <TestADC+0x2bc>)
 80024f4:	218c      	movs	r1, #140	; 0x8c
 80024f6:	208c      	movs	r0, #140	; 0x8c
 80024f8:	f7ff fb42 	bl	8001b80 <lcd_ShowString>
			}

			lcd_ShowString(10, 180, "Potentiometer:", RED, BLACK, 16, 0);
 80024fc:	2300      	movs	r3, #0
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	2310      	movs	r3, #16
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	2300      	movs	r3, #0
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800250c:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <TestADC+0x2c0>)
 800250e:	21b4      	movs	r1, #180	; 0xb4
 8002510:	200a      	movs	r0, #10
 8002512:	f7ff fb35 	bl	8001b80 <lcd_ShowString>
			lcd_ShowIntNum(140, 180, sensor_GetPotentiometer(), 4, RED, BLACK,
 8002516:	f000 f93f 	bl	8002798 <sensor_GetPotentiometer>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	2310      	movs	r3, #16
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	2300      	movs	r3, #0
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2304      	movs	r3, #4
 800252e:	21b4      	movs	r1, #180	; 0xb4
 8002530:	208c      	movs	r0, #140	; 0x8c
 8002532:	f7ff fa1f 	bl	8001974 <lcd_ShowIntNum>
					16);
			lcd_ShowString(10, 160, "Temperature(C):", RED, BLACK, 16, 0);
 8002536:	2300      	movs	r3, #0
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	2310      	movs	r3, #16
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2300      	movs	r3, #0
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002546:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <TestADC+0x2c4>)
 8002548:	21a0      	movs	r1, #160	; 0xa0
 800254a:	200a      	movs	r0, #10
 800254c:	f7ff fb18 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 160, sensor_GetTemperature(), 4, RED, BLACK,
 8002550:	f000 f9c6 	bl	80028e0 <sensor_GetTemperature>
 8002554:	eef0 7a40 	vmov.f32	s15, s0
 8002558:	2310      	movs	r3, #16
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002564:	2204      	movs	r2, #4
 8002566:	eeb0 0a67 	vmov.f32	s0, s15
 800256a:	21a0      	movs	r1, #160	; 0xa0
 800256c:	208c      	movs	r0, #140	; 0x8c
 800256e:	f7ff fa7f 	bl	8001a70 <lcd_ShowFloatNum>
					16);
			lcd_ShowString(10, 200, "Humidity(%):", RED, BLACK, 16, 0);
 8002572:	2300      	movs	r3, #0
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	2310      	movs	r3, #16
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2300      	movs	r3, #0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002582:	4a1f      	ldr	r2, [pc, #124]	; (8002600 <TestADC+0x2c8>)
 8002584:	21c8      	movs	r1, #200	; 0xc8
 8002586:	200a      	movs	r0, #10
 8002588:	f7ff fafa 	bl	8001b80 <lcd_ShowString>
			lcd_ShowIntNum(140, 200, sensor_GetPotentiometer()*100/4095, 4, RED, BLACK,
 800258c:	f000 f904 	bl	8002798 <sensor_GetPotentiometer>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	2364      	movs	r3, #100	; 0x64
 8002596:	fb03 f302 	mul.w	r3, r3, r2
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <TestADC+0x2cc>)
 800259c:	fb82 1203 	smull	r1, r2, r2, r3
 80025a0:	441a      	add	r2, r3
 80025a2:	12d2      	asrs	r2, r2, #11
 80025a4:	17db      	asrs	r3, r3, #31
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	2310      	movs	r3, #16
 80025ac:	9302      	str	r3, [sp, #8]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2304      	movs	r3, #4
 80025ba:	21c8      	movs	r1, #200	; 0xc8
 80025bc:	208c      	movs	r0, #140	; 0x8c
 80025be:	f7ff f9d9 	bl	8001974 <lcd_ShowIntNum>
					16);
		}
	}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	ecbd 8b02 	vpop	{d8}
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200000b8 	.word	0x200000b8
 80025d0:	66666667 	.word	0x66666667
 80025d4:	200000bc 	.word	0x200000bc
 80025d8:	08009190 	.word	0x08009190
 80025dc:	080091a8 	.word	0x080091a8
 80025e0:	080091c0 	.word	0x080091c0
 80025e4:	080091cc 	.word	0x080091cc
 80025e8:	080091dc 	.word	0x080091dc
 80025ec:	080091e8 	.word	0x080091e8
 80025f0:	080091f0 	.word	0x080091f0
 80025f4:	080091f8 	.word	0x080091f8
 80025f8:	08009200 	.word	0x08009200
 80025fc:	08009210 	.word	0x08009210
 8002600:	08009220 	.word	0x08009220
 8002604:	80080081 	.word	0x80080081

08002608 <TestBuzzer>:

	void TestBuzzer() {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
		if (IsButtonUp()) {
 800260c:	f000 f810 	bl	8002630 <IsButtonUp>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <TestBuzzer+0x14>
			buzzer_SetVolume(50);
 8002616:	2032      	movs	r0, #50	; 0x32
 8002618:	f7fe fd64 	bl	80010e4 <buzzer_SetVolume>
		}

		if (IsButtonDown()) {
 800261c:	f000 f824 	bl	8002668 <IsButtonDown>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <TestBuzzer+0x24>
			buzzer_SetVolume(0);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fd5c 	bl	80010e4 <buzzer_SetVolume>
		}
	}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <IsButtonUp>:

	unsigned char IsButtonUp()
	{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
	    if ((button_count[3] == 1) || (button_count[3] >= 10 && button_count[3]%4 == 0))
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <IsButtonUp+0x34>)
 8002636:	88db      	ldrh	r3, [r3, #6]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d00a      	beq.n	8002652 <IsButtonUp+0x22>
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <IsButtonUp+0x34>)
 800263e:	88db      	ldrh	r3, [r3, #6]
 8002640:	2b09      	cmp	r3, #9
 8002642:	d908      	bls.n	8002656 <IsButtonUp+0x26>
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <IsButtonUp+0x34>)
 8002646:	88db      	ldrh	r3, [r3, #6]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <IsButtonUp+0x26>
	        return 1;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <IsButtonUp+0x28>
	    else
	        return 0;
 8002656:	2300      	movs	r3, #0
	}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000180 	.word	0x20000180

08002668 <IsButtonDown>:

	unsigned char IsButtonDown()
	{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
	    if ((button_count[7] == 1) || (button_count[7] >= 10 && button_count[7]%4 == 0))
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <IsButtonDown+0x34>)
 800266e:	89db      	ldrh	r3, [r3, #14]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d00a      	beq.n	800268a <IsButtonDown+0x22>
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <IsButtonDown+0x34>)
 8002676:	89db      	ldrh	r3, [r3, #14]
 8002678:	2b09      	cmp	r3, #9
 800267a:	d908      	bls.n	800268e <IsButtonDown+0x26>
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <IsButtonDown+0x34>)
 800267e:	89db      	ldrh	r3, [r3, #14]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <IsButtonDown+0x26>
	        return 1;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <IsButtonDown+0x28>
	    else
	        return 0;
 800268e:	2300      	movs	r3, #0
	}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000180 	.word	0x20000180

080026a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <Error_Handler+0x8>
	...

080026ac <isRingBufferFull>:

int isRingBufferEmpty(RingBuffer *buffer) {
  return buffer->head == buffer->tail;
}

int isRingBufferFull(RingBuffer *buffer) {
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (buffer->tail + 1) % BUFFER_SIZE == buffer->head;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <isRingBufferFull+0x40>)
 80026bc:	fb83 2301 	smull	r2, r3, r3, r1
 80026c0:	109a      	asrs	r2, r3, #2
 80026c2:	17cb      	asrs	r3, r1, #31
 80026c4:	1ad2      	subs	r2, r2, r3
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	1aca      	subs	r2, r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	429a      	cmp	r2, r3
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	66666667 	.word	0x66666667

080026f0 <addToRingBuffer>:

void addToRingBuffer(RingBuffer *buffer, int data) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  if (isRingBufferFull(buffer)) {
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffd6 	bl	80026ac <isRingBufferFull>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <addToRingBuffer+0x1e>
    printf("Ring buffer is full!\n");
 8002706:	480e      	ldr	r0, [pc, #56]	; (8002740 <addToRingBuffer+0x50>)
 8002708:	f005 fd74 	bl	80081f4 <puts>
    return;
 800270c:	e015      	b.n	800273a <addToRingBuffer+0x4a>
  }

  buffer->data[buffer->tail] = data;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <addToRingBuffer+0x54>)
 8002722:	fb83 2301 	smull	r2, r3, r3, r1
 8002726:	109a      	asrs	r2, r3, #2
 8002728:	17cb      	asrs	r3, r1, #31
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	1aca      	subs	r2, r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	08009230 	.word	0x08009230
 8002744:	66666667 	.word	0x66666667

08002748 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 800274c:	2205      	movs	r2, #5
 800274e:	4903      	ldr	r1, [pc, #12]	; (800275c <sensor_init+0x14>)
 8002750:	4803      	ldr	r0, [pc, #12]	; (8002760 <sensor_init+0x18>)
 8002752:	f000 fd9f 	bl	8003294 <HAL_ADC_Start_DMA>
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000280 	.word	0x20000280
 8002760:	200000d8 	.word	0x200000d8

08002764 <sensor_Read>:

void sensor_Read(){
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002768:	2205      	movs	r2, #5
 800276a:	4903      	ldr	r1, [pc, #12]	; (8002778 <sensor_Read+0x14>)
 800276c:	4803      	ldr	r0, [pc, #12]	; (800277c <sensor_Read+0x18>)
 800276e:	f000 fd91 	bl	8003294 <HAL_ADC_Start_DMA>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000280 	.word	0x20000280
 800277c:	200000d8 	.word	0x200000d8

08002780 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <sensor_GetLight+0x14>)
 8002786:	889b      	ldrh	r3, [r3, #4]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000280 	.word	0x20000280

08002798 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <sensor_GetPotentiometer+0x14>)
 800279e:	88db      	ldrh	r3, [r3, #6]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000280 	.word	0x20000280

080027b0 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <sensor_GetVoltage+0x70>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c0:	ee17 0a90 	vmov	r0, s15
 80027c4:	f7fd feb8 	bl	8000538 <__aeabi_f2d>
 80027c8:	a311      	add	r3, pc, #68	; (adr r3, 8002810 <sensor_GetVoltage+0x60>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd ff0b 	bl	80005e8 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <sensor_GetVoltage+0x74>)
 80027e0:	f7fd ff02 	bl	80005e8 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	a30a      	add	r3, pc, #40	; (adr r3, 8002818 <sensor_GetVoltage+0x68>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f7fe f823 	bl	800083c <__aeabi_ddiv>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe f905 	bl	8000a0c <__aeabi_d2f>
 8002802:	4603      	mov	r3, r0
 8002804:	ee07 3a90 	vmov	s15, r3
}
 8002808:	eeb0 0a67 	vmov.f32	s0, s15
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	66666666 	.word	0x66666666
 8002814:	400a6666 	.word	0x400a6666
 8002818:	cccccccd 	.word	0xcccccccd
 800281c:	40b908ac 	.word	0x40b908ac
 8002820:	20000280 	.word	0x20000280
 8002824:	40280000 	.word	0x40280000

08002828 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <sensor_GetCurrent+0xa8>)
 800282e:	885b      	ldrh	r3, [r3, #2]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002838:	ee17 0a90 	vmov	r0, s15
 800283c:	f7fd fe7c 	bl	8000538 <__aeabi_f2d>
 8002840:	a31f      	add	r3, pc, #124	; (adr r3, 80028c0 <sensor_GetCurrent+0x98>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fd fecf 	bl	80005e8 <__aeabi_dmul>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <sensor_GetCurrent+0xac>)
 8002858:	f7fd fec6 	bl	80005e8 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	a318      	add	r3, pc, #96	; (adr r3, 80028c8 <sensor_GetCurrent+0xa0>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd ffe7 	bl	800083c <__aeabi_ddiv>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <sensor_GetCurrent+0xb0>)
 800287c:	f7fd fcfc 	bl	8000278 <__aeabi_dsub>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <sensor_GetCurrent+0xb4>)
 800288e:	f7fd feab 	bl	80005e8 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <sensor_GetCurrent+0xb0>)
 80028a0:	f7fd ffcc 	bl	800083c <__aeabi_ddiv>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f8ae 	bl	8000a0c <__aeabi_d2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	ee07 3a90 	vmov	s15, r3
}
 80028b6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	f3af 8000 	nop.w
 80028c0:	66666666 	.word	0x66666666
 80028c4:	400a6666 	.word	0x400a6666
 80028c8:	147ae148 	.word	0x147ae148
 80028cc:	40a4b2ee 	.word	0x40a4b2ee
 80028d0:	20000280 	.word	0x20000280
 80028d4:	408f4000 	.word	0x408f4000
 80028d8:	40040000 	.word	0x40040000
 80028dc:	40140000 	.word	0x40140000

080028e0 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <sensor_GetTemperature+0x30>)
 80028e6:	891b      	ldrh	r3, [r3, #8]
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002914 <sensor_GetTemperature+0x34>
 80028f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002918 <sensor_GetTemperature+0x38>
 80028fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002900:	eef0 7a66 	vmov.f32	s15, s13
}
 8002904:	eeb0 0a67 	vmov.f32	s0, s15
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	20000280 	.word	0x20000280
 8002914:	43a50000 	.word	0x43a50000
 8002918:	457ff000 	.word	0x457ff000

0800291c <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <timer_init+0x10>)
 8002922:	f003 fb43 	bl	8005fac <HAL_TIM_Base_Start_IT>
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000032c 	.word	0x2000032c

08002930 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <setTimer2+0x2c>)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <setTimer2+0x2c>)
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <setTimer2+0x30>)
 8002946:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <setTimer2+0x34>)
 800294a:	2200      	movs	r2, #0
 800294c:	801a      	strh	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	200000c4 	.word	0x200000c4
 8002960:	200000c2 	.word	0x200000c2
 8002964:	200000c0 	.word	0x200000c0

08002968 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d114      	bne.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(timer2_counter > 0){
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d010      	beq.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800298c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002998:	2201      	movs	r2, #1
 800299a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029a2:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
//		led7_Scan();
	}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	200000c2 	.word	0x200000c2
 80029b4:	200000c0 	.word	0x200000c0
 80029b8:	200000c4 	.word	0x200000c4

080029bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c2:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <MX_SPI1_Init+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a08:	220a      	movs	r2, #10
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a0e:	f002 fc91 	bl	8005334 <HAL_SPI_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a18:	f7ff fe42 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000028c 	.word	0x2000028c
 8002a24:	40013000 	.word	0x40013000

08002a28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_SPI_MspInit+0x84>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d12b      	bne.n	8002aa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002a82:	2338      	movs	r3, #56	; 0x38
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a92:	2305      	movs	r3, #5
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a9e:	f001 fcdb 	bl	8004458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40013000 	.word	0x40013000
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020400 	.word	0x40020400

08002ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_MspInit+0x4c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 fb16 	bl	8003184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <TIM2_IRQHandler+0x10>)
 8002b62:	f003 fbb5 	bl	80062d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000032c 	.word	0x2000032c

08002b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <USART1_IRQHandler+0x10>)
 8002b76:	f004 fb15 	bl	80071a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000408 	.word	0x20000408

08002b84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <DMA2_Stream0_IRQHandler+0x10>)
 8002b8a:	f001 f9fb 	bl	8003f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000120 	.word	0x20000120

08002b98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e00a      	b.n	8002bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002baa:	f3af 8000 	nop.w
 8002bae:	4601      	mov	r1, r0
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	60ba      	str	r2, [r7, #8]
 8002bb6:	b2ca      	uxtb	r2, r1
 8002bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	dbf0      	blt.n	8002baa <_read+0x12>
	}

return len;
 8002bc8:	687b      	ldr	r3, [r7, #4]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e009      	b.n	8002bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60ba      	str	r2, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf1      	blt.n	8002be4 <_write+0x12>
	}
	return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_close>:

int _close(int file)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
	return -1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c32:	605a      	str	r2, [r3, #4]
	return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <_isatty>:

int _isatty(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	return 1;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <_sbrk+0x5c>)
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <_sbrk+0x60>)
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <_sbrk+0x64>)
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <_sbrk+0x68>)
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d207      	bcs.n	8002cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca4:	f005 fa06 	bl	80080b4 <__errno>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	220c      	movs	r2, #12
 8002cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	e009      	b.n	8002cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <_sbrk+0x64>)
 8002cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20020000 	.word	0x20020000
 8002cd4:	00000400 	.word	0x00000400
 8002cd8:	200000c8 	.word	0x200000c8
 8002cdc:	20000460 	.word	0x20000460

08002ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d18:	463b      	mov	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d2a:	f240 3247 	movw	r2, #839	; 0x347
 8002d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d38:	2263      	movs	r2, #99	; 0x63
 8002d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d48:	4813      	ldr	r0, [pc, #76]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d4a:	f003 f8df 	bl	8005f0c <HAL_TIM_Base_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d54:	f7ff fca4 	bl	80026a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4619      	mov	r1, r3
 8002d64:	480c      	ldr	r0, [pc, #48]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d66:	f003 fc7d 	bl	8006664 <HAL_TIM_ConfigClockSource>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d70:	f7ff fc96 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d74:	2300      	movs	r3, #0
 8002d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4805      	ldr	r0, [pc, #20]	; (8002d98 <MX_TIM2_Init+0x94>)
 8002d82:	f004 f86f 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d8c:	f7ff fc88 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d90:	bf00      	nop
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000032c 	.word	0x2000032c

08002d9c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
 8002db0:	615a      	str	r2, [r3, #20]
 8002db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002db6:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <MX_TIM13_Init+0x98>)
 8002db8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002dbc:	f240 3247 	movw	r2, #839	; 0x347
 8002dc0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002dca:	2263      	movs	r2, #99	; 0x63
 8002dcc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002dda:	4815      	ldr	r0, [pc, #84]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002ddc:	f003 f896 	bl	8005f0c <HAL_TIM_Base_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002de6:	f7ff fc5b 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002dea:	4811      	ldr	r0, [pc, #68]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002dec:	f003 f94e 	bl	800608c <HAL_TIM_PWM_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002df6:	f7ff fc53 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dfa:	2360      	movs	r3, #96	; 0x60
 8002dfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4807      	ldr	r0, [pc, #28]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002e12:	f003 fb65 	bl	80064e0 <HAL_TIM_PWM_ConfigChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002e1c:	f7ff fc40 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e20:	4803      	ldr	r0, [pc, #12]	; (8002e30 <MX_TIM13_Init+0x94>)
 8002e22:	f000 f845 	bl	8002eb0 <HAL_TIM_MspPostInit>

}
 8002e26:	bf00      	nop
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200002e4 	.word	0x200002e4
 8002e34:	40001c00 	.word	0x40001c00

08002e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e48:	d116      	bne.n	8002e78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_TIM_Base_MspInit+0x70>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <HAL_TIM_Base_MspInit+0x70>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_TIM_Base_MspInit+0x70>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	201c      	movs	r0, #28
 8002e6c:	f000 febb 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e70:	201c      	movs	r0, #28
 8002e72:	f000 fed4 	bl	8003c1e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002e76:	e012      	b.n	8002e9e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_TIM_Base_MspInit+0x74>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10d      	bne.n	8002e9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_TIM_Base_MspInit+0x70>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_TIM_Base_MspInit+0x70>)
 8002e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_TIM_Base_MspInit+0x70>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40001c00 	.word	0x40001c00

08002eb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_TIM_MspPostInit+0x68>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d11e      	bne.n	8002f10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_TIM_MspPostInit+0x6c>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <HAL_TIM_MspPostInit+0x6c>)
 8002edc:	f043 0320 	orr.w	r3, r3, #32
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_TIM_MspPostInit+0x6c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f00:	2309      	movs	r3, #9
 8002f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <HAL_TIM_MspPostInit+0x70>)
 8002f0c:	f001 faa4 	bl	8004458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40001c00 	.word	0x40001c00
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40021400 	.word	0x40021400

08002f24 <uart_Rs232SendString>:

void uart_init_rs232() {
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
}

void uart_Rs232SendString(uint8_t *str) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*) msg, sprintf((void*) msg, "%s", str),
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4907      	ldr	r1, [pc, #28]	; (8002f4c <uart_Rs232SendString+0x28>)
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <uart_Rs232SendString+0x2c>)
 8002f32:	f005 f967 	bl	8008204 <siprintf>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	4904      	ldr	r1, [pc, #16]	; (8002f50 <uart_Rs232SendString+0x2c>)
 8002f3e:	4805      	ldr	r0, [pc, #20]	; (8002f54 <uart_Rs232SendString+0x30>)
 8002f40:	f004 f86d 	bl	800701e <HAL_UART_Transmit>
			10);
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	08009260 	.word	0x08009260
 8002f50:	20000374 	.word	0x20000374
 8002f54:	20000408 	.word	0x20000408

08002f58 <HAL_UART_RxCpltCallback>:
	uart_Rs232SendString((void*)".");
	sprintf((void*) msg, "%ld", num % 100);
	uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <HAL_UART_RxCpltCallback+0x30>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10a      	bne.n	8002f80 <HAL_UART_RxCpltCallback+0x28>
		// can be modified
//		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);


		// turn on the receice interrupt
		addToRingBuffer(&buffer, receive_buffer1);
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_UART_RxCpltCallback+0x34>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4807      	ldr	r0, [pc, #28]	; (8002f90 <HAL_UART_RxCpltCallback+0x38>)
 8002f72:	f7ff fbbd 	bl	80026f0 <addToRingBuffer>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f76:	2201      	movs	r2, #1
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <HAL_UART_RxCpltCallback+0x34>)
 8002f7a:	4806      	ldr	r0, [pc, #24]	; (8002f94 <HAL_UART_RxCpltCallback+0x3c>)
 8002f7c:	f004 f8e1 	bl	8007142 <HAL_UART_Receive_IT>
	}
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40011000 	.word	0x40011000
 8002f8c:	200000cc 	.word	0x200000cc
 8002f90:	200003d8 	.word	0x200003d8
 8002f94:	20000408 	.word	0x20000408

08002f98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <MX_USART1_UART_Init+0x50>)
 8002fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fd0:	f003 ffd8 	bl	8006f84 <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fda:	f7ff fb61 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000408 	.word	0x20000408
 8002fe8:	40011000 	.word	0x40011000

08002fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_UART_MspInit+0x94>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d134      	bne.n	8003078 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_UART_MspInit+0x98>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_UART_MspInit+0x98>)
 8003018:	f043 0310 	orr.w	r3, r3, #16
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_UART_MspInit+0x98>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_UART_MspInit+0x98>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a14      	ldr	r2, [pc, #80]	; (8003084 <HAL_UART_MspInit+0x98>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_UART_MspInit+0x98>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003046:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800304a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003054:	2303      	movs	r3, #3
 8003056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003058:	2307      	movs	r3, #7
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4619      	mov	r1, r3
 8003062:	4809      	ldr	r0, [pc, #36]	; (8003088 <HAL_UART_MspInit+0x9c>)
 8003064:	f001 f9f8 	bl	8004458 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003068:	2200      	movs	r2, #0
 800306a:	2100      	movs	r1, #0
 800306c:	2025      	movs	r0, #37	; 0x25
 800306e:	f000 fdba 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003072:	2025      	movs	r0, #37	; 0x25
 8003074:	f000 fdd3 	bl	8003c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003078:	bf00      	nop
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40011000 	.word	0x40011000
 8003084:	40023800 	.word	0x40023800
 8003088:	40020000 	.word	0x40020000

0800308c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800308c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003092:	490e      	ldr	r1, [pc, #56]	; (80030cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003094:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003098:	e002      	b.n	80030a0 <LoopCopyDataInit>

0800309a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800309c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309e:	3304      	adds	r3, #4

080030a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a4:	d3f9      	bcc.n	800309a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030a8:	4c0b      	ldr	r4, [pc, #44]	; (80030d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ac:	e001      	b.n	80030b2 <LoopFillZerobss>

080030ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b0:	3204      	adds	r2, #4

080030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b4:	d3fb      	bcc.n	80030ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030b6:	f7ff fe13 	bl	8002ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ba:	f005 f801 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030be:	f7ff f803 	bl	80020c8 <main>
  bx  lr    
 80030c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030cc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80030d0:	0800c2b8 	.word	0x0800c2b8
  ldr r2, =_sbss
 80030d4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80030d8:	20000460 	.word	0x20000460

080030dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <ADC_IRQHandler>
	...

080030e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_Init+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_Init+0x40>)
 80030ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_Init+0x40>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <HAL_Init+0x40>)
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_Init+0x40>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_Init+0x40>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003108:	2003      	movs	r0, #3
 800310a:	f000 fd61 	bl	8003bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800310e:	200f      	movs	r0, #15
 8003110:	f000 f808 	bl	8003124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003114:	f7ff fcd0 	bl	8002ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00

08003124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_InitTick+0x54>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_InitTick+0x58>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313a:	fbb3 f3f1 	udiv	r3, r3, r1
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fd79 	bl	8003c3a <HAL_SYSTICK_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00e      	b.n	8003170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d80a      	bhi.n	800316e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003158:	2200      	movs	r2, #0
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f000 fd41 	bl	8003be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <HAL_InitTick+0x5c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000001c 	.word	0x2000001c
 800317c:	20000024 	.word	0x20000024
 8003180:	20000020 	.word	0x20000020

08003184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_IncTick+0x20>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x24>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_IncTick+0x24>)
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000024 	.word	0x20000024
 80031a8:	2000044c 	.word	0x2000044c

080031ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return uwTick;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_GetTick+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000044c 	.word	0x2000044c

080031c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7ff ffee 	bl	80031ac <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d005      	beq.n	80031ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_Delay+0x44>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ea:	bf00      	nop
 80031ec:	f7ff ffde 	bl	80031ac <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d8f7      	bhi.n	80031ec <HAL_Delay+0x28>
  {
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000024 	.word	0x20000024

0800320c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e033      	b.n	800328a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fe44 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d118      	bne.n	800327c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003252:	f023 0302 	bic.w	r3, r3, #2
 8003256:	f043 0202 	orr.w	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa68 	bl	8003734 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
 800327a:	e001      	b.n	8003280 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_Start_DMA+0x1e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0e9      	b.n	8003486 <HAL_ADC_Start_DMA+0x1f2>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d018      	beq.n	80032fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032d8:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_ADC_Start_DMA+0x1fc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a6d      	ldr	r2, [pc, #436]	; (8003494 <HAL_ADC_Start_DMA+0x200>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9a      	lsrs	r2, r3, #18
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032ec:	e002      	b.n	80032f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f9      	bne.n	80032ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	d107      	bne.n	800331a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003318:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	f040 80a1 	bne.w	800346c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003354:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d106      	bne.n	8003378 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f023 0206 	bic.w	r2, r3, #6
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
 8003376:	e002      	b.n	800337e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_ADC_Start_DMA+0x204>)
 8003388:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4a43      	ldr	r2, [pc, #268]	; (800349c <HAL_ADC_Start_DMA+0x208>)
 8003390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	4a42      	ldr	r2, [pc, #264]	; (80034a0 <HAL_ADC_Start_DMA+0x20c>)
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	4a41      	ldr	r2, [pc, #260]	; (80034a4 <HAL_ADC_Start_DMA+0x210>)
 80033a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	334c      	adds	r3, #76	; 0x4c
 80033d6:	4619      	mov	r1, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f000 fce8 	bl	8003db0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d12a      	bne.n	8003442 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_ADC_Start_DMA+0x214>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d015      	beq.n	8003422 <HAL_ADC_Start_DMA+0x18e>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <HAL_ADC_Start_DMA+0x218>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d105      	bne.n	800340c <HAL_ADC_Start_DMA+0x178>
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_ADC_Start_DMA+0x204>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <HAL_ADC_Start_DMA+0x21c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d136      	bne.n	8003484 <HAL_ADC_Start_DMA+0x1f0>
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_ADC_Start_DMA+0x204>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d130      	bne.n	8003484 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d129      	bne.n	8003484 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e020      	b.n	8003484 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_ADC_Start_DMA+0x214>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d11b      	bne.n	8003484 <HAL_ADC_Start_DMA+0x1f0>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d114      	bne.n	8003484 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	e00b      	b.n	8003484 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f043 0210 	orr.w	r2, r3, #16
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000001c 	.word	0x2000001c
 8003494:	431bde83 	.word	0x431bde83
 8003498:	40012300 	.word	0x40012300
 800349c:	0800392d 	.word	0x0800392d
 80034a0:	080039e7 	.word	0x080039e7
 80034a4:	08003a03 	.word	0x08003a03
 80034a8:	40012000 	.word	0x40012000
 80034ac:	40012100 	.word	0x40012100
 80034b0:	40012200 	.word	0x40012200

080034b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1c>
 8003508:	2302      	movs	r3, #2
 800350a:	e105      	b.n	8003718 <HAL_ADC_ConfigChannel+0x228>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b09      	cmp	r3, #9
 800351a:	d925      	bls.n	8003568 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68d9      	ldr	r1, [r3, #12]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	3b1e      	subs	r3, #30
 8003532:	2207      	movs	r2, #7
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43da      	mvns	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	400a      	ands	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68d9      	ldr	r1, [r3, #12]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	4603      	mov	r3, r0
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4403      	add	r3, r0
 800355a:	3b1e      	subs	r3, #30
 800355c:	409a      	lsls	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	e022      	b.n	80035ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6919      	ldr	r1, [r3, #16]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	2207      	movs	r2, #7
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	400a      	ands	r2, r1
 800358a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6919      	ldr	r1, [r3, #16]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4403      	add	r3, r0
 80035a4:	409a      	lsls	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d824      	bhi.n	8003600 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	3b05      	subs	r3, #5
 80035c8:	221f      	movs	r2, #31
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	400a      	ands	r2, r1
 80035d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	3b05      	subs	r3, #5
 80035f2:	fa00 f203 	lsl.w	r2, r0, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34
 80035fe:	e04c      	b.n	800369a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d824      	bhi.n	8003652 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	3b23      	subs	r3, #35	; 0x23
 800361a:	221f      	movs	r2, #31
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43da      	mvns	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	400a      	ands	r2, r1
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	4618      	mov	r0, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	3b23      	subs	r3, #35	; 0x23
 8003644:	fa00 f203 	lsl.w	r2, r0, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	e023      	b.n	800369a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	3b41      	subs	r3, #65	; 0x41
 8003664:	221f      	movs	r2, #31
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43da      	mvns	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	400a      	ands	r2, r1
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4618      	mov	r0, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3b41      	subs	r3, #65	; 0x41
 800368e:	fa00 f203 	lsl.w	r2, r0, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_ADC_ConfigChannel+0x234>)
 800369c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_ADC_ConfigChannel+0x238>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d109      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1cc>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b12      	cmp	r3, #18
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_ADC_ConfigChannel+0x238>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d123      	bne.n	800370e <HAL_ADC_ConfigChannel+0x21e>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d003      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x1e6>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b11      	cmp	r3, #17
 80036d4:	d11b      	bne.n	800370e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d111      	bne.n	800370e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_ADC_ConfigChannel+0x23c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a10      	ldr	r2, [pc, #64]	; (8003730 <HAL_ADC_ConfigChannel+0x240>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	0c9a      	lsrs	r2, r3, #18
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003700:	e002      	b.n	8003708 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3b01      	subs	r3, #1
 8003706:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f9      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40012300 	.word	0x40012300
 8003728:	40012000 	.word	0x40012000
 800372c:	2000001c 	.word	0x2000001c
 8003730:	431bde83 	.word	0x431bde83

08003734 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800373c:	4b79      	ldr	r3, [pc, #484]	; (8003924 <ADC_Init+0x1f0>)
 800373e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	021a      	lsls	r2, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800378c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6899      	ldr	r1, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	4a58      	ldr	r2, [pc, #352]	; (8003928 <ADC_Init+0x1f4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6899      	ldr	r1, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	e00f      	b.n	8003832 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003830:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0202 	bic.w	r2, r2, #2
 8003840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6899      	ldr	r1, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7e1b      	ldrb	r3, [r3, #24]
 800384c:	005a      	lsls	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800386e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800387e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	3b01      	subs	r3, #1
 800388c:	035a      	lsls	r2, r3, #13
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e007      	b.n	80038a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	051a      	lsls	r2, r3, #20
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6899      	ldr	r1, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038ea:	025a      	lsls	r2, r3, #9
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6899      	ldr	r1, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	029a      	lsls	r2, r3, #10
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	40012300 	.word	0x40012300
 8003928:	0f000001 	.word	0x0f000001

0800392c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d13c      	bne.n	80039c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d12b      	bne.n	80039b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003964:	2b00      	cmp	r3, #0
 8003966:	d127      	bne.n	80039b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003972:	2b00      	cmp	r3, #0
 8003974:	d006      	beq.n	8003984 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003980:	2b00      	cmp	r3, #0
 8003982:	d119      	bne.n	80039b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0220 	bic.w	r2, r2, #32
 8003992:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff fd7b 	bl	80034b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039be:	e00e      	b.n	80039de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff fd85 	bl	80034dc <HAL_ADC_ErrorCallback>
}
 80039d2:	e004      	b.n	80039de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff fd67 	bl	80034c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff fd5a 	bl	80034dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a62:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	60d3      	str	r3, [r2, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <__NVIC_GetPriorityGrouping+0x18>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	f003 0307 	and.w	r3, r3, #7
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	db0b      	blt.n	8003abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	4907      	ldr	r1, [pc, #28]	; (8003acc <__NVIC_EnableIRQ+0x38>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db0a      	blt.n	8003afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	490c      	ldr	r1, [pc, #48]	; (8003b1c <__NVIC_SetPriority+0x4c>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af8:	e00a      	b.n	8003b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4908      	ldr	r1, [pc, #32]	; (8003b20 <__NVIC_SetPriority+0x50>)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3b04      	subs	r3, #4
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	761a      	strb	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f1c3 0307 	rsb	r3, r3, #7
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	bf28      	it	cs
 8003b42:	2304      	movcs	r3, #4
 8003b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <NVIC_EncodePriority+0x30>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3b03      	subs	r3, #3
 8003b52:	e000      	b.n	8003b56 <NVIC_EncodePriority+0x32>
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	401a      	ands	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	4313      	orrs	r3, r2
         );
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	; 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b9c:	d301      	bcc.n	8003ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00f      	b.n	8003bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <SysTick_Config+0x40>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003baa:	210f      	movs	r1, #15
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	f7ff ff8e 	bl	8003ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <SysTick_Config+0x40>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <SysTick_Config+0x40>)
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	e000e010 	.word	0xe000e010

08003bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff29 	bl	8003a30 <__NVIC_SetPriorityGrouping>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf8:	f7ff ff3e 	bl	8003a78 <__NVIC_GetPriorityGrouping>
 8003bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	6978      	ldr	r0, [r7, #20]
 8003c04:	f7ff ff8e 	bl	8003b24 <NVIC_EncodePriority>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff5d 	bl	8003ad0 <__NVIC_SetPriority>
}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	4603      	mov	r3, r0
 8003c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff31 	bl	8003a94 <__NVIC_EnableIRQ>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ffa2 	bl	8003b8c <SysTick_Config>
 8003c48:	4603      	mov	r3, r0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c60:	f7ff faa4 	bl	80031ac <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e099      	b.n	8003da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c90:	e00f      	b.n	8003cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c92:	f7ff fa8b 	bl	80031ac <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d908      	bls.n	8003cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2203      	movs	r2, #3
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e078      	b.n	8003da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e8      	bne.n	8003c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4b38      	ldr	r3, [pc, #224]	; (8003dac <HAL_DMA_Init+0x158>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d107      	bne.n	8003d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	4313      	orrs	r3, r2
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0307 	bic.w	r3, r3, #7
 8003d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d117      	bne.n	8003d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fb01 	bl	8004360 <DMA_CheckFifoParam>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d72:	2301      	movs	r3, #1
 8003d74:	e016      	b.n	8003da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fab8 	bl	80042f4 <DMA_CalcBaseAndBitshift>
 8003d84:	4603      	mov	r3, r0
 8003d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	223f      	movs	r2, #63	; 0x3f
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	f010803f 	.word	0xf010803f

08003db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMA_Start_IT+0x26>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e040      	b.n	8003e58 <HAL_DMA_Start_IT+0xa8>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d12f      	bne.n	8003e4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fa4a 	bl	8004298 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	223f      	movs	r2, #63	; 0x3f
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0216 	orr.w	r2, r2, #22
 8003e1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0208 	orr.w	r2, r2, #8
 8003e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e005      	b.n	8003e56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e6e:	f7ff f99d 	bl	80031ac <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d008      	beq.n	8003e92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e052      	b.n	8003f38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0216 	bic.w	r2, r2, #22
 8003ea0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_DMA_Abort+0x62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0208 	bic.w	r2, r2, #8
 8003ed0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee2:	e013      	b.n	8003f0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ee4:	f7ff f962 	bl	80031ac <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d90c      	bls.n	8003f0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2203      	movs	r2, #3
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e015      	b.n	8003f38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e4      	bne.n	8003ee4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	223f      	movs	r2, #63	; 0x3f
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00c      	b.n	8003f78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2205      	movs	r2, #5
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f90:	4b92      	ldr	r3, [pc, #584]	; (80041dc <HAL_DMA_IRQHandler+0x258>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a92      	ldr	r2, [pc, #584]	; (80041e0 <HAL_DMA_IRQHandler+0x25c>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	0a9b      	lsrs	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2208      	movs	r2, #8
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	2208      	movs	r2, #8
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	f043 0201 	orr.w	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	2201      	movs	r2, #1
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f043 0202 	orr.w	r2, r3, #2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	2204      	movs	r2, #4
 800402c:	409a      	lsls	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004048:	2204      	movs	r2, #4
 800404a:	409a      	lsls	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f043 0204 	orr.w	r2, r3, #4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	2210      	movs	r2, #16
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d043      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03c      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	2210      	movs	r2, #16
 8004080:	409a      	lsls	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d024      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
 80040b2:	e01f      	b.n	80040f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
 80040c4:	e016      	b.n	80040f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0208 	bic.w	r2, r2, #8
 80040e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2220      	movs	r2, #32
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 808e 	beq.w	8004222 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8086 	beq.w	8004222 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411a:	2220      	movs	r2, #32
 800411c:	409a      	lsls	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b05      	cmp	r3, #5
 800412c:	d136      	bne.n	800419c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0216 	bic.w	r2, r2, #22
 800413c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800414c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <HAL_DMA_IRQHandler+0x1da>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0208 	bic.w	r2, r2, #8
 800416c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	223f      	movs	r2, #63	; 0x3f
 8004174:	409a      	lsls	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d07d      	beq.n	800428e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
        }
        return;
 800419a:	e078      	b.n	800428e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01c      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d030      	beq.n	8004222 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
 80041c8:	e02b      	b.n	8004222 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
 80041da:	e022      	b.n	8004222 <HAL_DMA_IRQHandler+0x29e>
 80041dc:	2000001c 	.word	0x2000001c
 80041e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0210 	bic.w	r2, r2, #16
 8004200:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	2b00      	cmp	r3, #0
 8004228:	d032      	beq.n	8004290 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d022      	beq.n	800427c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3301      	adds	r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	429a      	cmp	r2, r3
 8004258:	d307      	bcc.n	800426a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f2      	bne.n	800424e <HAL_DMA_IRQHandler+0x2ca>
 8004268:	e000      	b.n	800426c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800426a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e000      	b.n	8004290 <HAL_DMA_IRQHandler+0x30c>
        return;
 800428e:	bf00      	nop
    }
  }
}
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop

08004298 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d108      	bne.n	80042d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042d6:	e007      	b.n	80042e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3b10      	subs	r3, #16
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <DMA_CalcBaseAndBitshift+0x64>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800430e:	4a13      	ldr	r2, [pc, #76]	; (800435c <DMA_CalcBaseAndBitshift+0x68>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d909      	bls.n	8004336 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	1d1a      	adds	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	659a      	str	r2, [r3, #88]	; 0x58
 8004334:	e007      	b.n	8004346 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	aaaaaaab 	.word	0xaaaaaaab
 800435c:	0800c208 	.word	0x0800c208

08004360 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11f      	bne.n	80043ba <DMA_CheckFifoParam+0x5a>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b03      	cmp	r3, #3
 800437e:	d856      	bhi.n	800442e <DMA_CheckFifoParam+0xce>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <DMA_CheckFifoParam+0x28>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	08004399 	.word	0x08004399
 800438c:	080043ab 	.word	0x080043ab
 8004390:	08004399 	.word	0x08004399
 8004394:	0800442f 	.word	0x0800442f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d046      	beq.n	8004432 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a8:	e043      	b.n	8004432 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043b2:	d140      	bne.n	8004436 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b8:	e03d      	b.n	8004436 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c2:	d121      	bne.n	8004408 <DMA_CheckFifoParam+0xa8>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d837      	bhi.n	800443a <DMA_CheckFifoParam+0xda>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <DMA_CheckFifoParam+0x70>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	080043e1 	.word	0x080043e1
 80043d4:	080043e7 	.word	0x080043e7
 80043d8:	080043e1 	.word	0x080043e1
 80043dc:	080043f9 	.word	0x080043f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      break;
 80043e4:	e030      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d025      	beq.n	800443e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f6:	e022      	b.n	800443e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004400:	d11f      	bne.n	8004442 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004406:	e01c      	b.n	8004442 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d903      	bls.n	8004416 <DMA_CheckFifoParam+0xb6>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d003      	beq.n	800441c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004414:	e018      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
      break;
 800441a:	e015      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00e      	beq.n	8004446 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
      break;
 800442c:	e00b      	b.n	8004446 <DMA_CheckFifoParam+0xe6>
      break;
 800442e:	bf00      	nop
 8004430:	e00a      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      break;
 8004432:	bf00      	nop
 8004434:	e008      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      break;
 8004436:	bf00      	nop
 8004438:	e006      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      break;
 800443a:	bf00      	nop
 800443c:	e004      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      break;
 800443e:	bf00      	nop
 8004440:	e002      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      break;   
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <DMA_CheckFifoParam+0xe8>
      break;
 8004446:	bf00      	nop
    }
  } 
  
  return status; 
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop

08004458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e16b      	b.n	800474c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004474:	2201      	movs	r2, #1
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	429a      	cmp	r2, r3
 800448e:	f040 815a 	bne.w	8004746 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d005      	beq.n	80044aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d130      	bne.n	800450c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	2203      	movs	r2, #3
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044e0:	2201      	movs	r2, #1
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 0201 	and.w	r2, r3, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b03      	cmp	r3, #3
 8004516:	d017      	beq.n	8004548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d123      	bne.n	800459c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	08da      	lsrs	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3208      	adds	r2, #8
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	220f      	movs	r2, #15
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4013      	ands	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	08da      	lsrs	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3208      	adds	r2, #8
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80b4 	beq.w	8004746 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	4b60      	ldr	r3, [pc, #384]	; (8004764 <HAL_GPIO_Init+0x30c>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	4a5f      	ldr	r2, [pc, #380]	; (8004764 <HAL_GPIO_Init+0x30c>)
 80045e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ec:	6453      	str	r3, [r2, #68]	; 0x44
 80045ee:	4b5d      	ldr	r3, [pc, #372]	; (8004764 <HAL_GPIO_Init+0x30c>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045fa:	4a5b      	ldr	r2, [pc, #364]	; (8004768 <HAL_GPIO_Init+0x310>)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	3302      	adds	r3, #2
 8004602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	220f      	movs	r2, #15
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_GPIO_Init+0x314>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02b      	beq.n	800467e <HAL_GPIO_Init+0x226>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a51      	ldr	r2, [pc, #324]	; (8004770 <HAL_GPIO_Init+0x318>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d025      	beq.n	800467a <HAL_GPIO_Init+0x222>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a50      	ldr	r2, [pc, #320]	; (8004774 <HAL_GPIO_Init+0x31c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01f      	beq.n	8004676 <HAL_GPIO_Init+0x21e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a4f      	ldr	r2, [pc, #316]	; (8004778 <HAL_GPIO_Init+0x320>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d019      	beq.n	8004672 <HAL_GPIO_Init+0x21a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a4e      	ldr	r2, [pc, #312]	; (800477c <HAL_GPIO_Init+0x324>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_GPIO_Init+0x216>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a4d      	ldr	r2, [pc, #308]	; (8004780 <HAL_GPIO_Init+0x328>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00d      	beq.n	800466a <HAL_GPIO_Init+0x212>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4c      	ldr	r2, [pc, #304]	; (8004784 <HAL_GPIO_Init+0x32c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <HAL_GPIO_Init+0x20e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <HAL_GPIO_Init+0x330>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <HAL_GPIO_Init+0x20a>
 800465e:	2307      	movs	r3, #7
 8004660:	e00e      	b.n	8004680 <HAL_GPIO_Init+0x228>
 8004662:	2308      	movs	r3, #8
 8004664:	e00c      	b.n	8004680 <HAL_GPIO_Init+0x228>
 8004666:	2306      	movs	r3, #6
 8004668:	e00a      	b.n	8004680 <HAL_GPIO_Init+0x228>
 800466a:	2305      	movs	r3, #5
 800466c:	e008      	b.n	8004680 <HAL_GPIO_Init+0x228>
 800466e:	2304      	movs	r3, #4
 8004670:	e006      	b.n	8004680 <HAL_GPIO_Init+0x228>
 8004672:	2303      	movs	r3, #3
 8004674:	e004      	b.n	8004680 <HAL_GPIO_Init+0x228>
 8004676:	2302      	movs	r3, #2
 8004678:	e002      	b.n	8004680 <HAL_GPIO_Init+0x228>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_GPIO_Init+0x228>
 800467e:	2300      	movs	r3, #0
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	f002 0203 	and.w	r2, r2, #3
 8004686:	0092      	lsls	r2, r2, #2
 8004688:	4093      	lsls	r3, r2
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004690:	4935      	ldr	r1, [pc, #212]	; (8004768 <HAL_GPIO_Init+0x310>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	3302      	adds	r3, #2
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800469e:	4b3b      	ldr	r3, [pc, #236]	; (800478c <HAL_GPIO_Init+0x334>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046c2:	4a32      	ldr	r2, [pc, #200]	; (800478c <HAL_GPIO_Init+0x334>)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046c8:	4b30      	ldr	r3, [pc, #192]	; (800478c <HAL_GPIO_Init+0x334>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ec:	4a27      	ldr	r2, [pc, #156]	; (800478c <HAL_GPIO_Init+0x334>)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <HAL_GPIO_Init+0x334>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004716:	4a1d      	ldr	r2, [pc, #116]	; (800478c <HAL_GPIO_Init+0x334>)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800471c:	4b1b      	ldr	r3, [pc, #108]	; (800478c <HAL_GPIO_Init+0x334>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <HAL_GPIO_Init+0x334>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b0f      	cmp	r3, #15
 8004750:	f67f ae90 	bls.w	8004474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	3724      	adds	r7, #36	; 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800
 8004768:	40013800 	.word	0x40013800
 800476c:	40020000 	.word	0x40020000
 8004770:	40020400 	.word	0x40020400
 8004774:	40020800 	.word	0x40020800
 8004778:	40020c00 	.word	0x40020c00
 800477c:	40021000 	.word	0x40021000
 8004780:	40021400 	.word	0x40021400
 8004784:	40021800 	.word	0x40021800
 8004788:	40021c00 	.word	0x40021c00
 800478c:	40013c00 	.word	0x40013c00

08004790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
 800479c:	4613      	mov	r3, r2
 800479e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a0:	787b      	ldrb	r3, [r7, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047ac:	e003      	b.n	80047b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	041a      	lsls	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	619a      	str	r2, [r3, #24]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e12b      	b.n	8004a2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc fec6 	bl	800157c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	; 0x24
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004828:	f000 fd5c 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 800482c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4a81      	ldr	r2, [pc, #516]	; (8004a38 <HAL_I2C_Init+0x274>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d807      	bhi.n	8004848 <HAL_I2C_Init+0x84>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a80      	ldr	r2, [pc, #512]	; (8004a3c <HAL_I2C_Init+0x278>)
 800483c:	4293      	cmp	r3, r2
 800483e:	bf94      	ite	ls
 8004840:	2301      	movls	r3, #1
 8004842:	2300      	movhi	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e006      	b.n	8004856 <HAL_I2C_Init+0x92>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4a7d      	ldr	r2, [pc, #500]	; (8004a40 <HAL_I2C_Init+0x27c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	bf94      	ite	ls
 8004850:	2301      	movls	r3, #1
 8004852:	2300      	movhi	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e0e7      	b.n	8004a2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a78      	ldr	r2, [pc, #480]	; (8004a44 <HAL_I2C_Init+0x280>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	0c9b      	lsrs	r3, r3, #18
 8004868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a6a      	ldr	r2, [pc, #424]	; (8004a38 <HAL_I2C_Init+0x274>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d802      	bhi.n	8004898 <HAL_I2C_Init+0xd4>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	3301      	adds	r3, #1
 8004896:	e009      	b.n	80048ac <HAL_I2C_Init+0xe8>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	4a69      	ldr	r2, [pc, #420]	; (8004a48 <HAL_I2C_Init+0x284>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	099b      	lsrs	r3, r3, #6
 80048aa:	3301      	adds	r3, #1
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	495c      	ldr	r1, [pc, #368]	; (8004a38 <HAL_I2C_Init+0x274>)
 80048c8:	428b      	cmp	r3, r1
 80048ca:	d819      	bhi.n	8004900 <HAL_I2C_Init+0x13c>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1e59      	subs	r1, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048e0:	400b      	ands	r3, r1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_I2C_Init+0x138>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1e59      	subs	r1, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fa:	e051      	b.n	80049a0 <HAL_I2C_Init+0x1dc>
 80048fc:	2304      	movs	r3, #4
 80048fe:	e04f      	b.n	80049a0 <HAL_I2C_Init+0x1dc>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d111      	bne.n	800492c <HAL_I2C_Init+0x168>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1e58      	subs	r0, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	440b      	add	r3, r1
 8004916:	fbb0 f3f3 	udiv	r3, r0, r3
 800491a:	3301      	adds	r3, #1
 800491c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e012      	b.n	8004952 <HAL_I2C_Init+0x18e>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1e58      	subs	r0, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	0099      	lsls	r1, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004942:	3301      	adds	r3, #1
 8004944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_I2C_Init+0x196>
 8004956:	2301      	movs	r3, #1
 8004958:	e022      	b.n	80049a0 <HAL_I2C_Init+0x1dc>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10e      	bne.n	8004980 <HAL_I2C_Init+0x1bc>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1e58      	subs	r0, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6859      	ldr	r1, [r3, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	440b      	add	r3, r1
 8004970:	fbb0 f3f3 	udiv	r3, r0, r3
 8004974:	3301      	adds	r3, #1
 8004976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497e:	e00f      	b.n	80049a0 <HAL_I2C_Init+0x1dc>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1e58      	subs	r0, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	0099      	lsls	r1, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	fbb0 f3f3 	udiv	r3, r0, r3
 8004996:	3301      	adds	r3, #1
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	6809      	ldr	r1, [r1, #0]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6911      	ldr	r1, [r2, #16]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68d2      	ldr	r2, [r2, #12]
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	000186a0 	.word	0x000186a0
 8004a3c:	001e847f 	.word	0x001e847f
 8004a40:	003d08ff 	.word	0x003d08ff
 8004a44:	431bde83 	.word	0x431bde83
 8004a48:	10624dd3 	.word	0x10624dd3

08004a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e264      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d075      	beq.n	8004b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a6a:	4ba3      	ldr	r3, [pc, #652]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d00c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a76:	4ba0      	ldr	r3, [pc, #640]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d112      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a82:	4b9d      	ldr	r3, [pc, #628]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	4b99      	ldr	r3, [pc, #612]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05b      	beq.n	8004b54 <HAL_RCC_OscConfig+0x108>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d157      	bne.n	8004b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e23f      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x74>
 8004ab2:	4b91      	ldr	r3, [pc, #580]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a90      	ldr	r2, [pc, #576]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e01d      	b.n	8004afc <HAL_RCC_OscConfig+0xb0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x98>
 8004aca:	4b8b      	ldr	r3, [pc, #556]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a8a      	ldr	r2, [pc, #552]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a87      	ldr	r2, [pc, #540]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e00b      	b.n	8004afc <HAL_RCC_OscConfig+0xb0>
 8004ae4:	4b84      	ldr	r3, [pc, #528]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a83      	ldr	r2, [pc, #524]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b81      	ldr	r3, [pc, #516]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a80      	ldr	r2, [pc, #512]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d013      	beq.n	8004b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fe fb52 	bl	80031ac <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fe fb4e 	bl	80031ac <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e204      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	4b76      	ldr	r3, [pc, #472]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0xc0>
 8004b2a:	e014      	b.n	8004b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fb3e 	bl	80031ac <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fe fb3a 	bl	80031ac <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e1f0      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b46:	4b6c      	ldr	r3, [pc, #432]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0xe8>
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d063      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b62:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6e:	4b62      	ldr	r3, [pc, #392]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d11c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d116      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b86:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_RCC_OscConfig+0x152>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d001      	beq.n	8004b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e1c4      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b56      	ldr	r3, [pc, #344]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4952      	ldr	r1, [pc, #328]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb2:	e03a      	b.n	8004c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d020      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bbc:	4b4f      	ldr	r3, [pc, #316]	; (8004cfc <HAL_RCC_OscConfig+0x2b0>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fe faf3 	bl	80031ac <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bca:	f7fe faef 	bl	80031ac <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1a5      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bdc:	4b46      	ldr	r3, [pc, #280]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4940      	ldr	r1, [pc, #256]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]
 8004bfc:	e015      	b.n	8004c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfe:	4b3f      	ldr	r3, [pc, #252]	; (8004cfc <HAL_RCC_OscConfig+0x2b0>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fe fad2 	bl	80031ac <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0c:	f7fe face 	bl	80031ac <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e184      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d030      	beq.n	8004c98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3e:	4b30      	ldr	r3, [pc, #192]	; (8004d00 <HAL_RCC_OscConfig+0x2b4>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fe fab2 	bl	80031ac <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4c:	f7fe faae 	bl	80031ac <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e164      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x200>
 8004c6a:	e015      	b.n	8004c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6c:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <HAL_RCC_OscConfig+0x2b4>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c72:	f7fe fa9b 	bl	80031ac <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7a:	f7fe fa97 	bl	80031ac <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e14d      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a0 	beq.w	8004de6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004caa:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCC_OscConfig+0x2b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d121      	bne.n	8004d26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_RCC_OscConfig+0x2b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <HAL_RCC_OscConfig+0x2b8>)
 8004ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cee:	f7fe fa5d 	bl	80031ac <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf4:	e011      	b.n	8004d1a <HAL_RCC_OscConfig+0x2ce>
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	42470000 	.word	0x42470000
 8004d00:	42470e80 	.word	0x42470e80
 8004d04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fe fa50 	bl	80031ac <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e106      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1a:	4b85      	ldr	r3, [pc, #532]	; (8004f30 <HAL_RCC_OscConfig+0x4e4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d106      	bne.n	8004d3c <HAL_RCC_OscConfig+0x2f0>
 8004d2e:	4b81      	ldr	r3, [pc, #516]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3a:	e01c      	b.n	8004d76 <HAL_RCC_OscConfig+0x32a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d10c      	bne.n	8004d5e <HAL_RCC_OscConfig+0x312>
 8004d44:	4b7b      	ldr	r3, [pc, #492]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	4a7a      	ldr	r2, [pc, #488]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d4a:	f043 0304 	orr.w	r3, r3, #4
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d50:	4b78      	ldr	r3, [pc, #480]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	4a77      	ldr	r2, [pc, #476]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5c:	e00b      	b.n	8004d76 <HAL_RCC_OscConfig+0x32a>
 8004d5e:	4b75      	ldr	r3, [pc, #468]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a74      	ldr	r2, [pc, #464]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6a:	4b72      	ldr	r3, [pc, #456]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	4a71      	ldr	r2, [pc, #452]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d70:	f023 0304 	bic.w	r3, r3, #4
 8004d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d015      	beq.n	8004daa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7e:	f7fe fa15 	bl	80031ac <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	e00a      	b.n	8004d9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fe fa11 	bl	80031ac <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e0c5      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9c:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ee      	beq.n	8004d86 <HAL_RCC_OscConfig+0x33a>
 8004da8:	e014      	b.n	8004dd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004daa:	f7fe f9ff 	bl	80031ac <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fe f9fb 	bl	80031ac <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e0af      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc8:	4b5a      	ldr	r3, [pc, #360]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ee      	bne.n	8004db2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d105      	bne.n	8004de6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dda:	4b56      	ldr	r3, [pc, #344]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a55      	ldr	r2, [pc, #340]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 809b 	beq.w	8004f26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d05c      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d141      	bne.n	8004e88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e04:	4b4c      	ldr	r3, [pc, #304]	; (8004f38 <HAL_RCC_OscConfig+0x4ec>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0a:	f7fe f9cf 	bl	80031ac <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fe f9cb 	bl	80031ac <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e081      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e24:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	019b      	lsls	r3, r3, #6
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	4937      	ldr	r1, [pc, #220]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCC_OscConfig+0x4ec>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fe f9a4 	bl	80031ac <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fe f9a0 	bl	80031ac <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e056      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7a:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x41c>
 8004e86:	e04e      	b.n	8004f26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e88:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_OscConfig+0x4ec>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fe f98d 	bl	80031ac <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fe f989 	bl	80031ac <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e03f      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <HAL_RCC_OscConfig+0x44a>
 8004eb4:	e037      	b.n	8004f26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e032      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <HAL_RCC_OscConfig+0x4e8>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d028      	beq.n	8004f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d121      	bne.n	8004f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d11a      	bne.n	8004f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ef8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d111      	bne.n	8004f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d107      	bne.n	8004f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d001      	beq.n	8004f26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40007000 	.word	0x40007000
 8004f34:	40023800 	.word	0x40023800
 8004f38:	42470060 	.word	0x42470060

08004f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0cc      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f50:	4b68      	ldr	r3, [pc, #416]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d90c      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b65      	ldr	r3, [pc, #404]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b63      	ldr	r3, [pc, #396]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0b8      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa8:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a52      	ldr	r2, [pc, #328]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb4:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	494d      	ldr	r1, [pc, #308]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d119      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e07f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffa:	4b3f      	ldr	r3, [pc, #252]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e06f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500a:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e067      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501a:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f023 0203 	bic.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4934      	ldr	r1, [pc, #208]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800502c:	f7fe f8be 	bl	80031ac <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005032:	e00a      	b.n	800504a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005034:	f7fe f8ba 	bl	80031ac <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e04f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 020c 	and.w	r2, r3, #12
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	429a      	cmp	r2, r3
 800505a:	d1eb      	bne.n	8005034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800505c:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d20c      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e032      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4916      	ldr	r1, [pc, #88]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	490e      	ldr	r1, [pc, #56]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050c2:	f000 f821 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	490a      	ldr	r1, [pc, #40]	; (80050fc <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	5ccb      	ldrb	r3, [r1, r3]
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_RCC_ClockConfig+0x1c8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe f81e 	bl	8003124 <HAL_InitTick>

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023c00 	.word	0x40023c00
 80050f8:	40023800 	.word	0x40023800
 80050fc:	0800c1f0 	.word	0x0800c1f0
 8005100:	2000001c 	.word	0x2000001c
 8005104:	20000020 	.word	0x20000020

08005108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	2300      	movs	r3, #0
 800511a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005120:	4b67      	ldr	r3, [pc, #412]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d00d      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x40>
 800512c:	2b08      	cmp	r3, #8
 800512e:	f200 80bd 	bhi.w	80052ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x34>
 8005136:	2b04      	cmp	r3, #4
 8005138:	d003      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0x3a>
 800513a:	e0b7      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800513c:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800513e:	60bb      	str	r3, [r7, #8]
       break;
 8005140:	e0b7      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005142:	4b61      	ldr	r3, [pc, #388]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005144:	60bb      	str	r3, [r7, #8]
      break;
 8005146:	e0b4      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005148:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005150:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005152:	4b5b      	ldr	r3, [pc, #364]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d04d      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515e:	4b58      	ldr	r3, [pc, #352]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	ea02 0800 	and.w	r8, r2, r0
 8005176:	ea03 0901 	and.w	r9, r3, r1
 800517a:	4640      	mov	r0, r8
 800517c:	4649      	mov	r1, r9
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	014b      	lsls	r3, r1, #5
 8005188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800518c:	0142      	lsls	r2, r0, #5
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	ebb0 0008 	subs.w	r0, r0, r8
 8005196:	eb61 0109 	sbc.w	r1, r1, r9
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	018b      	lsls	r3, r1, #6
 80051a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051a8:	0182      	lsls	r2, r0, #6
 80051aa:	1a12      	subs	r2, r2, r0
 80051ac:	eb63 0301 	sbc.w	r3, r3, r1
 80051b0:	f04f 0000 	mov.w	r0, #0
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	00d9      	lsls	r1, r3, #3
 80051ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051be:	00d0      	lsls	r0, r2, #3
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	eb12 0208 	adds.w	r2, r2, r8
 80051c8:	eb43 0309 	adc.w	r3, r3, r9
 80051cc:	f04f 0000 	mov.w	r0, #0
 80051d0:	f04f 0100 	mov.w	r1, #0
 80051d4:	0259      	lsls	r1, r3, #9
 80051d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051da:	0250      	lsls	r0, r2, #9
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	f7fb fc5e 	bl	8000aac <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4613      	mov	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e04a      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	099b      	lsrs	r3, r3, #6
 8005200:	461a      	mov	r2, r3
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	f240 10ff 	movw	r0, #511	; 0x1ff
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	ea02 0400 	and.w	r4, r2, r0
 8005212:	ea03 0501 	and.w	r5, r3, r1
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	014b      	lsls	r3, r1, #5
 8005224:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005228:	0142      	lsls	r2, r0, #5
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	1b00      	subs	r0, r0, r4
 8005230:	eb61 0105 	sbc.w	r1, r1, r5
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	018b      	lsls	r3, r1, #6
 800523e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005242:	0182      	lsls	r2, r0, #6
 8005244:	1a12      	subs	r2, r2, r0
 8005246:	eb63 0301 	sbc.w	r3, r3, r1
 800524a:	f04f 0000 	mov.w	r0, #0
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	00d9      	lsls	r1, r3, #3
 8005254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005258:	00d0      	lsls	r0, r2, #3
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	1912      	adds	r2, r2, r4
 8005260:	eb45 0303 	adc.w	r3, r5, r3
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	0299      	lsls	r1, r3, #10
 800526e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005272:	0290      	lsls	r0, r2, #10
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	461a      	mov	r2, r3
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f7fb fc12 	bl	8000aac <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4613      	mov	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	60bb      	str	r3, [r7, #8]
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052ae:	60bb      	str	r3, [r7, #8]
      break;
 80052b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052b2:	68bb      	ldr	r3, [r7, #8]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	00f42400 	.word	0x00f42400
 80052c8:	007a1200 	.word	0x007a1200

080052cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d0:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	2000001c 	.word	0x2000001c

080052e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052e8:	f7ff fff0 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0a9b      	lsrs	r3, r3, #10
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4903      	ldr	r1, [pc, #12]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800
 8005308:	0800c200 	.word	0x0800c200

0800530c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005310:	f7ff ffdc 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	0b5b      	lsrs	r3, r3, #13
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	4903      	ldr	r1, [pc, #12]	; (8005330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005328:	4618      	mov	r0, r3
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40023800 	.word	0x40023800
 8005330:	0800c200 	.word	0x0800c200

08005334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07b      	b.n	800543e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005356:	d009      	beq.n	800536c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
 800535e:	e005      	b.n	800536c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fd fb4e 	bl	8002a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	ea42 0103 	orr.w	r1, r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	f003 0104 	and.w	r1, r3, #4
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f003 0210 	and.w	r2, r3, #16
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b088      	sub	sp, #32
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_SPI_Transmit+0x22>
 8005464:	2302      	movs	r3, #2
 8005466:	e126      	b.n	80056b6 <HAL_SPI_Transmit+0x270>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005470:	f7fd fe9c 	bl	80031ac <HAL_GetTick>
 8005474:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d002      	beq.n	800548c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005486:	2302      	movs	r3, #2
 8005488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800548a:	e10b      	b.n	80056a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_SPI_Transmit+0x52>
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800549c:	e102      	b.n	80056a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2203      	movs	r2, #3
 80054a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	88fa      	ldrh	r2, [r7, #6]
 80054b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e4:	d10f      	bne.n	8005506 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d007      	beq.n	8005524 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552c:	d14b      	bne.n	80055c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_SPI_Transmit+0xf6>
 8005536:	8afb      	ldrh	r3, [r7, #22]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d13e      	bne.n	80055ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005560:	e02b      	b.n	80055ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d112      	bne.n	8005596 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	86da      	strh	r2, [r3, #54]	; 0x36
 8005594:	e011      	b.n	80055ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005596:	f7fd fe09 	bl	80031ac <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d803      	bhi.n	80055ae <HAL_SPI_Transmit+0x168>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_Transmit+0x16e>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055b8:	e074      	b.n	80056a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1ce      	bne.n	8005562 <HAL_SPI_Transmit+0x11c>
 80055c4:	e04c      	b.n	8005660 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_SPI_Transmit+0x18e>
 80055ce:	8afb      	ldrh	r3, [r7, #22]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d140      	bne.n	8005656 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055fa:	e02c      	b.n	8005656 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d113      	bne.n	8005632 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005630:	e011      	b.n	8005656 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005632:	f7fd fdbb 	bl	80031ac <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d803      	bhi.n	800564a <HAL_SPI_Transmit+0x204>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d102      	bne.n	8005650 <HAL_SPI_Transmit+0x20a>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005654:	e026      	b.n	80056a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1cd      	bne.n	80055fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fbcb 	bl	8005e00 <SPI_EndRxTxTransaction>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e000      	b.n	80056a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80056a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b088      	sub	sp, #32
 80056c2:	af02      	add	r7, sp, #8
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056da:	d112      	bne.n	8005702 <HAL_SPI_Receive+0x44>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10e      	bne.n	8005702 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2204      	movs	r2, #4
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056ec:	88fa      	ldrh	r2, [r7, #6]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	4613      	mov	r3, r2
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f8f1 	bl	80058e0 <HAL_SPI_TransmitReceive>
 80056fe:	4603      	mov	r3, r0
 8005700:	e0ea      	b.n	80058d8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_SPI_Receive+0x52>
 800570c:	2302      	movs	r3, #2
 800570e:	e0e3      	b.n	80058d8 <HAL_SPI_Receive+0x21a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005718:	f7fd fd48 	bl	80031ac <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b01      	cmp	r3, #1
 8005728:	d002      	beq.n	8005730 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800572a:	2302      	movs	r3, #2
 800572c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800572e:	e0ca      	b.n	80058c6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_SPI_Receive+0x7e>
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005740:	e0c1      	b.n	80058c6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2204      	movs	r2, #4
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005788:	d10f      	bne.n	80057aa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d007      	beq.n	80057c8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d162      	bne.n	8005896 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057d0:	e02e      	b.n	8005830 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d115      	bne.n	800580c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f103 020c 	add.w	r2, r3, #12
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	87da      	strh	r2, [r3, #62]	; 0x3e
 800580a:	e011      	b.n	8005830 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580c:	f7fd fcce 	bl	80031ac <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_Receive+0x166>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <HAL_SPI_Receive+0x16c>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800582e:	e04a      	b.n	80058c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1cb      	bne.n	80057d2 <HAL_SPI_Receive+0x114>
 800583a:	e031      	b.n	80058a0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d113      	bne.n	8005872 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	b292      	uxth	r2, r2
 8005856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	1c9a      	adds	r2, r3, #2
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005870:	e011      	b.n	8005896 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005872:	f7fd fc9b 	bl	80031ac <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d803      	bhi.n	800588a <HAL_SPI_Receive+0x1cc>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d102      	bne.n	8005890 <HAL_SPI_Receive+0x1d2>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005894:	e017      	b.n	80058c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1cd      	bne.n	800583c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fa45 	bl	8005d34 <SPI_EndRxTransaction>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
 80058c2:	e000      	b.n	80058c6 <HAL_SPI_Receive+0x208>
  }

error :
 80058c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	; 0x30
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058ee:	2301      	movs	r3, #1
 80058f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x26>
 8005902:	2302      	movs	r3, #2
 8005904:	e18a      	b.n	8005c1c <HAL_SPI_TransmitReceive+0x33c>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800590e:	f7fd fc4d 	bl	80031ac <HAL_GetTick>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005924:	887b      	ldrh	r3, [r7, #2]
 8005926:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800592c:	2b01      	cmp	r3, #1
 800592e:	d00f      	beq.n	8005950 <HAL_SPI_TransmitReceive+0x70>
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d107      	bne.n	8005948 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <HAL_SPI_TransmitReceive+0x68>
 8005940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005944:	2b04      	cmp	r3, #4
 8005946:	d003      	beq.n	8005950 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005948:	2302      	movs	r3, #2
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800594e:	e15b      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x82>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x82>
 800595c:	887b      	ldrh	r3, [r7, #2]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005968:	e14e      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b04      	cmp	r3, #4
 8005974:	d003      	beq.n	800597e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2205      	movs	r2, #5
 800597a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	887a      	ldrh	r2, [r7, #2]
 800598e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	887a      	ldrh	r2, [r7, #2]
 8005994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	887a      	ldrh	r2, [r7, #2]
 80059a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d007      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059da:	d178      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x10a>
 80059e4:	8b7b      	ldrh	r3, [r7, #26]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d166      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a0e:	e053      	b.n	8005ab8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d11b      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x176>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d016      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x176>
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d113      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	881a      	ldrh	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	1c9a      	adds	r2, r3, #2
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d119      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x1b8>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d014      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	b292      	uxth	r2, r2
 8005a7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	1c9a      	adds	r2, r3, #2
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a94:	2301      	movs	r3, #1
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a98:	f7fd fb88 	bl	80031ac <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d807      	bhi.n	8005ab8 <HAL_SPI_TransmitReceive+0x1d8>
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d003      	beq.n	8005ab8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ab6:	e0a7      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1a6      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x130>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1a1      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x130>
 8005acc:	e07c      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x1fc>
 8005ad6:	8b7b      	ldrh	r3, [r7, #26]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d16b      	bne.n	8005bb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b02:	e057      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d11c      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x26c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x26c>
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d114      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d119      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x2ae>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d014      	beq.n	8005b8e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b8e:	f7fd fb0d 	bl	80031ac <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d803      	bhi.n	8005ba6 <HAL_SPI_TransmitReceive+0x2c6>
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d102      	bne.n	8005bac <HAL_SPI_TransmitReceive+0x2cc>
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d103      	bne.n	8005bb4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bb2:	e029      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1a2      	bne.n	8005b04 <HAL_SPI_TransmitReceive+0x224>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d19d      	bne.n	8005b04 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f917 	bl	8005e00 <SPI_EndRxTxTransaction>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d006      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005be4:	e010      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e000      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3730      	adds	r7, #48	; 0x30
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c34:	f7fd faba 	bl	80031ac <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	4413      	add	r3, r2
 8005c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c44:	f7fd fab2 	bl	80031ac <HAL_GetTick>
 8005c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c4a:	4b39      	ldr	r3, [pc, #228]	; (8005d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	015b      	lsls	r3, r3, #5
 8005c50:	0d1b      	lsrs	r3, r3, #20
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c5a:	e054      	b.n	8005d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d050      	beq.n	8005d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c64:	f7fd faa2 	bl	80031ac <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d902      	bls.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d13d      	bne.n	8005cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c92:	d111      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c9c:	d004      	beq.n	8005ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca6:	d107      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc0:	d10f      	bne.n	8005ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e017      	b.n	8005d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d19b      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	2000001c 	.word	0x2000001c

08005d34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d48:	d111      	bne.n	8005d6e <SPI_EndRxTransaction+0x3a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d52:	d004      	beq.n	8005d5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	d107      	bne.n	8005d6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d76:	d12a      	bne.n	8005dce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d80:	d012      	beq.n	8005da8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff ff49 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02d      	beq.n	8005df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e026      	b.n	8005df6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2101      	movs	r1, #1
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff ff36 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01a      	beq.n	8005df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e013      	b.n	8005df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff ff23 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e000      	b.n	8005df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <SPI_EndRxTxTransaction+0x7c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <SPI_EndRxTxTransaction+0x80>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	0d5b      	lsrs	r3, r3, #21
 8005e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e2a:	d112      	bne.n	8005e52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2180      	movs	r1, #128	; 0x80
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff fef4 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e00f      	b.n	8005e72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d0f2      	beq.n	8005e52 <SPI_EndRxTxTransaction+0x52>
 8005e6c:	e000      	b.n	8005e70 <SPI_EndRxTxTransaction+0x70>
        break;
 8005e6e:	bf00      	nop
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	2000001c 	.word	0x2000001c
 8005e80:	165e9f81 	.word	0x165e9f81

08005e84 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e034      	b.n	8005f04 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7fb fa16 	bl	80012e0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f002 f828 	bl	8007f14 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	f002 f872 	bl	8007fb8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6858      	ldr	r0, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	f002 f8a7 	bl	8008034 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	6892      	ldr	r2, [r2, #8]
 8005eee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	6892      	ldr	r2, [r2, #8]
 8005efa:	f041 0101 	orr.w	r1, r1, #1
 8005efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e041      	b.n	8005fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fc ff80 	bl	8002e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f000 fc7a 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d001      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e04e      	b.n	8006062 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a23      	ldr	r2, [pc, #140]	; (8006070 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x80>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d01d      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x80>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x80>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <HAL_TIM_Base_Start_IT+0xcc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x80>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_TIM_Base_Start_IT+0xd0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x80>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1b      	ldr	r2, [pc, #108]	; (8006080 <HAL_TIM_Base_Start_IT+0xd4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x80>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <HAL_TIM_Base_Start_IT+0xd8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x80>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_TIM_Base_Start_IT+0xdc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d111      	bne.n	8006050 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b06      	cmp	r3, #6
 800603c:	d010      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604e:	e007      	b.n	8006060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800
 800607c:	40000c00 	.word	0x40000c00
 8006080:	40010400 	.word	0x40010400
 8006084:	40014000 	.word	0x40014000
 8006088:	40001800 	.word	0x40001800

0800608c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f839 	bl	800612a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fbba 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x24>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e022      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x3e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e015      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x58>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e008      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e07c      	b.n	80062ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_PWM_Start+0x82>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c0:	e013      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start+0x92>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061d0:	e00b      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e0:	e003      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fe10 	bl	8006e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <HAL_TIM_PWM_Start+0x174>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_TIM_PWM_Start+0xcc>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <HAL_TIM_PWM_Start+0x178>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_TIM_PWM_Start+0xd0>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_TIM_PWM_Start+0xd2>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <HAL_TIM_PWM_Start+0x174>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_TIM_PWM_Start+0x136>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006238:	d01d      	beq.n	8006276 <HAL_TIM_PWM_Start+0x136>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1f      	ldr	r2, [pc, #124]	; (80062bc <HAL_TIM_PWM_Start+0x17c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_TIM_PWM_Start+0x136>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_TIM_PWM_Start+0x180>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_TIM_PWM_Start+0x136>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_TIM_PWM_Start+0x184>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_TIM_PWM_Start+0x136>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_TIM_PWM_Start+0x178>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_TIM_PWM_Start+0x136>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_TIM_PWM_Start+0x188>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_TIM_PWM_Start+0x136>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a16      	ldr	r2, [pc, #88]	; (80062cc <HAL_TIM_PWM_Start+0x18c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d111      	bne.n	800629a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b06      	cmp	r3, #6
 8006286:	d010      	beq.n	80062aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006298:	e007      	b.n	80062aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40010400 	.word	0x40010400
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40001800 	.word	0x40001800

080062d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d122      	bne.n	800632c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d11b      	bne.n	800632c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0202 	mvn.w	r2, #2
 80062fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fa77 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 8006318:	e005      	b.n	8006326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa69 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fa7a 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b04      	cmp	r3, #4
 8006338:	d122      	bne.n	8006380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b04      	cmp	r3, #4
 8006346:	d11b      	bne.n	8006380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0204 	mvn.w	r2, #4
 8006350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa4d 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa3f 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa50 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b08      	cmp	r3, #8
 800638c:	d122      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b08      	cmp	r3, #8
 800639a:	d11b      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0208 	mvn.w	r2, #8
 80063a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2204      	movs	r2, #4
 80063aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa23 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 80063c0:	e005      	b.n	80063ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa15 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa26 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d122      	bne.n	8006428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d11b      	bne.n	8006428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0210 	mvn.w	r2, #16
 80063f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2208      	movs	r2, #8
 80063fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f9f9 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 8006414:	e005      	b.n	8006422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f9eb 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f9fc 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d10e      	bne.n	8006454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b01      	cmp	r3, #1
 8006442:	d107      	bne.n	8006454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0201 	mvn.w	r2, #1
 800644c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc fa8a 	bl	8002968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645e:	2b80      	cmp	r3, #128	; 0x80
 8006460:	d10e      	bne.n	8006480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d107      	bne.n	8006480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fd78 	bl	8006f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d10e      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d107      	bne.n	80064ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9c1 	bl	800682e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d10e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0220 	mvn.w	r2, #32
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fd42 	bl	8006f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e0ae      	b.n	800665c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b0c      	cmp	r3, #12
 800650a:	f200 809f 	bhi.w	800664c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006549 	.word	0x08006549
 8006518:	0800664d 	.word	0x0800664d
 800651c:	0800664d 	.word	0x0800664d
 8006520:	0800664d 	.word	0x0800664d
 8006524:	08006589 	.word	0x08006589
 8006528:	0800664d 	.word	0x0800664d
 800652c:	0800664d 	.word	0x0800664d
 8006530:	0800664d 	.word	0x0800664d
 8006534:	080065cb 	.word	0x080065cb
 8006538:	0800664d 	.word	0x0800664d
 800653c:	0800664d 	.word	0x0800664d
 8006540:	0800664d 	.word	0x0800664d
 8006544:	0800660b 	.word	0x0800660b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fa18 	bl	8006984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0208 	orr.w	r2, r2, #8
 8006562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0204 	bic.w	r2, r2, #4
 8006572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6999      	ldr	r1, [r3, #24]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	619a      	str	r2, [r3, #24]
      break;
 8006586:	e064      	b.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fa68 	bl	8006a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6999      	ldr	r1, [r3, #24]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	021a      	lsls	r2, r3, #8
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	619a      	str	r2, [r3, #24]
      break;
 80065c8:	e043      	b.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fabd 	bl	8006b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0208 	orr.w	r2, r2, #8
 80065e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0204 	bic.w	r2, r2, #4
 80065f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69d9      	ldr	r1, [r3, #28]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	61da      	str	r2, [r3, #28]
      break;
 8006608:	e023      	b.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fb11 	bl	8006c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69d9      	ldr	r1, [r3, #28]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	021a      	lsls	r2, r3, #8
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	61da      	str	r2, [r3, #28]
      break;
 800664a:	e002      	b.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
      break;
 8006650:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_TIM_ConfigClockSource+0x1c>
 800667c:	2302      	movs	r3, #2
 800667e:	e0b4      	b.n	80067ea <HAL_TIM_ConfigClockSource+0x186>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800669e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b8:	d03e      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0xd4>
 80066ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066be:	f200 8087 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c6:	f000 8086 	beq.w	80067d6 <HAL_TIM_ConfigClockSource+0x172>
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ce:	d87f      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066d0:	2b70      	cmp	r3, #112	; 0x70
 80066d2:	d01a      	beq.n	800670a <HAL_TIM_ConfigClockSource+0xa6>
 80066d4:	2b70      	cmp	r3, #112	; 0x70
 80066d6:	d87b      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b60      	cmp	r3, #96	; 0x60
 80066da:	d050      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x11a>
 80066dc:	2b60      	cmp	r3, #96	; 0x60
 80066de:	d877      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066e0:	2b50      	cmp	r3, #80	; 0x50
 80066e2:	d03c      	beq.n	800675e <HAL_TIM_ConfigClockSource+0xfa>
 80066e4:	2b50      	cmp	r3, #80	; 0x50
 80066e6:	d873      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b40      	cmp	r3, #64	; 0x40
 80066ea:	d058      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x13a>
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d86f      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b30      	cmp	r3, #48	; 0x30
 80066f2:	d064      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 80066f4:	2b30      	cmp	r3, #48	; 0x30
 80066f6:	d86b      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d060      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d867      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d05c      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 8006704:	2b10      	cmp	r3, #16
 8006706:	d05a      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 8006708:	e062      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6899      	ldr	r1, [r3, #8]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f000 fb5d 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800672c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	609a      	str	r2, [r3, #8]
      break;
 8006736:	e04f      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	6899      	ldr	r1, [r3, #8]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f000 fb46 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800675a:	609a      	str	r2, [r3, #8]
      break;
 800675c:	e03c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	461a      	mov	r2, r3
 800676c:	f000 faba 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2150      	movs	r1, #80	; 0x50
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fb13 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 800677c:	e02c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	461a      	mov	r2, r3
 800678c:	f000 fad9 	bl	8006d42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2160      	movs	r1, #96	; 0x60
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fb03 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 800679c:	e01c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f000 fa9a 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 faf3 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80067bc:	e00c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f000 faea 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80067ce:	e003      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      break;
 80067d4:	e000      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a40      	ldr	r2, [pc, #256]	; (8006958 <TIM_Base_SetConfig+0x114>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006862:	d00f      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a3d      	ldr	r2, [pc, #244]	; (800695c <TIM_Base_SetConfig+0x118>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00b      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a3c      	ldr	r2, [pc, #240]	; (8006960 <TIM_Base_SetConfig+0x11c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a3b      	ldr	r2, [pc, #236]	; (8006964 <TIM_Base_SetConfig+0x120>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a3a      	ldr	r2, [pc, #232]	; (8006968 <TIM_Base_SetConfig+0x124>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a2f      	ldr	r2, [pc, #188]	; (8006958 <TIM_Base_SetConfig+0x114>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d027      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	; (800695c <TIM_Base_SetConfig+0x118>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d023      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <TIM_Base_SetConfig+0x11c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01f      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <TIM_Base_SetConfig+0x120>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a29      	ldr	r2, [pc, #164]	; (8006968 <TIM_Base_SetConfig+0x124>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d017      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a28      	ldr	r2, [pc, #160]	; (800696c <TIM_Base_SetConfig+0x128>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a27      	ldr	r2, [pc, #156]	; (8006970 <TIM_Base_SetConfig+0x12c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00f      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a26      	ldr	r2, [pc, #152]	; (8006974 <TIM_Base_SetConfig+0x130>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a25      	ldr	r2, [pc, #148]	; (8006978 <TIM_Base_SetConfig+0x134>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a24      	ldr	r2, [pc, #144]	; (800697c <TIM_Base_SetConfig+0x138>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a23      	ldr	r2, [pc, #140]	; (8006980 <TIM_Base_SetConfig+0x13c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d108      	bne.n	8006908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <TIM_Base_SetConfig+0x114>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0xf8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <TIM_Base_SetConfig+0x124>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d103      	bne.n	8006944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	615a      	str	r2, [r3, #20]
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40010000 	.word	0x40010000
 800695c:	40000400 	.word	0x40000400
 8006960:	40000800 	.word	0x40000800
 8006964:	40000c00 	.word	0x40000c00
 8006968:	40010400 	.word	0x40010400
 800696c:	40014000 	.word	0x40014000
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800
 8006978:	40001800 	.word	0x40001800
 800697c:	40001c00 	.word	0x40001c00
 8006980:	40002000 	.word	0x40002000

08006984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0201 	bic.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f023 0302 	bic.w	r3, r3, #2
 80069cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <TIM_OC1_SetConfig+0xd8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC1_SetConfig+0x64>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1f      	ldr	r2, [pc, #124]	; (8006a60 <TIM_OC1_SetConfig+0xdc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10c      	bne.n	8006a02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0308 	bic.w	r3, r3, #8
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <TIM_OC1_SetConfig+0xd8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_OC1_SetConfig+0x8e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <TIM_OC1_SetConfig+0xdc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d111      	bne.n	8006a36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	621a      	str	r2, [r3, #32]
}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40010400 	.word	0x40010400

08006a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f023 0210 	bic.w	r2, r3, #16
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 0320 	bic.w	r3, r3, #32
 8006aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <TIM_OC2_SetConfig+0xe4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC2_SetConfig+0x68>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a21      	ldr	r2, [pc, #132]	; (8006b4c <TIM_OC2_SetConfig+0xe8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d10d      	bne.n	8006ae8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <TIM_OC2_SetConfig+0xe4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_OC2_SetConfig+0x94>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a16      	ldr	r2, [pc, #88]	; (8006b4c <TIM_OC2_SetConfig+0xe8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d113      	bne.n	8006b20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40010400 	.word	0x40010400

08006b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0303 	bic.w	r3, r3, #3
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <TIM_OC3_SetConfig+0xe0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d003      	beq.n	8006bb6 <TIM_OC3_SetConfig+0x66>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a20      	ldr	r2, [pc, #128]	; (8006c34 <TIM_OC3_SetConfig+0xe4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10d      	bne.n	8006bd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <TIM_OC3_SetConfig+0xe0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <TIM_OC3_SetConfig+0x92>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <TIM_OC3_SetConfig+0xe4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d113      	bne.n	8006c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40010400 	.word	0x40010400

08006c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	031b      	lsls	r3, r3, #12
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a12      	ldr	r2, [pc, #72]	; (8006cdc <TIM_OC4_SetConfig+0xa4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_OC4_SetConfig+0x68>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a11      	ldr	r2, [pc, #68]	; (8006ce0 <TIM_OC4_SetConfig+0xa8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40010400 	.word	0x40010400

08006ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 030a 	bic.w	r3, r3, #10
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b087      	sub	sp, #28
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0210 	bic.w	r2, r3, #16
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	031b      	lsls	r3, r3, #12
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f043 0307 	orr.w	r3, r3, #7
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
	...

08006e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e05a      	b.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d022      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec8:	d01d      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d10c      	bne.n	8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40001800 	.word	0x40001800

08006f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e03f      	b.n	8007016 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fc f81e 	bl	8002fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2224      	movs	r2, #36	; 0x24
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fddb 	bl	8007b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695a      	ldr	r2, [r3, #20]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b08a      	sub	sp, #40	; 0x28
 8007022:	af02      	add	r7, sp, #8
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b20      	cmp	r3, #32
 800703c:	d17c      	bne.n	8007138 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_UART_Transmit+0x2c>
 8007044:	88fb      	ldrh	r3, [r7, #6]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e075      	b.n	800713a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_UART_Transmit+0x3e>
 8007058:	2302      	movs	r3, #2
 800705a:	e06e      	b.n	800713a <HAL_UART_Transmit+0x11c>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2221      	movs	r2, #33	; 0x21
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007072:	f7fc f89b 	bl	80031ac <HAL_GetTick>
 8007076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708c:	d108      	bne.n	80070a0 <HAL_UART_Transmit+0x82>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d104      	bne.n	80070a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	e003      	b.n	80070a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80070b0:	e02a      	b.n	8007108 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2200      	movs	r2, #0
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fb1f 	bl	8007700 <UART_WaitOnFlagUntilTimeout>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e036      	b.n	800713a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	3302      	adds	r3, #2
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	e007      	b.n	80070fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1cf      	bne.n	80070b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2200      	movs	r2, #0
 800711a:	2140      	movs	r1, #64	; 0x40
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 faef 	bl	8007700 <UART_WaitOnFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e006      	b.n	800713a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e000      	b.n	800713a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	3720      	adds	r7, #32
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	4613      	mov	r3, r2
 800714e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b20      	cmp	r3, #32
 800715a:	d11d      	bne.n	8007198 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_UART_Receive_IT+0x26>
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e016      	b.n	800719a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_UART_Receive_IT+0x38>
 8007176:	2302      	movs	r3, #2
 8007178:	e00f      	b.n	800719a <HAL_UART_Receive_IT+0x58>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	461a      	mov	r2, r3
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fb24 	bl	80077dc <UART_Start_Receive_IT>
 8007194:	4603      	mov	r3, r0
 8007196:	e000      	b.n	800719a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007198:	2302      	movs	r3, #2
  }
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b0ba      	sub	sp, #232	; 0xe8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10f      	bne.n	800720a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <HAL_UART_IRQHandler+0x66>
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fc03 	bl	8007a0e <UART_Receive_IT>
      return;
 8007208:	e256      	b.n	80076b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800720a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80de 	beq.w	80073d0 <HAL_UART_IRQHandler+0x22c>
 8007214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007224:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80d1 	beq.w	80073d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <HAL_UART_IRQHandler+0xae>
 800723a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f043 0201 	orr.w	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_UART_IRQHandler+0xd2>
 800725e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f043 0202 	orr.w	r2, r3, #2
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <HAL_UART_IRQHandler+0xf6>
 8007282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f043 0204 	orr.w	r2, r3, #4
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800729a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d011      	beq.n	80072ca <HAL_UART_IRQHandler+0x126>
 80072a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d105      	bne.n	80072be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f043 0208 	orr.w	r2, r3, #8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 81ed 	beq.w	80076ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_UART_IRQHandler+0x14e>
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb8e 	bl	8007a0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b40      	cmp	r3, #64	; 0x40
 80072fe:	bf0c      	ite	eq
 8007300:	2301      	moveq	r3, #1
 8007302:	2300      	movne	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <HAL_UART_IRQHandler+0x17a>
 8007316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d04f      	beq.n	80073be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa96 	bl	8007850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	2b40      	cmp	r3, #64	; 0x40
 8007330:	d141      	bne.n	80073b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3314      	adds	r3, #20
 8007338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800734c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3314      	adds	r3, #20
 800735a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800735e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800736a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1d9      	bne.n	8007332 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	4a7d      	ldr	r2, [pc, #500]	; (8007580 <HAL_UART_IRQHandler+0x3dc>)
 800738c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	4618      	mov	r0, r3
 8007394:	f7fc fdd4 	bl	8003f40 <HAL_DMA_Abort_IT>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d016      	beq.n	80073cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073a8:	4610      	mov	r0, r2
 80073aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ac:	e00e      	b.n	80073cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f990 	bl	80076d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	e00a      	b.n	80073cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f98c 	bl	80076d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073bc:	e006      	b.n	80073cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f988 	bl	80076d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073ca:	e170      	b.n	80076ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	bf00      	nop
    return;
 80073ce:	e16e      	b.n	80076ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	f040 814a 	bne.w	800766e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8143 	beq.w	800766e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 813c 	beq.w	800766e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	f040 80b4 	bne.w	8007584 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007428:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8140 	beq.w	80076b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800743a:	429a      	cmp	r2, r3
 800743c:	f080 8139 	bcs.w	80076b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007446:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007452:	f000 8088 	beq.w	8007566 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800746c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	330c      	adds	r3, #12
 800747e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007482:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800748e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800749a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1d9      	bne.n	8007456 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3314      	adds	r3, #20
 80074a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3314      	adds	r3, #20
 80074c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e1      	bne.n	80074a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3314      	adds	r3, #20
 80074e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3314      	adds	r3, #20
 80074fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007502:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007504:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007508:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e3      	bne.n	80074de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007536:	f023 0310 	bic.w	r3, r3, #16
 800753a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007548:	65ba      	str	r2, [r7, #88]	; 0x58
 800754a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800754e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e3      	bne.n	8007524 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	4618      	mov	r0, r3
 8007562:	f7fc fc7d 	bl	8003e60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800756e:	b29b      	uxth	r3, r3
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	b29b      	uxth	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f8b6 	bl	80076e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800757c:	e099      	b.n	80076b2 <HAL_UART_IRQHandler+0x50e>
 800757e:	bf00      	nop
 8007580:	08007917 	.word	0x08007917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800758c:	b29b      	uxth	r3, r3
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 808b 	beq.w	80076b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8086 	beq.w	80076b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	330c      	adds	r3, #12
 80075b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	330c      	adds	r3, #12
 80075ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075ce:	647a      	str	r2, [r7, #68]	; 0x44
 80075d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e3      	bne.n	80075aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	623b      	str	r3, [r7, #32]
   return(result);
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	f023 0301 	bic.w	r3, r3, #1
 80075f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007606:	633a      	str	r2, [r7, #48]	; 0x30
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800760c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e3      	bne.n	80075e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	60fb      	str	r3, [r7, #12]
   return(result);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0310 	bic.w	r3, r3, #16
 800763e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	330c      	adds	r3, #12
 8007648:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800764c:	61fa      	str	r2, [r7, #28]
 800764e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	69b9      	ldr	r1, [r7, #24]
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	617b      	str	r3, [r7, #20]
   return(result);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e3      	bne.n	8007628 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f83e 	bl	80076e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800766c:	e023      	b.n	80076b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <HAL_UART_IRQHandler+0x4ea>
 800767a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f959 	bl	800793e <UART_Transmit_IT>
    return;
 800768c:	e014      	b.n	80076b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <HAL_UART_IRQHandler+0x514>
 800769a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d008      	beq.n	80076b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f999 	bl	80079de <UART_EndTransmit_IT>
    return;
 80076ac:	e004      	b.n	80076b8 <HAL_UART_IRQHandler+0x514>
    return;
 80076ae:	bf00      	nop
 80076b0:	e002      	b.n	80076b8 <HAL_UART_IRQHandler+0x514>
      return;
 80076b2:	bf00      	nop
 80076b4:	e000      	b.n	80076b8 <HAL_UART_IRQHandler+0x514>
      return;
 80076b6:	bf00      	nop
  }
}
 80076b8:	37e8      	adds	r7, #232	; 0xe8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop

080076c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b090      	sub	sp, #64	; 0x40
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007710:	e050      	b.n	80077b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d04c      	beq.n	80077b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800771a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <UART_WaitOnFlagUntilTimeout+0x30>
 8007720:	f7fb fd44 	bl	80031ac <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800772c:	429a      	cmp	r2, r3
 800772e:	d241      	bcs.n	80077b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007750:	637a      	str	r2, [r7, #52]	; 0x34
 8007752:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	613b      	str	r3, [r7, #16]
   return(result);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	63bb      	str	r3, [r7, #56]	; 0x38
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007784:	623a      	str	r2, [r7, #32]
 8007786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	69f9      	ldr	r1, [r7, #28]
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	61bb      	str	r3, [r7, #24]
   return(result);
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e5      	bne.n	8007764 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e00f      	b.n	80077d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4013      	ands	r3, r2
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	bf0c      	ite	eq
 80077c4:	2301      	moveq	r3, #1
 80077c6:	2300      	movne	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d09f      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3740      	adds	r7, #64	; 0x40
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2222      	movs	r2, #34	; 0x22
 8007806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007820:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695a      	ldr	r2, [r3, #20]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0220 	orr.w	r2, r2, #32
 8007840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b095      	sub	sp, #84	; 0x54
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007878:	643a      	str	r2, [r7, #64]	; 0x40
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800787e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3314      	adds	r3, #20
 8007892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	61fb      	str	r3, [r7, #28]
   return(result);
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3314      	adds	r3, #20
 80078aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e5      	bne.n	800788c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d119      	bne.n	80078fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	330c      	adds	r3, #12
 80078ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0310 	bic.w	r3, r3, #16
 80078de:	647b      	str	r3, [r7, #68]	; 0x44
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e8:	61ba      	str	r2, [r7, #24]
 80078ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6979      	ldr	r1, [r7, #20]
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	613b      	str	r3, [r7, #16]
   return(result);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e5      	bne.n	80078c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800790a:	bf00      	nop
 800790c:	3754      	adds	r7, #84	; 0x54
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fecf 	bl	80076d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b21      	cmp	r3, #33	; 0x21
 8007950:	d13e      	bne.n	80079d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795a:	d114      	bne.n	8007986 <UART_Transmit_IT+0x48>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d110      	bne.n	8007986 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007978:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	621a      	str	r2, [r3, #32]
 8007984:	e008      	b.n	8007998 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	1c59      	adds	r1, r3, #1
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6211      	str	r1, [r2, #32]
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	4619      	mov	r1, r3
 80079a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10f      	bne.n	80079cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fe5e 	bl	80076c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b08c      	sub	sp, #48	; 0x30
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b22      	cmp	r3, #34	; 0x22
 8007a20:	f040 80ab 	bne.w	8007b7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	d117      	bne.n	8007a5e <UART_Receive_IT+0x50>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d113      	bne.n	8007a5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	1c9a      	adds	r2, r3, #2
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a5c:	e026      	b.n	8007aac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a70:	d007      	beq.n	8007a82 <UART_Receive_IT+0x74>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <UART_Receive_IT+0x82>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e008      	b.n	8007aa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d15a      	bne.n	8007b76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0220 	bic.w	r2, r2, #32
 8007ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d135      	bne.n	8007b6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	613b      	str	r3, [r7, #16]
   return(result);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b26:	623a      	str	r2, [r7, #32]
 8007b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	69f9      	ldr	r1, [r7, #28]
 8007b2c:	6a3a      	ldr	r2, [r7, #32]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d10a      	bne.n	8007b5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fdbf 	bl	80076e8 <HAL_UARTEx_RxEventCallback>
 8007b6a:	e002      	b.n	8007b72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fb f9f3 	bl	8002f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e002      	b.n	8007b7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
  }
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	; 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	b09f      	sub	sp, #124	; 0x7c
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	68d9      	ldr	r1, [r3, #12]
 8007b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	ea40 0301 	orr.w	r3, r0, r1
 8007ba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bc8:	f021 010c 	bic.w	r1, r1, #12
 8007bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be2:	6999      	ldr	r1, [r3, #24]
 8007be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	ea40 0301 	orr.w	r3, r0, r1
 8007bec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4bc5      	ldr	r3, [pc, #788]	; (8007f08 <UART_SetConfig+0x384>)
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d004      	beq.n	8007c02 <UART_SetConfig+0x7e>
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	4bc3      	ldr	r3, [pc, #780]	; (8007f0c <UART_SetConfig+0x388>)
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d103      	bne.n	8007c0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c02:	f7fd fb83 	bl	800530c <HAL_RCC_GetPCLK2Freq>
 8007c06:	6778      	str	r0, [r7, #116]	; 0x74
 8007c08:	e002      	b.n	8007c10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c0a:	f7fd fb6b 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8007c0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c18:	f040 80b6 	bne.w	8007d88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c1e:	461c      	mov	r4, r3
 8007c20:	f04f 0500 	mov.w	r5, #0
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	1891      	adds	r1, r2, r2
 8007c2a:	6439      	str	r1, [r7, #64]	; 0x40
 8007c2c:	415b      	adcs	r3, r3
 8007c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c34:	1912      	adds	r2, r2, r4
 8007c36:	eb45 0303 	adc.w	r3, r5, r3
 8007c3a:	f04f 0000 	mov.w	r0, #0
 8007c3e:	f04f 0100 	mov.w	r1, #0
 8007c42:	00d9      	lsls	r1, r3, #3
 8007c44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c48:	00d0      	lsls	r0, r2, #3
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	1911      	adds	r1, r2, r4
 8007c50:	6639      	str	r1, [r7, #96]	; 0x60
 8007c52:	416b      	adcs	r3, r5
 8007c54:	667b      	str	r3, [r7, #100]	; 0x64
 8007c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	1891      	adds	r1, r2, r2
 8007c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c64:	415b      	adcs	r3, r3
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c70:	f7f8 ff1c 	bl	8000aac <__aeabi_uldivmod>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4ba5      	ldr	r3, [pc, #660]	; (8007f10 <UART_SetConfig+0x38c>)
 8007c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c7e:	095b      	lsrs	r3, r3, #5
 8007c80:	011e      	lsls	r6, r3, #4
 8007c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c84:	461c      	mov	r4, r3
 8007c86:	f04f 0500 	mov.w	r5, #0
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	1891      	adds	r1, r2, r2
 8007c90:	6339      	str	r1, [r7, #48]	; 0x30
 8007c92:	415b      	adcs	r3, r3
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
 8007c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c9a:	1912      	adds	r2, r2, r4
 8007c9c:	eb45 0303 	adc.w	r3, r5, r3
 8007ca0:	f04f 0000 	mov.w	r0, #0
 8007ca4:	f04f 0100 	mov.w	r1, #0
 8007ca8:	00d9      	lsls	r1, r3, #3
 8007caa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cae:	00d0      	lsls	r0, r2, #3
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	1911      	adds	r1, r2, r4
 8007cb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cb8:	416b      	adcs	r3, r5
 8007cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	1891      	adds	r1, r2, r2
 8007cc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cca:	415b      	adcs	r3, r3
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007cd6:	f7f8 fee9 	bl	8000aac <__aeabi_uldivmod>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4b8c      	ldr	r3, [pc, #560]	; (8007f10 <UART_SetConfig+0x38c>)
 8007ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	2164      	movs	r1, #100	; 0x64
 8007ce8:	fb01 f303 	mul.w	r3, r1, r3
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	3332      	adds	r3, #50	; 0x32
 8007cf2:	4a87      	ldr	r2, [pc, #540]	; (8007f10 <UART_SetConfig+0x38c>)
 8007cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf8:	095b      	lsrs	r3, r3, #5
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d00:	441e      	add	r6, r3
 8007d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d04:	4618      	mov	r0, r3
 8007d06:	f04f 0100 	mov.w	r1, #0
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	1894      	adds	r4, r2, r2
 8007d10:	623c      	str	r4, [r7, #32]
 8007d12:	415b      	adcs	r3, r3
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24
 8007d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d1a:	1812      	adds	r2, r2, r0
 8007d1c:	eb41 0303 	adc.w	r3, r1, r3
 8007d20:	f04f 0400 	mov.w	r4, #0
 8007d24:	f04f 0500 	mov.w	r5, #0
 8007d28:	00dd      	lsls	r5, r3, #3
 8007d2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d2e:	00d4      	lsls	r4, r2, #3
 8007d30:	4622      	mov	r2, r4
 8007d32:	462b      	mov	r3, r5
 8007d34:	1814      	adds	r4, r2, r0
 8007d36:	653c      	str	r4, [r7, #80]	; 0x50
 8007d38:	414b      	adcs	r3, r1
 8007d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	461a      	mov	r2, r3
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	1891      	adds	r1, r2, r2
 8007d48:	61b9      	str	r1, [r7, #24]
 8007d4a:	415b      	adcs	r3, r3
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d56:	f7f8 fea9 	bl	8000aac <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4b6c      	ldr	r3, [pc, #432]	; (8007f10 <UART_SetConfig+0x38c>)
 8007d60:	fba3 1302 	umull	r1, r3, r3, r2
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	2164      	movs	r1, #100	; 0x64
 8007d68:	fb01 f303 	mul.w	r3, r1, r3
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	3332      	adds	r3, #50	; 0x32
 8007d72:	4a67      	ldr	r2, [pc, #412]	; (8007f10 <UART_SetConfig+0x38c>)
 8007d74:	fba2 2303 	umull	r2, r3, r2, r3
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	f003 0207 	and.w	r2, r3, #7
 8007d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4432      	add	r2, r6
 8007d84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d86:	e0b9      	b.n	8007efc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d8a:	461c      	mov	r4, r3
 8007d8c:	f04f 0500 	mov.w	r5, #0
 8007d90:	4622      	mov	r2, r4
 8007d92:	462b      	mov	r3, r5
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	6139      	str	r1, [r7, #16]
 8007d98:	415b      	adcs	r3, r3
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007da0:	1912      	adds	r2, r2, r4
 8007da2:	eb45 0303 	adc.w	r3, r5, r3
 8007da6:	f04f 0000 	mov.w	r0, #0
 8007daa:	f04f 0100 	mov.w	r1, #0
 8007dae:	00d9      	lsls	r1, r3, #3
 8007db0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007db4:	00d0      	lsls	r0, r2, #3
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	eb12 0804 	adds.w	r8, r2, r4
 8007dbe:	eb43 0905 	adc.w	r9, r3, r5
 8007dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f04f 0100 	mov.w	r1, #0
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	008b      	lsls	r3, r1, #2
 8007dd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dda:	0082      	lsls	r2, r0, #2
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fe64 	bl	8000aac <__aeabi_uldivmod>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4b49      	ldr	r3, [pc, #292]	; (8007f10 <UART_SetConfig+0x38c>)
 8007dea:	fba3 2302 	umull	r2, r3, r3, r2
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	011e      	lsls	r6, r3, #4
 8007df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df4:	4618      	mov	r0, r3
 8007df6:	f04f 0100 	mov.w	r1, #0
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	1894      	adds	r4, r2, r2
 8007e00:	60bc      	str	r4, [r7, #8]
 8007e02:	415b      	adcs	r3, r3
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e0a:	1812      	adds	r2, r2, r0
 8007e0c:	eb41 0303 	adc.w	r3, r1, r3
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	f04f 0500 	mov.w	r5, #0
 8007e18:	00dd      	lsls	r5, r3, #3
 8007e1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e1e:	00d4      	lsls	r4, r2, #3
 8007e20:	4622      	mov	r2, r4
 8007e22:	462b      	mov	r3, r5
 8007e24:	1814      	adds	r4, r2, r0
 8007e26:	64bc      	str	r4, [r7, #72]	; 0x48
 8007e28:	414b      	adcs	r3, r1
 8007e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f04f 0100 	mov.w	r1, #0
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	008b      	lsls	r3, r1, #2
 8007e40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e44:	0082      	lsls	r2, r0, #2
 8007e46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e4a:	f7f8 fe2f 	bl	8000aac <__aeabi_uldivmod>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4b2f      	ldr	r3, [pc, #188]	; (8007f10 <UART_SetConfig+0x38c>)
 8007e54:	fba3 1302 	umull	r1, r3, r3, r2
 8007e58:	095b      	lsrs	r3, r3, #5
 8007e5a:	2164      	movs	r1, #100	; 0x64
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	3332      	adds	r3, #50	; 0x32
 8007e66:	4a2a      	ldr	r2, [pc, #168]	; (8007f10 <UART_SetConfig+0x38c>)
 8007e68:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e72:	441e      	add	r6, r3
 8007e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e76:	4618      	mov	r0, r3
 8007e78:	f04f 0100 	mov.w	r1, #0
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	1894      	adds	r4, r2, r2
 8007e82:	603c      	str	r4, [r7, #0]
 8007e84:	415b      	adcs	r3, r3
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8c:	1812      	adds	r2, r2, r0
 8007e8e:	eb41 0303 	adc.w	r3, r1, r3
 8007e92:	f04f 0400 	mov.w	r4, #0
 8007e96:	f04f 0500 	mov.w	r5, #0
 8007e9a:	00dd      	lsls	r5, r3, #3
 8007e9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ea0:	00d4      	lsls	r4, r2, #3
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	eb12 0a00 	adds.w	sl, r2, r0
 8007eaa:	eb43 0b01 	adc.w	fp, r3, r1
 8007eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f04f 0100 	mov.w	r1, #0
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	008b      	lsls	r3, r1, #2
 8007ec2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ec6:	0082      	lsls	r2, r0, #2
 8007ec8:	4650      	mov	r0, sl
 8007eca:	4659      	mov	r1, fp
 8007ecc:	f7f8 fdee 	bl	8000aac <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <UART_SetConfig+0x38c>)
 8007ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	2164      	movs	r1, #100	; 0x64
 8007ede:	fb01 f303 	mul.w	r3, r1, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	3332      	adds	r3, #50	; 0x32
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <UART_SetConfig+0x38c>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	f003 020f 	and.w	r2, r3, #15
 8007ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4432      	add	r2, r6
 8007efa:	609a      	str	r2, [r3, #8]
}
 8007efc:	bf00      	nop
 8007efe:	377c      	adds	r7, #124	; 0x7c
 8007f00:	46bd      	mov	sp, r7
 8007f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f06:	bf00      	nop
 8007f08:	40011000 	.word	0x40011000
 8007f0c:	40011400 	.word	0x40011400
 8007f10:	51eb851f 	.word	0x51eb851f

08007f14 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4b20      	ldr	r3, [pc, #128]	; (8007fb4 <FSMC_NORSRAM_Init+0xa0>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f3e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007f44:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007f4a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007f50:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007f56:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007f5c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007f62:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007f68:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007f6e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007f74:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007f7a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007f80:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d103      	bne.n	8007f98 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f96:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	fff00080 	.word	0xfff00080

08007fb8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007fda:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fe6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fee:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007ff6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008000:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	3b02      	subs	r3, #2
 8008008:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800800a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008010:	4313      	orrs	r3, r2
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800804c:	d122      	bne.n	8008094 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800805c:	4013      	ands	r3, r2
 800805e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800806a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008072:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800807a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008080:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6979      	ldr	r1, [r7, #20]
 800808e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008092:	e005      	b.n	80080a0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800809c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	cff00000 	.word	0xcff00000

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	; (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000028 	.word	0x20000028

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4d0d      	ldr	r5, [pc, #52]	; (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	; (80080fc <__libc_init_array+0x3c>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2600      	movs	r6, #0
 80080cc:	42a6      	cmp	r6, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4d0b      	ldr	r5, [pc, #44]	; (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	; (8008104 <__libc_init_array+0x44>)
 80080d4:	f001 f84c 	bl	8009170 <_init>
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2600      	movs	r6, #0
 80080de:	42a6      	cmp	r6, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e8:	4798      	blx	r3
 80080ea:	3601      	adds	r6, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f2:	4798      	blx	r3
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	0800c2b0 	.word	0x0800c2b0
 80080fc:	0800c2b0 	.word	0x0800c2b0
 8008100:	0800c2b0 	.word	0x0800c2b0
 8008104:	0800c2b4 	.word	0x0800c2b4

08008108 <memset>:
 8008108:	4402      	add	r2, r0
 800810a:	4603      	mov	r3, r0
 800810c:	4293      	cmp	r3, r2
 800810e:	d100      	bne.n	8008112 <memset+0xa>
 8008110:	4770      	bx	lr
 8008112:	f803 1b01 	strb.w	r1, [r3], #1
 8008116:	e7f9      	b.n	800810c <memset+0x4>

08008118 <_puts_r>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	460e      	mov	r6, r1
 800811c:	4605      	mov	r5, r0
 800811e:	b118      	cbz	r0, 8008128 <_puts_r+0x10>
 8008120:	6983      	ldr	r3, [r0, #24]
 8008122:	b90b      	cbnz	r3, 8008128 <_puts_r+0x10>
 8008124:	f000 fa68 	bl	80085f8 <__sinit>
 8008128:	69ab      	ldr	r3, [r5, #24]
 800812a:	68ac      	ldr	r4, [r5, #8]
 800812c:	b913      	cbnz	r3, 8008134 <_puts_r+0x1c>
 800812e:	4628      	mov	r0, r5
 8008130:	f000 fa62 	bl	80085f8 <__sinit>
 8008134:	4b2c      	ldr	r3, [pc, #176]	; (80081e8 <_puts_r+0xd0>)
 8008136:	429c      	cmp	r4, r3
 8008138:	d120      	bne.n	800817c <_puts_r+0x64>
 800813a:	686c      	ldr	r4, [r5, #4]
 800813c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800813e:	07db      	lsls	r3, r3, #31
 8008140:	d405      	bmi.n	800814e <_puts_r+0x36>
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	0598      	lsls	r0, r3, #22
 8008146:	d402      	bmi.n	800814e <_puts_r+0x36>
 8008148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800814a:	f000 faf3 	bl	8008734 <__retarget_lock_acquire_recursive>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	0719      	lsls	r1, r3, #28
 8008152:	d51d      	bpl.n	8008190 <_puts_r+0x78>
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	b1db      	cbz	r3, 8008190 <_puts_r+0x78>
 8008158:	3e01      	subs	r6, #1
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008160:	3b01      	subs	r3, #1
 8008162:	60a3      	str	r3, [r4, #8]
 8008164:	bb39      	cbnz	r1, 80081b6 <_puts_r+0x9e>
 8008166:	2b00      	cmp	r3, #0
 8008168:	da38      	bge.n	80081dc <_puts_r+0xc4>
 800816a:	4622      	mov	r2, r4
 800816c:	210a      	movs	r1, #10
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f868 	bl	8008244 <__swbuf_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d011      	beq.n	800819c <_puts_r+0x84>
 8008178:	250a      	movs	r5, #10
 800817a:	e011      	b.n	80081a0 <_puts_r+0x88>
 800817c:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <_puts_r+0xd4>)
 800817e:	429c      	cmp	r4, r3
 8008180:	d101      	bne.n	8008186 <_puts_r+0x6e>
 8008182:	68ac      	ldr	r4, [r5, #8]
 8008184:	e7da      	b.n	800813c <_puts_r+0x24>
 8008186:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <_puts_r+0xd8>)
 8008188:	429c      	cmp	r4, r3
 800818a:	bf08      	it	eq
 800818c:	68ec      	ldreq	r4, [r5, #12]
 800818e:	e7d5      	b.n	800813c <_puts_r+0x24>
 8008190:	4621      	mov	r1, r4
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f8a8 	bl	80082e8 <__swsetup_r>
 8008198:	2800      	cmp	r0, #0
 800819a:	d0dd      	beq.n	8008158 <_puts_r+0x40>
 800819c:	f04f 35ff 	mov.w	r5, #4294967295
 80081a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081a2:	07da      	lsls	r2, r3, #31
 80081a4:	d405      	bmi.n	80081b2 <_puts_r+0x9a>
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	059b      	lsls	r3, r3, #22
 80081aa:	d402      	bmi.n	80081b2 <_puts_r+0x9a>
 80081ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ae:	f000 fac2 	bl	8008736 <__retarget_lock_release_recursive>
 80081b2:	4628      	mov	r0, r5
 80081b4:	bd70      	pop	{r4, r5, r6, pc}
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da04      	bge.n	80081c4 <_puts_r+0xac>
 80081ba:	69a2      	ldr	r2, [r4, #24]
 80081bc:	429a      	cmp	r2, r3
 80081be:	dc06      	bgt.n	80081ce <_puts_r+0xb6>
 80081c0:	290a      	cmp	r1, #10
 80081c2:	d004      	beq.n	80081ce <_puts_r+0xb6>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	6022      	str	r2, [r4, #0]
 80081ca:	7019      	strb	r1, [r3, #0]
 80081cc:	e7c5      	b.n	800815a <_puts_r+0x42>
 80081ce:	4622      	mov	r2, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 f837 	bl	8008244 <__swbuf_r>
 80081d6:	3001      	adds	r0, #1
 80081d8:	d1bf      	bne.n	800815a <_puts_r+0x42>
 80081da:	e7df      	b.n	800819c <_puts_r+0x84>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	250a      	movs	r5, #10
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	701d      	strb	r5, [r3, #0]
 80081e6:	e7db      	b.n	80081a0 <_puts_r+0x88>
 80081e8:	0800c234 	.word	0x0800c234
 80081ec:	0800c254 	.word	0x0800c254
 80081f0:	0800c214 	.word	0x0800c214

080081f4 <puts>:
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <puts+0xc>)
 80081f6:	4601      	mov	r1, r0
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f7ff bf8d 	b.w	8008118 <_puts_r>
 80081fe:	bf00      	nop
 8008200:	20000028 	.word	0x20000028

08008204 <siprintf>:
 8008204:	b40e      	push	{r1, r2, r3}
 8008206:	b500      	push	{lr}
 8008208:	b09c      	sub	sp, #112	; 0x70
 800820a:	ab1d      	add	r3, sp, #116	; 0x74
 800820c:	9002      	str	r0, [sp, #8]
 800820e:	9006      	str	r0, [sp, #24]
 8008210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008214:	4809      	ldr	r0, [pc, #36]	; (800823c <siprintf+0x38>)
 8008216:	9107      	str	r1, [sp, #28]
 8008218:	9104      	str	r1, [sp, #16]
 800821a:	4909      	ldr	r1, [pc, #36]	; (8008240 <siprintf+0x3c>)
 800821c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008220:	9105      	str	r1, [sp, #20]
 8008222:	6800      	ldr	r0, [r0, #0]
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	a902      	add	r1, sp, #8
 8008228:	f000 fbf0 	bl	8008a0c <_svfiprintf_r>
 800822c:	9b02      	ldr	r3, [sp, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	b01c      	add	sp, #112	; 0x70
 8008234:	f85d eb04 	ldr.w	lr, [sp], #4
 8008238:	b003      	add	sp, #12
 800823a:	4770      	bx	lr
 800823c:	20000028 	.word	0x20000028
 8008240:	ffff0208 	.word	0xffff0208

08008244 <__swbuf_r>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	460e      	mov	r6, r1
 8008248:	4614      	mov	r4, r2
 800824a:	4605      	mov	r5, r0
 800824c:	b118      	cbz	r0, 8008256 <__swbuf_r+0x12>
 800824e:	6983      	ldr	r3, [r0, #24]
 8008250:	b90b      	cbnz	r3, 8008256 <__swbuf_r+0x12>
 8008252:	f000 f9d1 	bl	80085f8 <__sinit>
 8008256:	4b21      	ldr	r3, [pc, #132]	; (80082dc <__swbuf_r+0x98>)
 8008258:	429c      	cmp	r4, r3
 800825a:	d12b      	bne.n	80082b4 <__swbuf_r+0x70>
 800825c:	686c      	ldr	r4, [r5, #4]
 800825e:	69a3      	ldr	r3, [r4, #24]
 8008260:	60a3      	str	r3, [r4, #8]
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	071a      	lsls	r2, r3, #28
 8008266:	d52f      	bpl.n	80082c8 <__swbuf_r+0x84>
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	b36b      	cbz	r3, 80082c8 <__swbuf_r+0x84>
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	1ac0      	subs	r0, r0, r3
 8008272:	6963      	ldr	r3, [r4, #20]
 8008274:	b2f6      	uxtb	r6, r6
 8008276:	4283      	cmp	r3, r0
 8008278:	4637      	mov	r7, r6
 800827a:	dc04      	bgt.n	8008286 <__swbuf_r+0x42>
 800827c:	4621      	mov	r1, r4
 800827e:	4628      	mov	r0, r5
 8008280:	f000 f926 	bl	80084d0 <_fflush_r>
 8008284:	bb30      	cbnz	r0, 80082d4 <__swbuf_r+0x90>
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	3b01      	subs	r3, #1
 800828a:	60a3      	str	r3, [r4, #8]
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	6022      	str	r2, [r4, #0]
 8008292:	701e      	strb	r6, [r3, #0]
 8008294:	6963      	ldr	r3, [r4, #20]
 8008296:	3001      	adds	r0, #1
 8008298:	4283      	cmp	r3, r0
 800829a:	d004      	beq.n	80082a6 <__swbuf_r+0x62>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	07db      	lsls	r3, r3, #31
 80082a0:	d506      	bpl.n	80082b0 <__swbuf_r+0x6c>
 80082a2:	2e0a      	cmp	r6, #10
 80082a4:	d104      	bne.n	80082b0 <__swbuf_r+0x6c>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4628      	mov	r0, r5
 80082aa:	f000 f911 	bl	80084d0 <_fflush_r>
 80082ae:	b988      	cbnz	r0, 80082d4 <__swbuf_r+0x90>
 80082b0:	4638      	mov	r0, r7
 80082b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b4:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <__swbuf_r+0x9c>)
 80082b6:	429c      	cmp	r4, r3
 80082b8:	d101      	bne.n	80082be <__swbuf_r+0x7a>
 80082ba:	68ac      	ldr	r4, [r5, #8]
 80082bc:	e7cf      	b.n	800825e <__swbuf_r+0x1a>
 80082be:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <__swbuf_r+0xa0>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	bf08      	it	eq
 80082c4:	68ec      	ldreq	r4, [r5, #12]
 80082c6:	e7ca      	b.n	800825e <__swbuf_r+0x1a>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 f80c 	bl	80082e8 <__swsetup_r>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d0cb      	beq.n	800826c <__swbuf_r+0x28>
 80082d4:	f04f 37ff 	mov.w	r7, #4294967295
 80082d8:	e7ea      	b.n	80082b0 <__swbuf_r+0x6c>
 80082da:	bf00      	nop
 80082dc:	0800c234 	.word	0x0800c234
 80082e0:	0800c254 	.word	0x0800c254
 80082e4:	0800c214 	.word	0x0800c214

080082e8 <__swsetup_r>:
 80082e8:	4b32      	ldr	r3, [pc, #200]	; (80083b4 <__swsetup_r+0xcc>)
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	681d      	ldr	r5, [r3, #0]
 80082ee:	4606      	mov	r6, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	b125      	cbz	r5, 80082fe <__swsetup_r+0x16>
 80082f4:	69ab      	ldr	r3, [r5, #24]
 80082f6:	b913      	cbnz	r3, 80082fe <__swsetup_r+0x16>
 80082f8:	4628      	mov	r0, r5
 80082fa:	f000 f97d 	bl	80085f8 <__sinit>
 80082fe:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <__swsetup_r+0xd0>)
 8008300:	429c      	cmp	r4, r3
 8008302:	d10f      	bne.n	8008324 <__swsetup_r+0x3c>
 8008304:	686c      	ldr	r4, [r5, #4]
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800830c:	0719      	lsls	r1, r3, #28
 800830e:	d42c      	bmi.n	800836a <__swsetup_r+0x82>
 8008310:	06dd      	lsls	r5, r3, #27
 8008312:	d411      	bmi.n	8008338 <__swsetup_r+0x50>
 8008314:	2309      	movs	r3, #9
 8008316:	6033      	str	r3, [r6, #0]
 8008318:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	f04f 30ff 	mov.w	r0, #4294967295
 8008322:	e03e      	b.n	80083a2 <__swsetup_r+0xba>
 8008324:	4b25      	ldr	r3, [pc, #148]	; (80083bc <__swsetup_r+0xd4>)
 8008326:	429c      	cmp	r4, r3
 8008328:	d101      	bne.n	800832e <__swsetup_r+0x46>
 800832a:	68ac      	ldr	r4, [r5, #8]
 800832c:	e7eb      	b.n	8008306 <__swsetup_r+0x1e>
 800832e:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <__swsetup_r+0xd8>)
 8008330:	429c      	cmp	r4, r3
 8008332:	bf08      	it	eq
 8008334:	68ec      	ldreq	r4, [r5, #12]
 8008336:	e7e6      	b.n	8008306 <__swsetup_r+0x1e>
 8008338:	0758      	lsls	r0, r3, #29
 800833a:	d512      	bpl.n	8008362 <__swsetup_r+0x7a>
 800833c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833e:	b141      	cbz	r1, 8008352 <__swsetup_r+0x6a>
 8008340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008344:	4299      	cmp	r1, r3
 8008346:	d002      	beq.n	800834e <__swsetup_r+0x66>
 8008348:	4630      	mov	r0, r6
 800834a:	f000 fa59 	bl	8008800 <_free_r>
 800834e:	2300      	movs	r3, #0
 8008350:	6363      	str	r3, [r4, #52]	; 0x34
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	2300      	movs	r3, #0
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0308 	orr.w	r3, r3, #8
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	b94b      	cbnz	r3, 8008382 <__swsetup_r+0x9a>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008378:	d003      	beq.n	8008382 <__swsetup_r+0x9a>
 800837a:	4621      	mov	r1, r4
 800837c:	4630      	mov	r0, r6
 800837e:	f000 f9ff 	bl	8008780 <__smakebuf_r>
 8008382:	89a0      	ldrh	r0, [r4, #12]
 8008384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008388:	f010 0301 	ands.w	r3, r0, #1
 800838c:	d00a      	beq.n	80083a4 <__swsetup_r+0xbc>
 800838e:	2300      	movs	r3, #0
 8008390:	60a3      	str	r3, [r4, #8]
 8008392:	6963      	ldr	r3, [r4, #20]
 8008394:	425b      	negs	r3, r3
 8008396:	61a3      	str	r3, [r4, #24]
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	b943      	cbnz	r3, 80083ae <__swsetup_r+0xc6>
 800839c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083a0:	d1ba      	bne.n	8008318 <__swsetup_r+0x30>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	0781      	lsls	r1, r0, #30
 80083a6:	bf58      	it	pl
 80083a8:	6963      	ldrpl	r3, [r4, #20]
 80083aa:	60a3      	str	r3, [r4, #8]
 80083ac:	e7f4      	b.n	8008398 <__swsetup_r+0xb0>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e7f7      	b.n	80083a2 <__swsetup_r+0xba>
 80083b2:	bf00      	nop
 80083b4:	20000028 	.word	0x20000028
 80083b8:	0800c234 	.word	0x0800c234
 80083bc:	0800c254 	.word	0x0800c254
 80083c0:	0800c214 	.word	0x0800c214

080083c4 <__sflush_r>:
 80083c4:	898a      	ldrh	r2, [r1, #12]
 80083c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ca:	4605      	mov	r5, r0
 80083cc:	0710      	lsls	r0, r2, #28
 80083ce:	460c      	mov	r4, r1
 80083d0:	d458      	bmi.n	8008484 <__sflush_r+0xc0>
 80083d2:	684b      	ldr	r3, [r1, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc05      	bgt.n	80083e4 <__sflush_r+0x20>
 80083d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dc02      	bgt.n	80083e4 <__sflush_r+0x20>
 80083de:	2000      	movs	r0, #0
 80083e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083e6:	2e00      	cmp	r6, #0
 80083e8:	d0f9      	beq.n	80083de <__sflush_r+0x1a>
 80083ea:	2300      	movs	r3, #0
 80083ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083f0:	682f      	ldr	r7, [r5, #0]
 80083f2:	602b      	str	r3, [r5, #0]
 80083f4:	d032      	beq.n	800845c <__sflush_r+0x98>
 80083f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	075a      	lsls	r2, r3, #29
 80083fc:	d505      	bpl.n	800840a <__sflush_r+0x46>
 80083fe:	6863      	ldr	r3, [r4, #4]
 8008400:	1ac0      	subs	r0, r0, r3
 8008402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008404:	b10b      	cbz	r3, 800840a <__sflush_r+0x46>
 8008406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008408:	1ac0      	subs	r0, r0, r3
 800840a:	2300      	movs	r3, #0
 800840c:	4602      	mov	r2, r0
 800840e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008410:	6a21      	ldr	r1, [r4, #32]
 8008412:	4628      	mov	r0, r5
 8008414:	47b0      	blx	r6
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	d106      	bne.n	800842a <__sflush_r+0x66>
 800841c:	6829      	ldr	r1, [r5, #0]
 800841e:	291d      	cmp	r1, #29
 8008420:	d82c      	bhi.n	800847c <__sflush_r+0xb8>
 8008422:	4a2a      	ldr	r2, [pc, #168]	; (80084cc <__sflush_r+0x108>)
 8008424:	40ca      	lsrs	r2, r1
 8008426:	07d6      	lsls	r6, r2, #31
 8008428:	d528      	bpl.n	800847c <__sflush_r+0xb8>
 800842a:	2200      	movs	r2, #0
 800842c:	6062      	str	r2, [r4, #4]
 800842e:	04d9      	lsls	r1, r3, #19
 8008430:	6922      	ldr	r2, [r4, #16]
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	d504      	bpl.n	8008440 <__sflush_r+0x7c>
 8008436:	1c42      	adds	r2, r0, #1
 8008438:	d101      	bne.n	800843e <__sflush_r+0x7a>
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	b903      	cbnz	r3, 8008440 <__sflush_r+0x7c>
 800843e:	6560      	str	r0, [r4, #84]	; 0x54
 8008440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008442:	602f      	str	r7, [r5, #0]
 8008444:	2900      	cmp	r1, #0
 8008446:	d0ca      	beq.n	80083de <__sflush_r+0x1a>
 8008448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800844c:	4299      	cmp	r1, r3
 800844e:	d002      	beq.n	8008456 <__sflush_r+0x92>
 8008450:	4628      	mov	r0, r5
 8008452:	f000 f9d5 	bl	8008800 <_free_r>
 8008456:	2000      	movs	r0, #0
 8008458:	6360      	str	r0, [r4, #52]	; 0x34
 800845a:	e7c1      	b.n	80083e0 <__sflush_r+0x1c>
 800845c:	6a21      	ldr	r1, [r4, #32]
 800845e:	2301      	movs	r3, #1
 8008460:	4628      	mov	r0, r5
 8008462:	47b0      	blx	r6
 8008464:	1c41      	adds	r1, r0, #1
 8008466:	d1c7      	bne.n	80083f8 <__sflush_r+0x34>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0c4      	beq.n	80083f8 <__sflush_r+0x34>
 800846e:	2b1d      	cmp	r3, #29
 8008470:	d001      	beq.n	8008476 <__sflush_r+0xb2>
 8008472:	2b16      	cmp	r3, #22
 8008474:	d101      	bne.n	800847a <__sflush_r+0xb6>
 8008476:	602f      	str	r7, [r5, #0]
 8008478:	e7b1      	b.n	80083de <__sflush_r+0x1a>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	e7ad      	b.n	80083e0 <__sflush_r+0x1c>
 8008484:	690f      	ldr	r7, [r1, #16]
 8008486:	2f00      	cmp	r7, #0
 8008488:	d0a9      	beq.n	80083de <__sflush_r+0x1a>
 800848a:	0793      	lsls	r3, r2, #30
 800848c:	680e      	ldr	r6, [r1, #0]
 800848e:	bf08      	it	eq
 8008490:	694b      	ldreq	r3, [r1, #20]
 8008492:	600f      	str	r7, [r1, #0]
 8008494:	bf18      	it	ne
 8008496:	2300      	movne	r3, #0
 8008498:	eba6 0807 	sub.w	r8, r6, r7
 800849c:	608b      	str	r3, [r1, #8]
 800849e:	f1b8 0f00 	cmp.w	r8, #0
 80084a2:	dd9c      	ble.n	80083de <__sflush_r+0x1a>
 80084a4:	6a21      	ldr	r1, [r4, #32]
 80084a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084a8:	4643      	mov	r3, r8
 80084aa:	463a      	mov	r2, r7
 80084ac:	4628      	mov	r0, r5
 80084ae:	47b0      	blx	r6
 80084b0:	2800      	cmp	r0, #0
 80084b2:	dc06      	bgt.n	80084c2 <__sflush_r+0xfe>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ba:	81a3      	strh	r3, [r4, #12]
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	e78e      	b.n	80083e0 <__sflush_r+0x1c>
 80084c2:	4407      	add	r7, r0
 80084c4:	eba8 0800 	sub.w	r8, r8, r0
 80084c8:	e7e9      	b.n	800849e <__sflush_r+0xda>
 80084ca:	bf00      	nop
 80084cc:	20400001 	.word	0x20400001

080084d0 <_fflush_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	690b      	ldr	r3, [r1, #16]
 80084d4:	4605      	mov	r5, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b913      	cbnz	r3, 80084e0 <_fflush_r+0x10>
 80084da:	2500      	movs	r5, #0
 80084dc:	4628      	mov	r0, r5
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	b118      	cbz	r0, 80084ea <_fflush_r+0x1a>
 80084e2:	6983      	ldr	r3, [r0, #24]
 80084e4:	b90b      	cbnz	r3, 80084ea <_fflush_r+0x1a>
 80084e6:	f000 f887 	bl	80085f8 <__sinit>
 80084ea:	4b14      	ldr	r3, [pc, #80]	; (800853c <_fflush_r+0x6c>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	d11b      	bne.n	8008528 <_fflush_r+0x58>
 80084f0:	686c      	ldr	r4, [r5, #4]
 80084f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0ef      	beq.n	80084da <_fflush_r+0xa>
 80084fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084fc:	07d0      	lsls	r0, r2, #31
 80084fe:	d404      	bmi.n	800850a <_fflush_r+0x3a>
 8008500:	0599      	lsls	r1, r3, #22
 8008502:	d402      	bmi.n	800850a <_fflush_r+0x3a>
 8008504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008506:	f000 f915 	bl	8008734 <__retarget_lock_acquire_recursive>
 800850a:	4628      	mov	r0, r5
 800850c:	4621      	mov	r1, r4
 800850e:	f7ff ff59 	bl	80083c4 <__sflush_r>
 8008512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008514:	07da      	lsls	r2, r3, #31
 8008516:	4605      	mov	r5, r0
 8008518:	d4e0      	bmi.n	80084dc <_fflush_r+0xc>
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	059b      	lsls	r3, r3, #22
 800851e:	d4dd      	bmi.n	80084dc <_fflush_r+0xc>
 8008520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008522:	f000 f908 	bl	8008736 <__retarget_lock_release_recursive>
 8008526:	e7d9      	b.n	80084dc <_fflush_r+0xc>
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <_fflush_r+0x70>)
 800852a:	429c      	cmp	r4, r3
 800852c:	d101      	bne.n	8008532 <_fflush_r+0x62>
 800852e:	68ac      	ldr	r4, [r5, #8]
 8008530:	e7df      	b.n	80084f2 <_fflush_r+0x22>
 8008532:	4b04      	ldr	r3, [pc, #16]	; (8008544 <_fflush_r+0x74>)
 8008534:	429c      	cmp	r4, r3
 8008536:	bf08      	it	eq
 8008538:	68ec      	ldreq	r4, [r5, #12]
 800853a:	e7da      	b.n	80084f2 <_fflush_r+0x22>
 800853c:	0800c234 	.word	0x0800c234
 8008540:	0800c254 	.word	0x0800c254
 8008544:	0800c214 	.word	0x0800c214

08008548 <std>:
 8008548:	2300      	movs	r3, #0
 800854a:	b510      	push	{r4, lr}
 800854c:	4604      	mov	r4, r0
 800854e:	e9c0 3300 	strd	r3, r3, [r0]
 8008552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008556:	6083      	str	r3, [r0, #8]
 8008558:	8181      	strh	r1, [r0, #12]
 800855a:	6643      	str	r3, [r0, #100]	; 0x64
 800855c:	81c2      	strh	r2, [r0, #14]
 800855e:	6183      	str	r3, [r0, #24]
 8008560:	4619      	mov	r1, r3
 8008562:	2208      	movs	r2, #8
 8008564:	305c      	adds	r0, #92	; 0x5c
 8008566:	f7ff fdcf 	bl	8008108 <memset>
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <std+0x38>)
 800856c:	6263      	str	r3, [r4, #36]	; 0x24
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <std+0x3c>)
 8008570:	62a3      	str	r3, [r4, #40]	; 0x28
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <std+0x40>)
 8008574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <std+0x44>)
 8008578:	6224      	str	r4, [r4, #32]
 800857a:	6323      	str	r3, [r4, #48]	; 0x30
 800857c:	bd10      	pop	{r4, pc}
 800857e:	bf00      	nop
 8008580:	08008f55 	.word	0x08008f55
 8008584:	08008f77 	.word	0x08008f77
 8008588:	08008faf 	.word	0x08008faf
 800858c:	08008fd3 	.word	0x08008fd3

08008590 <_cleanup_r>:
 8008590:	4901      	ldr	r1, [pc, #4]	; (8008598 <_cleanup_r+0x8>)
 8008592:	f000 b8af 	b.w	80086f4 <_fwalk_reent>
 8008596:	bf00      	nop
 8008598:	080084d1 	.word	0x080084d1

0800859c <__sfmoreglue>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	1e4a      	subs	r2, r1, #1
 80085a0:	2568      	movs	r5, #104	; 0x68
 80085a2:	4355      	muls	r5, r2
 80085a4:	460e      	mov	r6, r1
 80085a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085aa:	f000 f979 	bl	80088a0 <_malloc_r>
 80085ae:	4604      	mov	r4, r0
 80085b0:	b140      	cbz	r0, 80085c4 <__sfmoreglue+0x28>
 80085b2:	2100      	movs	r1, #0
 80085b4:	e9c0 1600 	strd	r1, r6, [r0]
 80085b8:	300c      	adds	r0, #12
 80085ba:	60a0      	str	r0, [r4, #8]
 80085bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085c0:	f7ff fda2 	bl	8008108 <memset>
 80085c4:	4620      	mov	r0, r4
 80085c6:	bd70      	pop	{r4, r5, r6, pc}

080085c8 <__sfp_lock_acquire>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__sfp_lock_acquire+0x8>)
 80085ca:	f000 b8b3 	b.w	8008734 <__retarget_lock_acquire_recursive>
 80085ce:	bf00      	nop
 80085d0:	20000458 	.word	0x20000458

080085d4 <__sfp_lock_release>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__sfp_lock_release+0x8>)
 80085d6:	f000 b8ae 	b.w	8008736 <__retarget_lock_release_recursive>
 80085da:	bf00      	nop
 80085dc:	20000458 	.word	0x20000458

080085e0 <__sinit_lock_acquire>:
 80085e0:	4801      	ldr	r0, [pc, #4]	; (80085e8 <__sinit_lock_acquire+0x8>)
 80085e2:	f000 b8a7 	b.w	8008734 <__retarget_lock_acquire_recursive>
 80085e6:	bf00      	nop
 80085e8:	20000453 	.word	0x20000453

080085ec <__sinit_lock_release>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__sinit_lock_release+0x8>)
 80085ee:	f000 b8a2 	b.w	8008736 <__retarget_lock_release_recursive>
 80085f2:	bf00      	nop
 80085f4:	20000453 	.word	0x20000453

080085f8 <__sinit>:
 80085f8:	b510      	push	{r4, lr}
 80085fa:	4604      	mov	r4, r0
 80085fc:	f7ff fff0 	bl	80085e0 <__sinit_lock_acquire>
 8008600:	69a3      	ldr	r3, [r4, #24]
 8008602:	b11b      	cbz	r3, 800860c <__sinit+0x14>
 8008604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008608:	f7ff bff0 	b.w	80085ec <__sinit_lock_release>
 800860c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008610:	6523      	str	r3, [r4, #80]	; 0x50
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <__sinit+0x68>)
 8008614:	4a13      	ldr	r2, [pc, #76]	; (8008664 <__sinit+0x6c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	62a2      	str	r2, [r4, #40]	; 0x28
 800861a:	42a3      	cmp	r3, r4
 800861c:	bf04      	itt	eq
 800861e:	2301      	moveq	r3, #1
 8008620:	61a3      	streq	r3, [r4, #24]
 8008622:	4620      	mov	r0, r4
 8008624:	f000 f820 	bl	8008668 <__sfp>
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	4620      	mov	r0, r4
 800862c:	f000 f81c 	bl	8008668 <__sfp>
 8008630:	60a0      	str	r0, [r4, #8]
 8008632:	4620      	mov	r0, r4
 8008634:	f000 f818 	bl	8008668 <__sfp>
 8008638:	2200      	movs	r2, #0
 800863a:	60e0      	str	r0, [r4, #12]
 800863c:	2104      	movs	r1, #4
 800863e:	6860      	ldr	r0, [r4, #4]
 8008640:	f7ff ff82 	bl	8008548 <std>
 8008644:	68a0      	ldr	r0, [r4, #8]
 8008646:	2201      	movs	r2, #1
 8008648:	2109      	movs	r1, #9
 800864a:	f7ff ff7d 	bl	8008548 <std>
 800864e:	68e0      	ldr	r0, [r4, #12]
 8008650:	2202      	movs	r2, #2
 8008652:	2112      	movs	r1, #18
 8008654:	f7ff ff78 	bl	8008548 <std>
 8008658:	2301      	movs	r3, #1
 800865a:	61a3      	str	r3, [r4, #24]
 800865c:	e7d2      	b.n	8008604 <__sinit+0xc>
 800865e:	bf00      	nop
 8008660:	0800c210 	.word	0x0800c210
 8008664:	08008591 	.word	0x08008591

08008668 <__sfp>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	4607      	mov	r7, r0
 800866c:	f7ff ffac 	bl	80085c8 <__sfp_lock_acquire>
 8008670:	4b1e      	ldr	r3, [pc, #120]	; (80086ec <__sfp+0x84>)
 8008672:	681e      	ldr	r6, [r3, #0]
 8008674:	69b3      	ldr	r3, [r6, #24]
 8008676:	b913      	cbnz	r3, 800867e <__sfp+0x16>
 8008678:	4630      	mov	r0, r6
 800867a:	f7ff ffbd 	bl	80085f8 <__sinit>
 800867e:	3648      	adds	r6, #72	; 0x48
 8008680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008684:	3b01      	subs	r3, #1
 8008686:	d503      	bpl.n	8008690 <__sfp+0x28>
 8008688:	6833      	ldr	r3, [r6, #0]
 800868a:	b30b      	cbz	r3, 80086d0 <__sfp+0x68>
 800868c:	6836      	ldr	r6, [r6, #0]
 800868e:	e7f7      	b.n	8008680 <__sfp+0x18>
 8008690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008694:	b9d5      	cbnz	r5, 80086cc <__sfp+0x64>
 8008696:	4b16      	ldr	r3, [pc, #88]	; (80086f0 <__sfp+0x88>)
 8008698:	60e3      	str	r3, [r4, #12]
 800869a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800869e:	6665      	str	r5, [r4, #100]	; 0x64
 80086a0:	f000 f847 	bl	8008732 <__retarget_lock_init_recursive>
 80086a4:	f7ff ff96 	bl	80085d4 <__sfp_lock_release>
 80086a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086b0:	6025      	str	r5, [r4, #0]
 80086b2:	61a5      	str	r5, [r4, #24]
 80086b4:	2208      	movs	r2, #8
 80086b6:	4629      	mov	r1, r5
 80086b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086bc:	f7ff fd24 	bl	8008108 <memset>
 80086c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086c8:	4620      	mov	r0, r4
 80086ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086cc:	3468      	adds	r4, #104	; 0x68
 80086ce:	e7d9      	b.n	8008684 <__sfp+0x1c>
 80086d0:	2104      	movs	r1, #4
 80086d2:	4638      	mov	r0, r7
 80086d4:	f7ff ff62 	bl	800859c <__sfmoreglue>
 80086d8:	4604      	mov	r4, r0
 80086da:	6030      	str	r0, [r6, #0]
 80086dc:	2800      	cmp	r0, #0
 80086de:	d1d5      	bne.n	800868c <__sfp+0x24>
 80086e0:	f7ff ff78 	bl	80085d4 <__sfp_lock_release>
 80086e4:	230c      	movs	r3, #12
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	e7ee      	b.n	80086c8 <__sfp+0x60>
 80086ea:	bf00      	nop
 80086ec:	0800c210 	.word	0x0800c210
 80086f0:	ffff0001 	.word	0xffff0001

080086f4 <_fwalk_reent>:
 80086f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	4606      	mov	r6, r0
 80086fa:	4688      	mov	r8, r1
 80086fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008700:	2700      	movs	r7, #0
 8008702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008706:	f1b9 0901 	subs.w	r9, r9, #1
 800870a:	d505      	bpl.n	8008718 <_fwalk_reent+0x24>
 800870c:	6824      	ldr	r4, [r4, #0]
 800870e:	2c00      	cmp	r4, #0
 8008710:	d1f7      	bne.n	8008702 <_fwalk_reent+0xe>
 8008712:	4638      	mov	r0, r7
 8008714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008718:	89ab      	ldrh	r3, [r5, #12]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d907      	bls.n	800872e <_fwalk_reent+0x3a>
 800871e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008722:	3301      	adds	r3, #1
 8008724:	d003      	beq.n	800872e <_fwalk_reent+0x3a>
 8008726:	4629      	mov	r1, r5
 8008728:	4630      	mov	r0, r6
 800872a:	47c0      	blx	r8
 800872c:	4307      	orrs	r7, r0
 800872e:	3568      	adds	r5, #104	; 0x68
 8008730:	e7e9      	b.n	8008706 <_fwalk_reent+0x12>

08008732 <__retarget_lock_init_recursive>:
 8008732:	4770      	bx	lr

08008734 <__retarget_lock_acquire_recursive>:
 8008734:	4770      	bx	lr

08008736 <__retarget_lock_release_recursive>:
 8008736:	4770      	bx	lr

08008738 <__swhatbuf_r>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	460e      	mov	r6, r1
 800873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008740:	2900      	cmp	r1, #0
 8008742:	b096      	sub	sp, #88	; 0x58
 8008744:	4614      	mov	r4, r2
 8008746:	461d      	mov	r5, r3
 8008748:	da07      	bge.n	800875a <__swhatbuf_r+0x22>
 800874a:	2300      	movs	r3, #0
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	89b3      	ldrh	r3, [r6, #12]
 8008750:	061a      	lsls	r2, r3, #24
 8008752:	d410      	bmi.n	8008776 <__swhatbuf_r+0x3e>
 8008754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008758:	e00e      	b.n	8008778 <__swhatbuf_r+0x40>
 800875a:	466a      	mov	r2, sp
 800875c:	f000 fc60 	bl	8009020 <_fstat_r>
 8008760:	2800      	cmp	r0, #0
 8008762:	dbf2      	blt.n	800874a <__swhatbuf_r+0x12>
 8008764:	9a01      	ldr	r2, [sp, #4]
 8008766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800876a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800876e:	425a      	negs	r2, r3
 8008770:	415a      	adcs	r2, r3
 8008772:	602a      	str	r2, [r5, #0]
 8008774:	e7ee      	b.n	8008754 <__swhatbuf_r+0x1c>
 8008776:	2340      	movs	r3, #64	; 0x40
 8008778:	2000      	movs	r0, #0
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	b016      	add	sp, #88	; 0x58
 800877e:	bd70      	pop	{r4, r5, r6, pc}

08008780 <__smakebuf_r>:
 8008780:	898b      	ldrh	r3, [r1, #12]
 8008782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008784:	079d      	lsls	r5, r3, #30
 8008786:	4606      	mov	r6, r0
 8008788:	460c      	mov	r4, r1
 800878a:	d507      	bpl.n	800879c <__smakebuf_r+0x1c>
 800878c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	2301      	movs	r3, #1
 8008796:	6163      	str	r3, [r4, #20]
 8008798:	b002      	add	sp, #8
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	ab01      	add	r3, sp, #4
 800879e:	466a      	mov	r2, sp
 80087a0:	f7ff ffca 	bl	8008738 <__swhatbuf_r>
 80087a4:	9900      	ldr	r1, [sp, #0]
 80087a6:	4605      	mov	r5, r0
 80087a8:	4630      	mov	r0, r6
 80087aa:	f000 f879 	bl	80088a0 <_malloc_r>
 80087ae:	b948      	cbnz	r0, 80087c4 <__smakebuf_r+0x44>
 80087b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b4:	059a      	lsls	r2, r3, #22
 80087b6:	d4ef      	bmi.n	8008798 <__smakebuf_r+0x18>
 80087b8:	f023 0303 	bic.w	r3, r3, #3
 80087bc:	f043 0302 	orr.w	r3, r3, #2
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	e7e3      	b.n	800878c <__smakebuf_r+0xc>
 80087c4:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <__smakebuf_r+0x7c>)
 80087c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	6020      	str	r0, [r4, #0]
 80087cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	9b00      	ldr	r3, [sp, #0]
 80087d4:	6163      	str	r3, [r4, #20]
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	6120      	str	r0, [r4, #16]
 80087da:	b15b      	cbz	r3, 80087f4 <__smakebuf_r+0x74>
 80087dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e0:	4630      	mov	r0, r6
 80087e2:	f000 fc2f 	bl	8009044 <_isatty_r>
 80087e6:	b128      	cbz	r0, 80087f4 <__smakebuf_r+0x74>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	f043 0301 	orr.w	r3, r3, #1
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	89a0      	ldrh	r0, [r4, #12]
 80087f6:	4305      	orrs	r5, r0
 80087f8:	81a5      	strh	r5, [r4, #12]
 80087fa:	e7cd      	b.n	8008798 <__smakebuf_r+0x18>
 80087fc:	08008591 	.word	0x08008591

08008800 <_free_r>:
 8008800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008802:	2900      	cmp	r1, #0
 8008804:	d048      	beq.n	8008898 <_free_r+0x98>
 8008806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880a:	9001      	str	r0, [sp, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f1a1 0404 	sub.w	r4, r1, #4
 8008812:	bfb8      	it	lt
 8008814:	18e4      	addlt	r4, r4, r3
 8008816:	f000 fc5f 	bl	80090d8 <__malloc_lock>
 800881a:	4a20      	ldr	r2, [pc, #128]	; (800889c <_free_r+0x9c>)
 800881c:	9801      	ldr	r0, [sp, #4]
 800881e:	6813      	ldr	r3, [r2, #0]
 8008820:	4615      	mov	r5, r2
 8008822:	b933      	cbnz	r3, 8008832 <_free_r+0x32>
 8008824:	6063      	str	r3, [r4, #4]
 8008826:	6014      	str	r4, [r2, #0]
 8008828:	b003      	add	sp, #12
 800882a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800882e:	f000 bc59 	b.w	80090e4 <__malloc_unlock>
 8008832:	42a3      	cmp	r3, r4
 8008834:	d90b      	bls.n	800884e <_free_r+0x4e>
 8008836:	6821      	ldr	r1, [r4, #0]
 8008838:	1862      	adds	r2, r4, r1
 800883a:	4293      	cmp	r3, r2
 800883c:	bf04      	itt	eq
 800883e:	681a      	ldreq	r2, [r3, #0]
 8008840:	685b      	ldreq	r3, [r3, #4]
 8008842:	6063      	str	r3, [r4, #4]
 8008844:	bf04      	itt	eq
 8008846:	1852      	addeq	r2, r2, r1
 8008848:	6022      	streq	r2, [r4, #0]
 800884a:	602c      	str	r4, [r5, #0]
 800884c:	e7ec      	b.n	8008828 <_free_r+0x28>
 800884e:	461a      	mov	r2, r3
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	b10b      	cbz	r3, 8008858 <_free_r+0x58>
 8008854:	42a3      	cmp	r3, r4
 8008856:	d9fa      	bls.n	800884e <_free_r+0x4e>
 8008858:	6811      	ldr	r1, [r2, #0]
 800885a:	1855      	adds	r5, r2, r1
 800885c:	42a5      	cmp	r5, r4
 800885e:	d10b      	bne.n	8008878 <_free_r+0x78>
 8008860:	6824      	ldr	r4, [r4, #0]
 8008862:	4421      	add	r1, r4
 8008864:	1854      	adds	r4, r2, r1
 8008866:	42a3      	cmp	r3, r4
 8008868:	6011      	str	r1, [r2, #0]
 800886a:	d1dd      	bne.n	8008828 <_free_r+0x28>
 800886c:	681c      	ldr	r4, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	6053      	str	r3, [r2, #4]
 8008872:	4421      	add	r1, r4
 8008874:	6011      	str	r1, [r2, #0]
 8008876:	e7d7      	b.n	8008828 <_free_r+0x28>
 8008878:	d902      	bls.n	8008880 <_free_r+0x80>
 800887a:	230c      	movs	r3, #12
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	e7d3      	b.n	8008828 <_free_r+0x28>
 8008880:	6825      	ldr	r5, [r4, #0]
 8008882:	1961      	adds	r1, r4, r5
 8008884:	428b      	cmp	r3, r1
 8008886:	bf04      	itt	eq
 8008888:	6819      	ldreq	r1, [r3, #0]
 800888a:	685b      	ldreq	r3, [r3, #4]
 800888c:	6063      	str	r3, [r4, #4]
 800888e:	bf04      	itt	eq
 8008890:	1949      	addeq	r1, r1, r5
 8008892:	6021      	streq	r1, [r4, #0]
 8008894:	6054      	str	r4, [r2, #4]
 8008896:	e7c7      	b.n	8008828 <_free_r+0x28>
 8008898:	b003      	add	sp, #12
 800889a:	bd30      	pop	{r4, r5, pc}
 800889c:	200000d0 	.word	0x200000d0

080088a0 <_malloc_r>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	1ccd      	adds	r5, r1, #3
 80088a4:	f025 0503 	bic.w	r5, r5, #3
 80088a8:	3508      	adds	r5, #8
 80088aa:	2d0c      	cmp	r5, #12
 80088ac:	bf38      	it	cc
 80088ae:	250c      	movcc	r5, #12
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	4606      	mov	r6, r0
 80088b4:	db01      	blt.n	80088ba <_malloc_r+0x1a>
 80088b6:	42a9      	cmp	r1, r5
 80088b8:	d903      	bls.n	80088c2 <_malloc_r+0x22>
 80088ba:	230c      	movs	r3, #12
 80088bc:	6033      	str	r3, [r6, #0]
 80088be:	2000      	movs	r0, #0
 80088c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c2:	f000 fc09 	bl	80090d8 <__malloc_lock>
 80088c6:	4921      	ldr	r1, [pc, #132]	; (800894c <_malloc_r+0xac>)
 80088c8:	680a      	ldr	r2, [r1, #0]
 80088ca:	4614      	mov	r4, r2
 80088cc:	b99c      	cbnz	r4, 80088f6 <_malloc_r+0x56>
 80088ce:	4f20      	ldr	r7, [pc, #128]	; (8008950 <_malloc_r+0xb0>)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	b923      	cbnz	r3, 80088de <_malloc_r+0x3e>
 80088d4:	4621      	mov	r1, r4
 80088d6:	4630      	mov	r0, r6
 80088d8:	f000 fb2c 	bl	8008f34 <_sbrk_r>
 80088dc:	6038      	str	r0, [r7, #0]
 80088de:	4629      	mov	r1, r5
 80088e0:	4630      	mov	r0, r6
 80088e2:	f000 fb27 	bl	8008f34 <_sbrk_r>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d123      	bne.n	8008932 <_malloc_r+0x92>
 80088ea:	230c      	movs	r3, #12
 80088ec:	6033      	str	r3, [r6, #0]
 80088ee:	4630      	mov	r0, r6
 80088f0:	f000 fbf8 	bl	80090e4 <__malloc_unlock>
 80088f4:	e7e3      	b.n	80088be <_malloc_r+0x1e>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	1b5b      	subs	r3, r3, r5
 80088fa:	d417      	bmi.n	800892c <_malloc_r+0x8c>
 80088fc:	2b0b      	cmp	r3, #11
 80088fe:	d903      	bls.n	8008908 <_malloc_r+0x68>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	441c      	add	r4, r3
 8008904:	6025      	str	r5, [r4, #0]
 8008906:	e004      	b.n	8008912 <_malloc_r+0x72>
 8008908:	6863      	ldr	r3, [r4, #4]
 800890a:	42a2      	cmp	r2, r4
 800890c:	bf0c      	ite	eq
 800890e:	600b      	streq	r3, [r1, #0]
 8008910:	6053      	strne	r3, [r2, #4]
 8008912:	4630      	mov	r0, r6
 8008914:	f000 fbe6 	bl	80090e4 <__malloc_unlock>
 8008918:	f104 000b 	add.w	r0, r4, #11
 800891c:	1d23      	adds	r3, r4, #4
 800891e:	f020 0007 	bic.w	r0, r0, #7
 8008922:	1ac2      	subs	r2, r0, r3
 8008924:	d0cc      	beq.n	80088c0 <_malloc_r+0x20>
 8008926:	1a1b      	subs	r3, r3, r0
 8008928:	50a3      	str	r3, [r4, r2]
 800892a:	e7c9      	b.n	80088c0 <_malloc_r+0x20>
 800892c:	4622      	mov	r2, r4
 800892e:	6864      	ldr	r4, [r4, #4]
 8008930:	e7cc      	b.n	80088cc <_malloc_r+0x2c>
 8008932:	1cc4      	adds	r4, r0, #3
 8008934:	f024 0403 	bic.w	r4, r4, #3
 8008938:	42a0      	cmp	r0, r4
 800893a:	d0e3      	beq.n	8008904 <_malloc_r+0x64>
 800893c:	1a21      	subs	r1, r4, r0
 800893e:	4630      	mov	r0, r6
 8008940:	f000 faf8 	bl	8008f34 <_sbrk_r>
 8008944:	3001      	adds	r0, #1
 8008946:	d1dd      	bne.n	8008904 <_malloc_r+0x64>
 8008948:	e7cf      	b.n	80088ea <_malloc_r+0x4a>
 800894a:	bf00      	nop
 800894c:	200000d0 	.word	0x200000d0
 8008950:	200000d4 	.word	0x200000d4

08008954 <__ssputs_r>:
 8008954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	688e      	ldr	r6, [r1, #8]
 800895a:	429e      	cmp	r6, r3
 800895c:	4682      	mov	sl, r0
 800895e:	460c      	mov	r4, r1
 8008960:	4690      	mov	r8, r2
 8008962:	461f      	mov	r7, r3
 8008964:	d838      	bhi.n	80089d8 <__ssputs_r+0x84>
 8008966:	898a      	ldrh	r2, [r1, #12]
 8008968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800896c:	d032      	beq.n	80089d4 <__ssputs_r+0x80>
 800896e:	6825      	ldr	r5, [r4, #0]
 8008970:	6909      	ldr	r1, [r1, #16]
 8008972:	eba5 0901 	sub.w	r9, r5, r1
 8008976:	6965      	ldr	r5, [r4, #20]
 8008978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800897c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008980:	3301      	adds	r3, #1
 8008982:	444b      	add	r3, r9
 8008984:	106d      	asrs	r5, r5, #1
 8008986:	429d      	cmp	r5, r3
 8008988:	bf38      	it	cc
 800898a:	461d      	movcc	r5, r3
 800898c:	0553      	lsls	r3, r2, #21
 800898e:	d531      	bpl.n	80089f4 <__ssputs_r+0xa0>
 8008990:	4629      	mov	r1, r5
 8008992:	f7ff ff85 	bl	80088a0 <_malloc_r>
 8008996:	4606      	mov	r6, r0
 8008998:	b950      	cbnz	r0, 80089b0 <__ssputs_r+0x5c>
 800899a:	230c      	movs	r3, #12
 800899c:	f8ca 3000 	str.w	r3, [sl]
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b0:	6921      	ldr	r1, [r4, #16]
 80089b2:	464a      	mov	r2, r9
 80089b4:	f000 fb68 	bl	8009088 <memcpy>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c2:	81a3      	strh	r3, [r4, #12]
 80089c4:	6126      	str	r6, [r4, #16]
 80089c6:	6165      	str	r5, [r4, #20]
 80089c8:	444e      	add	r6, r9
 80089ca:	eba5 0509 	sub.w	r5, r5, r9
 80089ce:	6026      	str	r6, [r4, #0]
 80089d0:	60a5      	str	r5, [r4, #8]
 80089d2:	463e      	mov	r6, r7
 80089d4:	42be      	cmp	r6, r7
 80089d6:	d900      	bls.n	80089da <__ssputs_r+0x86>
 80089d8:	463e      	mov	r6, r7
 80089da:	4632      	mov	r2, r6
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	4641      	mov	r1, r8
 80089e0:	f000 fb60 	bl	80090a4 <memmove>
 80089e4:	68a3      	ldr	r3, [r4, #8]
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	1b9b      	subs	r3, r3, r6
 80089ea:	4432      	add	r2, r6
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6022      	str	r2, [r4, #0]
 80089f0:	2000      	movs	r0, #0
 80089f2:	e7db      	b.n	80089ac <__ssputs_r+0x58>
 80089f4:	462a      	mov	r2, r5
 80089f6:	f000 fb7b 	bl	80090f0 <_realloc_r>
 80089fa:	4606      	mov	r6, r0
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d1e1      	bne.n	80089c4 <__ssputs_r+0x70>
 8008a00:	6921      	ldr	r1, [r4, #16]
 8008a02:	4650      	mov	r0, sl
 8008a04:	f7ff fefc 	bl	8008800 <_free_r>
 8008a08:	e7c7      	b.n	800899a <__ssputs_r+0x46>
	...

08008a0c <_svfiprintf_r>:
 8008a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	4698      	mov	r8, r3
 8008a12:	898b      	ldrh	r3, [r1, #12]
 8008a14:	061b      	lsls	r3, r3, #24
 8008a16:	b09d      	sub	sp, #116	; 0x74
 8008a18:	4607      	mov	r7, r0
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	d50e      	bpl.n	8008a3e <_svfiprintf_r+0x32>
 8008a20:	690b      	ldr	r3, [r1, #16]
 8008a22:	b963      	cbnz	r3, 8008a3e <_svfiprintf_r+0x32>
 8008a24:	2140      	movs	r1, #64	; 0x40
 8008a26:	f7ff ff3b 	bl	80088a0 <_malloc_r>
 8008a2a:	6028      	str	r0, [r5, #0]
 8008a2c:	6128      	str	r0, [r5, #16]
 8008a2e:	b920      	cbnz	r0, 8008a3a <_svfiprintf_r+0x2e>
 8008a30:	230c      	movs	r3, #12
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	e0d1      	b.n	8008bde <_svfiprintf_r+0x1d2>
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	616b      	str	r3, [r5, #20]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	2320      	movs	r3, #32
 8008a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a4c:	2330      	movs	r3, #48	; 0x30
 8008a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bf8 <_svfiprintf_r+0x1ec>
 8008a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a56:	f04f 0901 	mov.w	r9, #1
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	469a      	mov	sl, r3
 8008a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a62:	b10a      	cbz	r2, 8008a68 <_svfiprintf_r+0x5c>
 8008a64:	2a25      	cmp	r2, #37	; 0x25
 8008a66:	d1f9      	bne.n	8008a5c <_svfiprintf_r+0x50>
 8008a68:	ebba 0b04 	subs.w	fp, sl, r4
 8008a6c:	d00b      	beq.n	8008a86 <_svfiprintf_r+0x7a>
 8008a6e:	465b      	mov	r3, fp
 8008a70:	4622      	mov	r2, r4
 8008a72:	4629      	mov	r1, r5
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff ff6d 	bl	8008954 <__ssputs_r>
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f000 80aa 	beq.w	8008bd4 <_svfiprintf_r+0x1c8>
 8008a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a82:	445a      	add	r2, fp
 8008a84:	9209      	str	r2, [sp, #36]	; 0x24
 8008a86:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80a2 	beq.w	8008bd4 <_svfiprintf_r+0x1c8>
 8008a90:	2300      	movs	r3, #0
 8008a92:	f04f 32ff 	mov.w	r2, #4294967295
 8008a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a9a:	f10a 0a01 	add.w	sl, sl, #1
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	9307      	str	r3, [sp, #28]
 8008aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8008aa8:	4654      	mov	r4, sl
 8008aaa:	2205      	movs	r2, #5
 8008aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab0:	4851      	ldr	r0, [pc, #324]	; (8008bf8 <_svfiprintf_r+0x1ec>)
 8008ab2:	f7f7 fb8d 	bl	80001d0 <memchr>
 8008ab6:	9a04      	ldr	r2, [sp, #16]
 8008ab8:	b9d8      	cbnz	r0, 8008af2 <_svfiprintf_r+0xe6>
 8008aba:	06d0      	lsls	r0, r2, #27
 8008abc:	bf44      	itt	mi
 8008abe:	2320      	movmi	r3, #32
 8008ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac4:	0711      	lsls	r1, r2, #28
 8008ac6:	bf44      	itt	mi
 8008ac8:	232b      	movmi	r3, #43	; 0x2b
 8008aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ace:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad4:	d015      	beq.n	8008b02 <_svfiprintf_r+0xf6>
 8008ad6:	9a07      	ldr	r2, [sp, #28]
 8008ad8:	4654      	mov	r4, sl
 8008ada:	2000      	movs	r0, #0
 8008adc:	f04f 0c0a 	mov.w	ip, #10
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ae6:	3b30      	subs	r3, #48	; 0x30
 8008ae8:	2b09      	cmp	r3, #9
 8008aea:	d94e      	bls.n	8008b8a <_svfiprintf_r+0x17e>
 8008aec:	b1b0      	cbz	r0, 8008b1c <_svfiprintf_r+0x110>
 8008aee:	9207      	str	r2, [sp, #28]
 8008af0:	e014      	b.n	8008b1c <_svfiprintf_r+0x110>
 8008af2:	eba0 0308 	sub.w	r3, r0, r8
 8008af6:	fa09 f303 	lsl.w	r3, r9, r3
 8008afa:	4313      	orrs	r3, r2
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	46a2      	mov	sl, r4
 8008b00:	e7d2      	b.n	8008aa8 <_svfiprintf_r+0x9c>
 8008b02:	9b03      	ldr	r3, [sp, #12]
 8008b04:	1d19      	adds	r1, r3, #4
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	9103      	str	r1, [sp, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bfbb      	ittet	lt
 8008b0e:	425b      	neglt	r3, r3
 8008b10:	f042 0202 	orrlt.w	r2, r2, #2
 8008b14:	9307      	strge	r3, [sp, #28]
 8008b16:	9307      	strlt	r3, [sp, #28]
 8008b18:	bfb8      	it	lt
 8008b1a:	9204      	strlt	r2, [sp, #16]
 8008b1c:	7823      	ldrb	r3, [r4, #0]
 8008b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b20:	d10c      	bne.n	8008b3c <_svfiprintf_r+0x130>
 8008b22:	7863      	ldrb	r3, [r4, #1]
 8008b24:	2b2a      	cmp	r3, #42	; 0x2a
 8008b26:	d135      	bne.n	8008b94 <_svfiprintf_r+0x188>
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	1d1a      	adds	r2, r3, #4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	9203      	str	r2, [sp, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bfb8      	it	lt
 8008b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b38:	3402      	adds	r4, #2
 8008b3a:	9305      	str	r3, [sp, #20]
 8008b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c08 <_svfiprintf_r+0x1fc>
 8008b40:	7821      	ldrb	r1, [r4, #0]
 8008b42:	2203      	movs	r2, #3
 8008b44:	4650      	mov	r0, sl
 8008b46:	f7f7 fb43 	bl	80001d0 <memchr>
 8008b4a:	b140      	cbz	r0, 8008b5e <_svfiprintf_r+0x152>
 8008b4c:	2340      	movs	r3, #64	; 0x40
 8008b4e:	eba0 000a 	sub.w	r0, r0, sl
 8008b52:	fa03 f000 	lsl.w	r0, r3, r0
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	4303      	orrs	r3, r0
 8008b5a:	3401      	adds	r4, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b62:	4826      	ldr	r0, [pc, #152]	; (8008bfc <_svfiprintf_r+0x1f0>)
 8008b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b68:	2206      	movs	r2, #6
 8008b6a:	f7f7 fb31 	bl	80001d0 <memchr>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d038      	beq.n	8008be4 <_svfiprintf_r+0x1d8>
 8008b72:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <_svfiprintf_r+0x1f4>)
 8008b74:	bb1b      	cbnz	r3, 8008bbe <_svfiprintf_r+0x1b2>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	3307      	adds	r3, #7
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	3308      	adds	r3, #8
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b84:	4433      	add	r3, r6
 8008b86:	9309      	str	r3, [sp, #36]	; 0x24
 8008b88:	e767      	b.n	8008a5a <_svfiprintf_r+0x4e>
 8008b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b8e:	460c      	mov	r4, r1
 8008b90:	2001      	movs	r0, #1
 8008b92:	e7a5      	b.n	8008ae0 <_svfiprintf_r+0xd4>
 8008b94:	2300      	movs	r3, #0
 8008b96:	3401      	adds	r4, #1
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f04f 0c0a 	mov.w	ip, #10
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ba6:	3a30      	subs	r2, #48	; 0x30
 8008ba8:	2a09      	cmp	r2, #9
 8008baa:	d903      	bls.n	8008bb4 <_svfiprintf_r+0x1a8>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0c5      	beq.n	8008b3c <_svfiprintf_r+0x130>
 8008bb0:	9105      	str	r1, [sp, #20]
 8008bb2:	e7c3      	b.n	8008b3c <_svfiprintf_r+0x130>
 8008bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bb8:	4604      	mov	r4, r0
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e7f0      	b.n	8008ba0 <_svfiprintf_r+0x194>
 8008bbe:	ab03      	add	r3, sp, #12
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	462a      	mov	r2, r5
 8008bc4:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <_svfiprintf_r+0x1f8>)
 8008bc6:	a904      	add	r1, sp, #16
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f3af 8000 	nop.w
 8008bce:	1c42      	adds	r2, r0, #1
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	d1d6      	bne.n	8008b82 <_svfiprintf_r+0x176>
 8008bd4:	89ab      	ldrh	r3, [r5, #12]
 8008bd6:	065b      	lsls	r3, r3, #25
 8008bd8:	f53f af2c 	bmi.w	8008a34 <_svfiprintf_r+0x28>
 8008bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bde:	b01d      	add	sp, #116	; 0x74
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	ab03      	add	r3, sp, #12
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	462a      	mov	r2, r5
 8008bea:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <_svfiprintf_r+0x1f8>)
 8008bec:	a904      	add	r1, sp, #16
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f000 f87a 	bl	8008ce8 <_printf_i>
 8008bf4:	e7eb      	b.n	8008bce <_svfiprintf_r+0x1c2>
 8008bf6:	bf00      	nop
 8008bf8:	0800c274 	.word	0x0800c274
 8008bfc:	0800c27e 	.word	0x0800c27e
 8008c00:	00000000 	.word	0x00000000
 8008c04:	08008955 	.word	0x08008955
 8008c08:	0800c27a 	.word	0x0800c27a

08008c0c <_printf_common>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	4616      	mov	r6, r2
 8008c12:	4699      	mov	r9, r3
 8008c14:	688a      	ldr	r2, [r1, #8]
 8008c16:	690b      	ldr	r3, [r1, #16]
 8008c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	bfb8      	it	lt
 8008c20:	4613      	movlt	r3, r2
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c28:	4607      	mov	r7, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b10a      	cbz	r2, 8008c32 <_printf_common+0x26>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0699      	lsls	r1, r3, #26
 8008c36:	bf42      	ittt	mi
 8008c38:	6833      	ldrmi	r3, [r6, #0]
 8008c3a:	3302      	addmi	r3, #2
 8008c3c:	6033      	strmi	r3, [r6, #0]
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	f015 0506 	ands.w	r5, r5, #6
 8008c44:	d106      	bne.n	8008c54 <_printf_common+0x48>
 8008c46:	f104 0a19 	add.w	sl, r4, #25
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	6832      	ldr	r2, [r6, #0]
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	42ab      	cmp	r3, r5
 8008c52:	dc26      	bgt.n	8008ca2 <_printf_common+0x96>
 8008c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c58:	1e13      	subs	r3, r2, #0
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	bf18      	it	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	0692      	lsls	r2, r2, #26
 8008c62:	d42b      	bmi.n	8008cbc <_printf_common+0xb0>
 8008c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c68:	4649      	mov	r1, r9
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	47c0      	blx	r8
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d01e      	beq.n	8008cb0 <_printf_common+0xa4>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	68e5      	ldr	r5, [r4, #12]
 8008c76:	6832      	ldr	r2, [r6, #0]
 8008c78:	f003 0306 	and.w	r3, r3, #6
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	bf08      	it	eq
 8008c80:	1aad      	subeq	r5, r5, r2
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	bf0c      	ite	eq
 8008c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c8c:	2500      	movne	r5, #0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfc4      	itt	gt
 8008c92:	1a9b      	subgt	r3, r3, r2
 8008c94:	18ed      	addgt	r5, r5, r3
 8008c96:	2600      	movs	r6, #0
 8008c98:	341a      	adds	r4, #26
 8008c9a:	42b5      	cmp	r5, r6
 8008c9c:	d11a      	bne.n	8008cd4 <_printf_common+0xc8>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e008      	b.n	8008cb4 <_printf_common+0xa8>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4638      	mov	r0, r7
 8008caa:	47c0      	blx	r8
 8008cac:	3001      	adds	r0, #1
 8008cae:	d103      	bne.n	8008cb8 <_printf_common+0xac>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	3501      	adds	r5, #1
 8008cba:	e7c6      	b.n	8008c4a <_printf_common+0x3e>
 8008cbc:	18e1      	adds	r1, r4, r3
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	2030      	movs	r0, #48	; 0x30
 8008cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cc6:	4422      	add	r2, r4
 8008cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	e7c7      	b.n	8008c64 <_printf_common+0x58>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c0      	blx	r8
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d0e6      	beq.n	8008cb0 <_printf_common+0xa4>
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7d9      	b.n	8008c9a <_printf_common+0x8e>
	...

08008ce8 <_printf_i>:
 8008ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	4691      	mov	r9, r2
 8008cf0:	7e27      	ldrb	r7, [r4, #24]
 8008cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cf4:	2f78      	cmp	r7, #120	; 0x78
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	469a      	mov	sl, r3
 8008cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cfe:	d807      	bhi.n	8008d10 <_printf_i+0x28>
 8008d00:	2f62      	cmp	r7, #98	; 0x62
 8008d02:	d80a      	bhi.n	8008d1a <_printf_i+0x32>
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	f000 80d8 	beq.w	8008eba <_printf_i+0x1d2>
 8008d0a:	2f58      	cmp	r7, #88	; 0x58
 8008d0c:	f000 80a3 	beq.w	8008e56 <_printf_i+0x16e>
 8008d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d18:	e03a      	b.n	8008d90 <_printf_i+0xa8>
 8008d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d1e:	2b15      	cmp	r3, #21
 8008d20:	d8f6      	bhi.n	8008d10 <_printf_i+0x28>
 8008d22:	a001      	add	r0, pc, #4	; (adr r0, 8008d28 <_printf_i+0x40>)
 8008d24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d11 	.word	0x08008d11
 8008d34:	08008d11 	.word	0x08008d11
 8008d38:	08008d11 	.word	0x08008d11
 8008d3c:	08008d11 	.word	0x08008d11
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d11 	.word	0x08008d11
 8008d48:	08008d11 	.word	0x08008d11
 8008d4c:	08008d11 	.word	0x08008d11
 8008d50:	08008d11 	.word	0x08008d11
 8008d54:	08008ea1 	.word	0x08008ea1
 8008d58:	08008dc5 	.word	0x08008dc5
 8008d5c:	08008e83 	.word	0x08008e83
 8008d60:	08008d11 	.word	0x08008d11
 8008d64:	08008d11 	.word	0x08008d11
 8008d68:	08008ec3 	.word	0x08008ec3
 8008d6c:	08008d11 	.word	0x08008d11
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008d11 	.word	0x08008d11
 8008d78:	08008d11 	.word	0x08008d11
 8008d7c:	08008e8b 	.word	0x08008e8b
 8008d80:	680b      	ldr	r3, [r1, #0]
 8008d82:	1d1a      	adds	r2, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	600a      	str	r2, [r1, #0]
 8008d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0a3      	b.n	8008edc <_printf_i+0x1f4>
 8008d94:	6825      	ldr	r5, [r4, #0]
 8008d96:	6808      	ldr	r0, [r1, #0]
 8008d98:	062e      	lsls	r6, r5, #24
 8008d9a:	f100 0304 	add.w	r3, r0, #4
 8008d9e:	d50a      	bpl.n	8008db6 <_printf_i+0xce>
 8008da0:	6805      	ldr	r5, [r0, #0]
 8008da2:	600b      	str	r3, [r1, #0]
 8008da4:	2d00      	cmp	r5, #0
 8008da6:	da03      	bge.n	8008db0 <_printf_i+0xc8>
 8008da8:	232d      	movs	r3, #45	; 0x2d
 8008daa:	426d      	negs	r5, r5
 8008dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db0:	485e      	ldr	r0, [pc, #376]	; (8008f2c <_printf_i+0x244>)
 8008db2:	230a      	movs	r3, #10
 8008db4:	e019      	b.n	8008dea <_printf_i+0x102>
 8008db6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008dba:	6805      	ldr	r5, [r0, #0]
 8008dbc:	600b      	str	r3, [r1, #0]
 8008dbe:	bf18      	it	ne
 8008dc0:	b22d      	sxthne	r5, r5
 8008dc2:	e7ef      	b.n	8008da4 <_printf_i+0xbc>
 8008dc4:	680b      	ldr	r3, [r1, #0]
 8008dc6:	6825      	ldr	r5, [r4, #0]
 8008dc8:	1d18      	adds	r0, r3, #4
 8008dca:	6008      	str	r0, [r1, #0]
 8008dcc:	0628      	lsls	r0, r5, #24
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0xec>
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <_printf_i+0xf2>
 8008dd4:	0669      	lsls	r1, r5, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0xe8>
 8008dd8:	881d      	ldrh	r5, [r3, #0]
 8008dda:	4854      	ldr	r0, [pc, #336]	; (8008f2c <_printf_i+0x244>)
 8008ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8008dde:	bf0c      	ite	eq
 8008de0:	2308      	moveq	r3, #8
 8008de2:	230a      	movne	r3, #10
 8008de4:	2100      	movs	r1, #0
 8008de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dea:	6866      	ldr	r6, [r4, #4]
 8008dec:	60a6      	str	r6, [r4, #8]
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	bfa2      	ittt	ge
 8008df2:	6821      	ldrge	r1, [r4, #0]
 8008df4:	f021 0104 	bicge.w	r1, r1, #4
 8008df8:	6021      	strge	r1, [r4, #0]
 8008dfa:	b90d      	cbnz	r5, 8008e00 <_printf_i+0x118>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d04d      	beq.n	8008e9c <_printf_i+0x1b4>
 8008e00:	4616      	mov	r6, r2
 8008e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e06:	fb03 5711 	mls	r7, r3, r1, r5
 8008e0a:	5dc7      	ldrb	r7, [r0, r7]
 8008e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e10:	462f      	mov	r7, r5
 8008e12:	42bb      	cmp	r3, r7
 8008e14:	460d      	mov	r5, r1
 8008e16:	d9f4      	bls.n	8008e02 <_printf_i+0x11a>
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d10b      	bne.n	8008e34 <_printf_i+0x14c>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	07df      	lsls	r7, r3, #31
 8008e20:	d508      	bpl.n	8008e34 <_printf_i+0x14c>
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	4299      	cmp	r1, r3
 8008e28:	bfde      	ittt	le
 8008e2a:	2330      	movle	r3, #48	; 0x30
 8008e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e34:	1b92      	subs	r2, r2, r6
 8008e36:	6122      	str	r2, [r4, #16]
 8008e38:	f8cd a000 	str.w	sl, [sp]
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	aa03      	add	r2, sp, #12
 8008e40:	4621      	mov	r1, r4
 8008e42:	4640      	mov	r0, r8
 8008e44:	f7ff fee2 	bl	8008c0c <_printf_common>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d14c      	bne.n	8008ee6 <_printf_i+0x1fe>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	b004      	add	sp, #16
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	4835      	ldr	r0, [pc, #212]	; (8008f2c <_printf_i+0x244>)
 8008e58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	680e      	ldr	r6, [r1, #0]
 8008e60:	061f      	lsls	r7, r3, #24
 8008e62:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e66:	600e      	str	r6, [r1, #0]
 8008e68:	d514      	bpl.n	8008e94 <_printf_i+0x1ac>
 8008e6a:	07d9      	lsls	r1, r3, #31
 8008e6c:	bf44      	itt	mi
 8008e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e72:	6023      	strmi	r3, [r4, #0]
 8008e74:	b91d      	cbnz	r5, 8008e7e <_printf_i+0x196>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	f023 0320 	bic.w	r3, r3, #32
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	2310      	movs	r3, #16
 8008e80:	e7b0      	b.n	8008de4 <_printf_i+0xfc>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f043 0320 	orr.w	r3, r3, #32
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	2378      	movs	r3, #120	; 0x78
 8008e8c:	4828      	ldr	r0, [pc, #160]	; (8008f30 <_printf_i+0x248>)
 8008e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e92:	e7e3      	b.n	8008e5c <_printf_i+0x174>
 8008e94:	065e      	lsls	r6, r3, #25
 8008e96:	bf48      	it	mi
 8008e98:	b2ad      	uxthmi	r5, r5
 8008e9a:	e7e6      	b.n	8008e6a <_printf_i+0x182>
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	e7bb      	b.n	8008e18 <_printf_i+0x130>
 8008ea0:	680b      	ldr	r3, [r1, #0]
 8008ea2:	6826      	ldr	r6, [r4, #0]
 8008ea4:	6960      	ldr	r0, [r4, #20]
 8008ea6:	1d1d      	adds	r5, r3, #4
 8008ea8:	600d      	str	r5, [r1, #0]
 8008eaa:	0635      	lsls	r5, r6, #24
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	d501      	bpl.n	8008eb4 <_printf_i+0x1cc>
 8008eb0:	6018      	str	r0, [r3, #0]
 8008eb2:	e002      	b.n	8008eba <_printf_i+0x1d2>
 8008eb4:	0671      	lsls	r1, r6, #25
 8008eb6:	d5fb      	bpl.n	8008eb0 <_printf_i+0x1c8>
 8008eb8:	8018      	strh	r0, [r3, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	4616      	mov	r6, r2
 8008ec0:	e7ba      	b.n	8008e38 <_printf_i+0x150>
 8008ec2:	680b      	ldr	r3, [r1, #0]
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	600a      	str	r2, [r1, #0]
 8008ec8:	681e      	ldr	r6, [r3, #0]
 8008eca:	6862      	ldr	r2, [r4, #4]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7f7 f97e 	bl	80001d0 <memchr>
 8008ed4:	b108      	cbz	r0, 8008eda <_printf_i+0x1f2>
 8008ed6:	1b80      	subs	r0, r0, r6
 8008ed8:	6060      	str	r0, [r4, #4]
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ee4:	e7a8      	b.n	8008e38 <_printf_i+0x150>
 8008ee6:	6923      	ldr	r3, [r4, #16]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4649      	mov	r1, r9
 8008eec:	4640      	mov	r0, r8
 8008eee:	47d0      	blx	sl
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d0ab      	beq.n	8008e4c <_printf_i+0x164>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	079b      	lsls	r3, r3, #30
 8008ef8:	d413      	bmi.n	8008f22 <_printf_i+0x23a>
 8008efa:	68e0      	ldr	r0, [r4, #12]
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	4298      	cmp	r0, r3
 8008f00:	bfb8      	it	lt
 8008f02:	4618      	movlt	r0, r3
 8008f04:	e7a4      	b.n	8008e50 <_printf_i+0x168>
 8008f06:	2301      	movs	r3, #1
 8008f08:	4632      	mov	r2, r6
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	47d0      	blx	sl
 8008f10:	3001      	adds	r0, #1
 8008f12:	d09b      	beq.n	8008e4c <_printf_i+0x164>
 8008f14:	3501      	adds	r5, #1
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	9903      	ldr	r1, [sp, #12]
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	42ab      	cmp	r3, r5
 8008f1e:	dcf2      	bgt.n	8008f06 <_printf_i+0x21e>
 8008f20:	e7eb      	b.n	8008efa <_printf_i+0x212>
 8008f22:	2500      	movs	r5, #0
 8008f24:	f104 0619 	add.w	r6, r4, #25
 8008f28:	e7f5      	b.n	8008f16 <_printf_i+0x22e>
 8008f2a:	bf00      	nop
 8008f2c:	0800c285 	.word	0x0800c285
 8008f30:	0800c296 	.word	0x0800c296

08008f34 <_sbrk_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d06      	ldr	r5, [pc, #24]	; (8008f50 <_sbrk_r+0x1c>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7f9 fe98 	bl	8002c74 <_sbrk>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_sbrk_r+0x1a>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_sbrk_r+0x1a>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	2000045c 	.word	0x2000045c

08008f54 <__sread>:
 8008f54:	b510      	push	{r4, lr}
 8008f56:	460c      	mov	r4, r1
 8008f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5c:	f000 f8ee 	bl	800913c <_read_r>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	bfab      	itete	ge
 8008f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f66:	89a3      	ldrhlt	r3, [r4, #12]
 8008f68:	181b      	addge	r3, r3, r0
 8008f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f6e:	bfac      	ite	ge
 8008f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f72:	81a3      	strhlt	r3, [r4, #12]
 8008f74:	bd10      	pop	{r4, pc}

08008f76 <__swrite>:
 8008f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7a:	461f      	mov	r7, r3
 8008f7c:	898b      	ldrh	r3, [r1, #12]
 8008f7e:	05db      	lsls	r3, r3, #23
 8008f80:	4605      	mov	r5, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	4616      	mov	r6, r2
 8008f86:	d505      	bpl.n	8008f94 <__swrite+0x1e>
 8008f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f000 f868 	bl	8009064 <_lseek_r>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	f000 b817 	b.w	8008fdc <_write_r>

08008fae <__sseek>:
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb6:	f000 f855 	bl	8009064 <_lseek_r>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	bf15      	itete	ne
 8008fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fca:	81a3      	strheq	r3, [r4, #12]
 8008fcc:	bf18      	it	ne
 8008fce:	81a3      	strhne	r3, [r4, #12]
 8008fd0:	bd10      	pop	{r4, pc}

08008fd2 <__sclose>:
 8008fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd6:	f000 b813 	b.w	8009000 <_close_r>
	...

08008fdc <_write_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_write_r+0x20>)
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f7f9 fdf1 	bl	8002bd2 <_write>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_write_r+0x1e>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_write_r+0x1e>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	2000045c 	.word	0x2000045c

08009000 <_close_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	; (800901c <_close_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f9 fdfd 	bl	8002c0a <_close>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_close_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_close_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	2000045c 	.word	0x2000045c

08009020 <_fstat_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	; (8009040 <_fstat_r+0x20>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	f7f9 fdf8 	bl	8002c22 <_fstat>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d102      	bne.n	800903c <_fstat_r+0x1c>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b103      	cbz	r3, 800903c <_fstat_r+0x1c>
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	2000045c 	.word	0x2000045c

08009044 <_isatty_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d06      	ldr	r5, [pc, #24]	; (8009060 <_isatty_r+0x1c>)
 8009048:	2300      	movs	r3, #0
 800904a:	4604      	mov	r4, r0
 800904c:	4608      	mov	r0, r1
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	f7f9 fdf7 	bl	8002c42 <_isatty>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_isatty_r+0x1a>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_isatty_r+0x1a>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	2000045c 	.word	0x2000045c

08009064 <_lseek_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4d07      	ldr	r5, [pc, #28]	; (8009084 <_lseek_r+0x20>)
 8009068:	4604      	mov	r4, r0
 800906a:	4608      	mov	r0, r1
 800906c:	4611      	mov	r1, r2
 800906e:	2200      	movs	r2, #0
 8009070:	602a      	str	r2, [r5, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	f7f9 fdf0 	bl	8002c58 <_lseek>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_lseek_r+0x1e>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_lseek_r+0x1e>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	2000045c 	.word	0x2000045c

08009088 <memcpy>:
 8009088:	440a      	add	r2, r1
 800908a:	4291      	cmp	r1, r2
 800908c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009090:	d100      	bne.n	8009094 <memcpy+0xc>
 8009092:	4770      	bx	lr
 8009094:	b510      	push	{r4, lr}
 8009096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800909a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909e:	4291      	cmp	r1, r2
 80090a0:	d1f9      	bne.n	8009096 <memcpy+0xe>
 80090a2:	bd10      	pop	{r4, pc}

080090a4 <memmove>:
 80090a4:	4288      	cmp	r0, r1
 80090a6:	b510      	push	{r4, lr}
 80090a8:	eb01 0402 	add.w	r4, r1, r2
 80090ac:	d902      	bls.n	80090b4 <memmove+0x10>
 80090ae:	4284      	cmp	r4, r0
 80090b0:	4623      	mov	r3, r4
 80090b2:	d807      	bhi.n	80090c4 <memmove+0x20>
 80090b4:	1e43      	subs	r3, r0, #1
 80090b6:	42a1      	cmp	r1, r4
 80090b8:	d008      	beq.n	80090cc <memmove+0x28>
 80090ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090c2:	e7f8      	b.n	80090b6 <memmove+0x12>
 80090c4:	4402      	add	r2, r0
 80090c6:	4601      	mov	r1, r0
 80090c8:	428a      	cmp	r2, r1
 80090ca:	d100      	bne.n	80090ce <memmove+0x2a>
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090d6:	e7f7      	b.n	80090c8 <memmove+0x24>

080090d8 <__malloc_lock>:
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <__malloc_lock+0x8>)
 80090da:	f7ff bb2b 	b.w	8008734 <__retarget_lock_acquire_recursive>
 80090de:	bf00      	nop
 80090e0:	20000454 	.word	0x20000454

080090e4 <__malloc_unlock>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__malloc_unlock+0x8>)
 80090e6:	f7ff bb26 	b.w	8008736 <__retarget_lock_release_recursive>
 80090ea:	bf00      	nop
 80090ec:	20000454 	.word	0x20000454

080090f0 <_realloc_r>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	4607      	mov	r7, r0
 80090f4:	4614      	mov	r4, r2
 80090f6:	460e      	mov	r6, r1
 80090f8:	b921      	cbnz	r1, 8009104 <_realloc_r+0x14>
 80090fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090fe:	4611      	mov	r1, r2
 8009100:	f7ff bbce 	b.w	80088a0 <_malloc_r>
 8009104:	b922      	cbnz	r2, 8009110 <_realloc_r+0x20>
 8009106:	f7ff fb7b 	bl	8008800 <_free_r>
 800910a:	4625      	mov	r5, r4
 800910c:	4628      	mov	r0, r5
 800910e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009110:	f000 f826 	bl	8009160 <_malloc_usable_size_r>
 8009114:	42a0      	cmp	r0, r4
 8009116:	d20f      	bcs.n	8009138 <_realloc_r+0x48>
 8009118:	4621      	mov	r1, r4
 800911a:	4638      	mov	r0, r7
 800911c:	f7ff fbc0 	bl	80088a0 <_malloc_r>
 8009120:	4605      	mov	r5, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	d0f2      	beq.n	800910c <_realloc_r+0x1c>
 8009126:	4631      	mov	r1, r6
 8009128:	4622      	mov	r2, r4
 800912a:	f7ff ffad 	bl	8009088 <memcpy>
 800912e:	4631      	mov	r1, r6
 8009130:	4638      	mov	r0, r7
 8009132:	f7ff fb65 	bl	8008800 <_free_r>
 8009136:	e7e9      	b.n	800910c <_realloc_r+0x1c>
 8009138:	4635      	mov	r5, r6
 800913a:	e7e7      	b.n	800910c <_realloc_r+0x1c>

0800913c <_read_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d07      	ldr	r5, [pc, #28]	; (800915c <_read_r+0x20>)
 8009140:	4604      	mov	r4, r0
 8009142:	4608      	mov	r0, r1
 8009144:	4611      	mov	r1, r2
 8009146:	2200      	movs	r2, #0
 8009148:	602a      	str	r2, [r5, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	f7f9 fd24 	bl	8002b98 <_read>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_read_r+0x1e>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_read_r+0x1e>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	2000045c 	.word	0x2000045c

08009160 <_malloc_usable_size_r>:
 8009160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009164:	1f18      	subs	r0, r3, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfbc      	itt	lt
 800916a:	580b      	ldrlt	r3, [r1, r0]
 800916c:	18c0      	addlt	r0, r0, r3
 800916e:	4770      	bx	lr

08009170 <_init>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	bf00      	nop
 8009174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009176:	bc08      	pop	{r3}
 8009178:	469e      	mov	lr, r3
 800917a:	4770      	bx	lr

0800917c <_fini>:
 800917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917e:	bf00      	nop
 8009180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009182:	bc08      	pop	{r3}
 8009184:	469e      	mov	lr, r3
 8009186:	4770      	bx	lr


Bai1_GPIO_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003110  0800913c  0800913c  0001913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c24c  0800c24c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c24c  0800c24c  0001c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c254  0800c254  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c254  0800c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000003d4  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000460  20000460  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd58  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004630  00000000  00000000  0003fe14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  00044448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001598  00000000  00000000  00045bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027235  00000000  00000000  00047158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f7e5  00000000  00000000  0006e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e132b  00000000  00000000  0008db72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016ee9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006978  00000000  00000000  0016eef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009124 	.word	0x08009124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08009124 	.word	0x08009124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_ADC1_Init+0x108>)
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_ADC1_Init+0x10c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_ADC1_Init+0x108>)
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0x110>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e04:	f002 f9dc 	bl	80031c0 <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f001 fc19 	bl	8002644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e12:	2308      	movs	r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e24:	f002 fb3e 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f001 fc09 	bl	8002644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e32:	2309      	movs	r3, #9
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e40:	f002 fb30 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4a:	f001 fbfb 	bl	8002644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e5c:	f002 fb22 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e66:	f001 fbed 	bl	8002644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e78:	f002 fb14 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e82:	f001 fbdf 	bl	8002644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e86:	230c      	movs	r3, #12
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e94:	f002 fb06 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e9e:	f001 fbd1 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000d8 	.word	0x200000d8
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <HAL_ADC_MspInit+0x110>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d171      	bne.n	8000fbe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a33      	ldr	r2, [pc, #204]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <HAL_ADC_MspInit+0x118>)
 8000f42:	f003 fa63 	bl	800440c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x11c>)
 8000f5a:	f003 fa57 	bl	800440c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f002 fe30 	bl	8003c08 <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fae:	f001 fb49 	bl	8002644 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000120 	.word	0x20000120
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <button_init+0x14>)
 8000fea:	f003 fbab 	bl	8004744 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <button_Scan+0xc8>)
 8001004:	f003 fb9e 	bl	8004744 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	482c      	ldr	r0, [pc, #176]	; (80010c0 <button_Scan+0xc8>)
 800100e:	f003 fb99 	bl	8004744 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001012:	230a      	movs	r3, #10
 8001014:	2202      	movs	r2, #2
 8001016:	492b      	ldr	r1, [pc, #172]	; (80010c4 <button_Scan+0xcc>)
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <button_Scan+0xd0>)
 800101a:	f004 fb2a 	bl	8005672 <HAL_SPI_Receive>
	  int button_index = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e03f      	b.n	80010ae <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db06      	blt.n	8001042 <button_Scan+0x4a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc03      	bgt.n	8001042 <button_Scan+0x4a>
			  button_index = i + 4;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e018      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dd07      	ble.n	8001058 <button_Scan+0x60>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dc04      	bgt.n	8001058 <button_Scan+0x60>
			  button_index = 7 - i;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f1c3 0307 	rsb	r3, r3, #7
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00d      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b07      	cmp	r3, #7
 800105c:	dd06      	ble.n	800106c <button_Scan+0x74>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	dc03      	bgt.n	800106c <button_Scan+0x74>
			  button_index = i + 4;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3304      	adds	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e003      	b.n	8001074 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1c3 0317 	rsb	r3, r3, #23
 8001072:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <button_Scan+0xcc>)
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	4013      	ands	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <button_Scan+0x96>
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <button_Scan+0xd4>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2100      	movs	r1, #0
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108c:	e009      	b.n	80010a2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <button_Scan+0xd4>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <button_Scan+0xd4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	ddbc      	ble.n	800102e <button_Scan+0x36>
	  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	200000a8 	.word	0x200000a8
 80010c8:	2000028c 	.word	0x2000028c
 80010cc:	20000180 	.word	0x20000180

080010d0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <buzzer_init+0x10>)
 80010d8:	f005 f80c 	bl	80060f4 <HAL_TIM_PWM_Start>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200002e4 	.word	0x200002e4

080010e4 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <buzzer_SetVolume+0x28>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <buzzer_SetVolume+0x28>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <buzzer_SetVolume+0x2c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200000aa 	.word	0x200000aa
 8001110:	200002e4 	.word	0x200002e4

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x3c>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f002 fd2d 	bl	8003b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	; 0x38
 8001142:	f002 fd46 	bl	8003bd2 <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <MX_FSMC_Init+0xec>)
 8001182:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001186:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <MX_FSMC_Init+0xec>)
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <MX_FSMC_Init+0xf0>)
 800118c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_FSMC_Init+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_FSMC_Init+0xec>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_FSMC_Init+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_FSMC_Init+0xec>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_FSMC_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_FSMC_Init+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_FSMC_Init+0xec>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_FSMC_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_FSMC_Init+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_FSMC_Init+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_FSMC_Init+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80011e6:	230f      	movs	r3, #15
 80011e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80011ea:	230f      	movs	r3, #15
 80011ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80011ee:	233c      	movs	r3, #60	; 0x3c
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80011fa:	2311      	movs	r3, #17
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001202:	2308      	movs	r3, #8
 8001204:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800120a:	2309      	movs	r3, #9
 800120c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001216:	2311      	movs	r3, #17
 8001218:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800121e:	463a      	mov	r2, r7
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_FSMC_Init+0xec>)
 8001228:	f004 fe06 	bl	8005e38 <HAL_SRAM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001232:	f001 fa07 	bl	8002644 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001a0 	.word	0x200001a0
 8001244:	a0000104 	.word	0xa0000104

08001248 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_FSMC_MspInit+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d131      	bne.n	80012c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_FSMC_MspInit+0x88>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6393      	str	r3, [r2, #56]	; 0x38
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001286:	f64f 7388 	movw	r3, #65416	; 0xff88
 800128a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001298:	230c      	movs	r3, #12
 800129a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_FSMC_MspInit+0x90>)
 80012a2:	f003 f8b3 	bl	800440c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012a6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80012aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012b8:	230c      	movs	r3, #12
 80012ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_FSMC_MspInit+0x94>)
 80012c2:	f003 f8a3 	bl	800440c <HAL_GPIO_Init>
 80012c6:	e000      	b.n	80012ca <HAL_FSMC_MspInit+0x82>
    return;
 80012c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000ac 	.word	0x200000ac
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80012e8:	f7ff ffae 	bl	8001248 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <MX_GPIO_Init+0x214>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a7d      	ldr	r2, [pc, #500]	; (8001508 <MX_GPIO_Init+0x214>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <MX_GPIO_Init+0x214>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	4b77      	ldr	r3, [pc, #476]	; (8001508 <MX_GPIO_Init+0x214>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a76      	ldr	r2, [pc, #472]	; (8001508 <MX_GPIO_Init+0x214>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b74      	ldr	r3, [pc, #464]	; (8001508 <MX_GPIO_Init+0x214>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <MX_GPIO_Init+0x214>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <MX_GPIO_Init+0x214>)
 800134c:	f043 0320 	orr.w	r3, r3, #32
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <MX_GPIO_Init+0x214>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	4b69      	ldr	r3, [pc, #420]	; (8001508 <MX_GPIO_Init+0x214>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a68      	ldr	r2, [pc, #416]	; (8001508 <MX_GPIO_Init+0x214>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b66      	ldr	r3, [pc, #408]	; (8001508 <MX_GPIO_Init+0x214>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <MX_GPIO_Init+0x214>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a61      	ldr	r2, [pc, #388]	; (8001508 <MX_GPIO_Init+0x214>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <MX_GPIO_Init+0x214>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <MX_GPIO_Init+0x214>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a5a      	ldr	r2, [pc, #360]	; (8001508 <MX_GPIO_Init+0x214>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b58      	ldr	r3, [pc, #352]	; (8001508 <MX_GPIO_Init+0x214>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b54      	ldr	r3, [pc, #336]	; (8001508 <MX_GPIO_Init+0x214>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a53      	ldr	r2, [pc, #332]	; (8001508 <MX_GPIO_Init+0x214>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <MX_GPIO_Init+0x214>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <MX_GPIO_Init+0x214>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <MX_GPIO_Init+0x214>)
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <MX_GPIO_Init+0x214>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2170      	movs	r1, #112	; 0x70
 80013ee:	4847      	ldr	r0, [pc, #284]	; (800150c <MX_GPIO_Init+0x218>)
 80013f0:	f003 f9a8 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80013fa:	4845      	ldr	r0, [pc, #276]	; (8001510 <MX_GPIO_Init+0x21c>)
 80013fc:	f003 f9a2 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001406:	4843      	ldr	r0, [pc, #268]	; (8001514 <MX_GPIO_Init+0x220>)
 8001408:	f003 f99c 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	4841      	ldr	r0, [pc, #260]	; (8001518 <MX_GPIO_Init+0x224>)
 8001414:	f003 f996 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2108      	movs	r1, #8
 800141c:	483f      	ldr	r0, [pc, #252]	; (800151c <MX_GPIO_Init+0x228>)
 800141e:	f003 f991 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001422:	2370      	movs	r3, #112	; 0x70
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4834      	ldr	r0, [pc, #208]	; (800150c <MX_GPIO_Init+0x218>)
 800143a:	f002 ffe7 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800143e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	482e      	ldr	r0, [pc, #184]	; (8001510 <MX_GPIO_Init+0x21c>)
 8001458:	f002 ffd8 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	482a      	ldr	r0, [pc, #168]	; (8001518 <MX_GPIO_Init+0x224>)
 8001470:	f002 ffcc 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin|T_PEN_Pin|T_MISO_Pin;
 8001474:	f241 1330 	movw	r3, #4400	; 0x1130
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4821      	ldr	r0, [pc, #132]	; (8001510 <MX_GPIO_Init+0x21c>)
 800148a:	f002 ffbf 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CLK_Pin;
 800148e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	481b      	ldr	r0, [pc, #108]	; (8001514 <MX_GPIO_Init+0x220>)
 80014a8:	f002 ffb0 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <MX_GPIO_Init+0x220>)
 80014c0:	f002 ffa4 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	480e      	ldr	r0, [pc, #56]	; (8001518 <MX_GPIO_Init+0x224>)
 80014de:	f002 ff95 	bl	800440c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80014e2:	2308      	movs	r3, #8
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_GPIO_Init+0x228>)
 80014fa:	f002 ff87 	bl	800440c <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	; 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000
 8001510:	40020800 	.word	0x40020800
 8001514:	40021800 	.word	0x40021800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020c00 	.word	0x40020c00

08001520 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_I2C1_Init+0x50>)
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <MX_I2C1_Init+0x54>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_I2C1_Init+0x50>)
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_I2C1_Init+0x58>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_I2C1_Init+0x50>)
 800153e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_I2C1_Init+0x50>)
 800155e:	f003 f90b 	bl	8004778 <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001568:	f001 f86c 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200001f0 	.word	0x200001f0
 8001574:	40005400 	.word	0x40005400
 8001578:	000186a0 	.word	0x000186a0

0800157c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_I2C_MspInit+0x84>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d12b      	bne.n	80015f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015be:	2312      	movs	r3, #18
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ca:	2304      	movs	r3, #4
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <HAL_I2C_MspInit+0x8c>)
 80015d6:	f002 ff19 	bl	800440c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005400 	.word	0x40005400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020400 	.word	0x40020400

0800160c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <LCD_WR_REG+0x1c>)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	8013      	strh	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	600ffffe 	.word	0x600ffffe

0800162c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <LCD_WR_DATA+0x1c>)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	8053      	strh	r3, [r2, #2]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	600ffffe 	.word	0x600ffffe

0800164c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <LCD_RD_DATA+0x20>)
 8001654:	885b      	ldrh	r3, [r3, #2]
 8001656:	b29b      	uxth	r3, r3
 8001658:	80fb      	strh	r3, [r7, #6]
	return ram;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	b29b      	uxth	r3, r3
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	600ffffe 	.word	0x600ffffe

08001670 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4604      	mov	r4, r0
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	4603      	mov	r3, r0
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800168e:	202a      	movs	r0, #42	; 0x2a
 8001690:	f7ff ffbc 	bl	800160c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29b      	uxth	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ffc6 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ffc0 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffba 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ffb4 	bl	800162c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80016c4:	202b      	movs	r0, #43	; 0x2b
 80016c6:	f7ff ffa1 	bl	800160c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffab 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffa5 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80016e2:	883b      	ldrh	r3, [r7, #0]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff9f 	bl	800162c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80016ee:	883b      	ldrh	r3, [r7, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff99 	bl	800162c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80016fa:	202c      	movs	r0, #44	; 0x2c
 80016fc:	f7ff ff86 	bl	800160c <LCD_WR_REG>
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}

08001708 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <lcd_Clear+0x60>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <lcd_Clear+0x60>)
 800171c:	885b      	ldrh	r3, [r3, #2]
 800171e:	3b01      	subs	r3, #1
 8001720:	b29b      	uxth	r3, r3
 8001722:	2100      	movs	r1, #0
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff ffa3 	bl	8001670 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800172a:	2300      	movs	r3, #0
 800172c:	81fb      	strh	r3, [r7, #14]
 800172e:	e011      	b.n	8001754 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001730:	2300      	movs	r3, #0
 8001732:	81bb      	strh	r3, [r7, #12]
 8001734:	e006      	b.n	8001744 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff77 	bl	800162c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800173e:	89bb      	ldrh	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	81bb      	strh	r3, [r7, #12]
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <lcd_Clear+0x60>)
 8001746:	885b      	ldrh	r3, [r3, #2]
 8001748:	89ba      	ldrh	r2, [r7, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	d3f3      	bcc.n	8001736 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	3301      	adds	r3, #1
 8001752:	81fb      	strh	r3, [r7, #14]
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <lcd_Clear+0x60>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	89fa      	ldrh	r2, [r7, #14]
 800175a:	429a      	cmp	r2, r3
 800175c:	d3e8      	bcc.n	8001730 <lcd_Clear+0x28>
		}
	}
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000244 	.word	0x20000244

0800176c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	460b      	mov	r3, r1
 8001778:	80bb      	strh	r3, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	88b9      	ldrh	r1, [r7, #4]
 8001784:	88f8      	ldrh	r0, [r7, #6]
 8001786:	f7ff ff73 	bl	8001670 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff4d 	bl	800162c <LCD_WR_DATA>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	4613      	mov	r3, r2
 80017b8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80017c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	fb12 f303 	smulbb	r3, r2, r3
 80017f2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	3b20      	subs	r3, #32
 80017f8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4413      	add	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	b29c      	uxth	r4, r3
 8001808:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800180c:	b29a      	uxth	r2, r3
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29b      	uxth	r3, r3
 8001818:	88b9      	ldrh	r1, [r7, #4]
 800181a:	88f8      	ldrh	r0, [r7, #6]
 800181c:	4622      	mov	r2, r4
 800181e:	f7ff ff27 	bl	8001670 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001822:	2300      	movs	r3, #0
 8001824:	827b      	strh	r3, [r7, #18]
 8001826:	e07a      	b.n	800191e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800182c:	2b0c      	cmp	r3, #12
 800182e:	d028      	beq.n	8001882 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001830:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001834:	2b10      	cmp	r3, #16
 8001836:	d108      	bne.n	800184a <lcd_ShowChar+0xae>
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	8a7b      	ldrh	r3, [r7, #18]
 800183c:	493c      	ldr	r1, [pc, #240]	; (8001930 <lcd_ShowChar+0x194>)
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	440a      	add	r2, r1
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	75fb      	strb	r3, [r7, #23]
 8001848:	e01b      	b.n	8001882 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800184a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800184e:	2b18      	cmp	r3, #24
 8001850:	d10b      	bne.n	800186a <lcd_ShowChar+0xce>
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	8a79      	ldrh	r1, [r7, #18]
 8001856:	4837      	ldr	r0, [pc, #220]	; (8001934 <lcd_ShowChar+0x198>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4403      	add	r3, r0
 8001862:	440b      	add	r3, r1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	75fb      	strb	r3, [r7, #23]
 8001868:	e00b      	b.n	8001882 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800186a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800186e:	2b20      	cmp	r3, #32
 8001870:	d15a      	bne.n	8001928 <lcd_ShowChar+0x18c>
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	8a7b      	ldrh	r3, [r7, #18]
 8001876:	4930      	ldr	r1, [pc, #192]	; (8001938 <lcd_ShowChar+0x19c>)
 8001878:	0192      	lsls	r2, r2, #6
 800187a:	440a      	add	r2, r1
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001882:	2300      	movs	r3, #0
 8001884:	75bb      	strb	r3, [r7, #22]
 8001886:	e044      	b.n	8001912 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001888:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800188c:	2b00      	cmp	r3, #0
 800188e:	d120      	bne.n	80018d2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001890:	7dfa      	ldrb	r2, [r7, #23]
 8001892:	7dbb      	ldrb	r3, [r7, #22]
 8001894:	fa42 f303 	asr.w	r3, r2, r3
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <lcd_ShowChar+0x10e>
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fec2 	bl	800162c <LCD_WR_DATA>
 80018a8:	e003      	b.n	80018b2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80018aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff febd 	bl	800162c <LCD_WR_DATA>
				m++;
 80018b2:	7d7b      	ldrb	r3, [r7, #21]
 80018b4:	3301      	adds	r3, #1
 80018b6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80018b8:	7d7b      	ldrb	r3, [r7, #21]
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80018c0:	fb02 f201 	mul.w	r2, r2, r1
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d11f      	bne.n	800190c <lcd_ShowChar+0x170>
				{
					m=0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	757b      	strb	r3, [r7, #21]
					break;
 80018d0:	e022      	b.n	8001918 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80018d2:	7dfa      	ldrb	r2, [r7, #23]
 80018d4:	7dbb      	ldrb	r3, [r7, #22]
 80018d6:	fa42 f303 	asr.w	r3, r2, r3
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <lcd_ShowChar+0x152>
 80018e2:	883a      	ldrh	r2, [r7, #0]
 80018e4:	88b9      	ldrh	r1, [r7, #4]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff3f 	bl	800176c <lcd_DrawPoint>
				x++;
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	3301      	adds	r3, #1
 80018f2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80018f4:	88fa      	ldrh	r2, [r7, #6]
 80018f6:	8a3b      	ldrh	r3, [r7, #16]
 80018f8:	1ad2      	subs	r2, r2, r3
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d105      	bne.n	800190c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001900:	8a3b      	ldrh	r3, [r7, #16]
 8001902:	80fb      	strh	r3, [r7, #6]
					y++;
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	80bb      	strh	r3, [r7, #4]
					break;
 800190a:	e005      	b.n	8001918 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800190c:	7dbb      	ldrb	r3, [r7, #22]
 800190e:	3301      	adds	r3, #1
 8001910:	75bb      	strb	r3, [r7, #22]
 8001912:	7dbb      	ldrb	r3, [r7, #22]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d9b7      	bls.n	8001888 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001918:	8a7b      	ldrh	r3, [r7, #18]
 800191a:	3301      	adds	r3, #1
 800191c:	827b      	strh	r3, [r7, #18]
 800191e:	8a7a      	ldrh	r2, [r7, #18]
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	429a      	cmp	r2, r3
 8001924:	d380      	bcc.n	8001828 <lcd_ShowChar+0x8c>
 8001926:	e000      	b.n	800192a <lcd_ShowChar+0x18e>
		else return;
 8001928:	bf00      	nop
				}
			}
		}
	}
}
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	08009214 	.word	0x08009214
 8001934:	08009804 	.word	0x08009804
 8001938:	0800a9d4 	.word	0x0800a9d4

0800193c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	460a      	mov	r2, r1
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800194c:	2301      	movs	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001950:	e004      	b.n	800195c <mypow+0x20>
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	71ba      	strb	r2, [r7, #6]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f5      	bne.n	8001952 <mypow+0x16>
	return result;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af04      	add	r7, sp, #16
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	80fb      	strh	r3, [r7, #6]
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]
 800198e:	4613      	mov	r3, r2
 8001990:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001992:	2300      	movs	r3, #0
 8001994:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e059      	b.n	8001a58 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80019a4:	887c      	ldrh	r4, [r7, #2]
 80019a6:	787a      	ldrb	r2, [r7, #1]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	200a      	movs	r0, #10
 80019b6:	f7ff ffc1 	bl	800193c <mypow>
 80019ba:	4603      	mov	r3, r0
 80019bc:	fbb4 f1f3 	udiv	r1, r4, r3
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <lcd_ShowIntNum+0xf8>)
 80019c2:	fba3 2301 	umull	r2, r3, r3, r1
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	1aca      	subs	r2, r1, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d121      	bne.n	8001a20 <lcd_ShowIntNum+0xac>
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	da1c      	bge.n	8001a20 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80019e6:	7b3b      	ldrb	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d117      	bne.n	8001a1c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	7b7b      	ldrb	r3, [r7, #13]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	fb12 f303 	smulbb	r3, r2, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4413      	add	r3, r2
 80019fe:	b298      	uxth	r0, r3
 8001a00:	8c3a      	ldrh	r2, [r7, #32]
 8001a02:	88b9      	ldrh	r1, [r7, #4]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4613      	mov	r3, r2
 8001a14:	2220      	movs	r2, #32
 8001a16:	f7ff fec1 	bl	800179c <lcd_ShowChar>
				continue;
 8001a1a:	e01a      	b.n	8001a52 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	fb12 f303 	smulbb	r3, r2, r3
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4413      	add	r3, r2
 8001a32:	b298      	uxth	r0, r3
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	8c3c      	ldrh	r4, [r7, #32]
 8001a3c:	88b9      	ldrh	r1, [r7, #4]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	f7ff fea5 	bl	800179c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	787b      	ldrb	r3, [r7, #1]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3a1      	bcc.n	80019a4 <lcd_ShowIntNum+0x30>
	}
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	cccccccd 	.word	0xcccccccd

08001a70 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	4604      	mov	r4, r0
 8001a78:	4608      	mov	r0, r1
 8001a7a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	81fb      	strh	r3, [r7, #14]
 8001a86:	4603      	mov	r3, r0
 8001a88:	81bb      	strh	r3, [r7, #12]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001a92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b78 <lcd_ShowFloatNum+0x108>
 8001aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]
 8001ab4:	e057      	b.n	8001b66 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001ab6:	8abc      	ldrh	r4, [r7, #20]
 8001ab8:	79fa      	ldrb	r2, [r7, #7]
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f7ff ff38 	bl	800193c <mypow>
 8001acc:	4603      	mov	r3, r0
 8001ace:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <lcd_ShowFloatNum+0x10c>)
 8001ad4:	fba3 2301 	umull	r2, r3, r3, r1
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1aca      	subs	r2, r1, r3
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001ae8:	7dfa      	ldrb	r2, [r7, #23]
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	3b02      	subs	r3, #2
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d11d      	bne.n	8001b2e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	3b02      	subs	r3, #2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	7dbb      	ldrb	r3, [r7, #22]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	fb12 f303 	smulbb	r3, r2, r3
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	4413      	add	r3, r2
 8001b06:	b298      	uxth	r0, r3
 8001b08:	88ba      	ldrh	r2, [r7, #4]
 8001b0a:	89b9      	ldrh	r1, [r7, #12]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	222e      	movs	r2, #46	; 0x2e
 8001b1e:	f7ff fe3d 	bl	800179c <lcd_ShowChar>
			t++;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	3301      	adds	r3, #1
 8001b26:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	7dbb      	ldrb	r3, [r7, #22]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	fb12 f303 	smulbb	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	89fb      	ldrh	r3, [r7, #14]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b298      	uxth	r0, r3
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	3330      	adds	r3, #48	; 0x30
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	88bc      	ldrh	r4, [r7, #4]
 8001b4a:	89b9      	ldrh	r1, [r7, #12]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	f7ff fe1e 	bl	800179c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	3301      	adds	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
 8001b66:	7dfa      	ldrb	r2, [r7, #23]
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3a3      	bcc.n	8001ab6 <lcd_ShowFloatNum+0x46>
	}
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	42c80000 	.word	0x42c80000
 8001b7c:	cccccccd 	.word	0xcccccccd

08001b80 <lcd_ShowString>:

void lcd_ShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08b      	sub	sp, #44	; 0x2c
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	81bb      	strh	r3, [r7, #12]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8001b9e:	e048      	b.n	8001c32 <lcd_ShowString+0xb2>
		if (!bHz) {
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d145      	bne.n	8001c32 <lcd_ShowString+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <lcd_ShowString+0xc4>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc3f      	bgt.n	8001c3c <lcd_ShowString+0xbc>
 8001bbc:	89ba      	ldrh	r2, [r7, #12]
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <lcd_ShowString+0xc4>)
 8001bc0:	885b      	ldrh	r3, [r3, #2]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc8:	1acb      	subs	r3, r1, r3
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dc36      	bgt.n	8001c3c <lcd_ShowString+0xbc>
				return;
			if (*str > 0x80)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b80      	cmp	r3, #128	; 0x80
 8001bd4:	d902      	bls.n	8001bdc <lcd_ShowString+0x5c>
				bHz = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	e02a      	b.n	8001c32 <lcd_ShowString+0xb2>
			else {
				if (*str == 0x0D) {
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0d      	cmp	r3, #13
 8001be2:	d10b      	bne.n	8001bfc <lcd_ShowString+0x7c>
					y += sizey;
 8001be4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	89bb      	ldrh	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001bf0:	8abb      	ldrh	r3, [r7, #20]
 8001bf2:	81fb      	strh	r3, [r7, #14]
					str++;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	e017      	b.n	8001c2c <lcd_ShowString+0xac>
				} else {
					lcd_ShowChar(x, y, *str, fc, bc, sizey, mode);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	88fc      	ldrh	r4, [r7, #6]
 8001c02:	89b9      	ldrh	r1, [r7, #12]
 8001c04:	89f8      	ldrh	r0, [r7, #14]
 8001c06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7ff fdc0 	bl	800179c <lcd_ShowChar>
					x += sizey / 2;
 8001c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	89fb      	ldrh	r3, [r7, #14]
 8001c28:	4413      	add	r3, r2
 8001c2a:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1b2      	bne.n	8001ba0 <lcd_ShowString+0x20>
 8001c3a:	e000      	b.n	8001c3e <lcd_ShowString+0xbe>
				return;
 8001c3c:	bf00      	nop
			}
		}
	}
}
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	20000244 	.word	0x20000244

08001c48 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <lcd_SetDir+0x44>)
 8001c64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c68:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <lcd_SetDir+0x44>)
 8001c6c:	22f0      	movs	r2, #240	; 0xf0
 8001c6e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c70:	e006      	b.n	8001c80 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <lcd_SetDir+0x44>)
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <lcd_SetDir+0x44>)
 8001c7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c7e:	805a      	strh	r2, [r3, #2]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000244 	.word	0x20000244

08001c90 <lcd_init>:


void lcd_init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9a:	48aa      	ldr	r0, [pc, #680]	; (8001f44 <lcd_init+0x2b4>)
 8001c9c:	f002 fd52 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca4:	f001 fa68 	bl	8003178 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	48a5      	ldr	r0, [pc, #660]	; (8001f44 <lcd_init+0x2b4>)
 8001cb0:	f002 fd48 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb8:	f001 fa5e 	bl	8003178 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff ffc3 	bl	8001c48 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001cc2:	20d3      	movs	r0, #211	; 0xd3
 8001cc4:	f7ff fca2 	bl	800160c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cc8:	f7ff fcc0 	bl	800164c <LCD_RD_DATA>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b9d      	ldr	r3, [pc, #628]	; (8001f48 <lcd_init+0x2b8>)
 8001cd2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cd4:	f7ff fcba 	bl	800164c <LCD_RD_DATA>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	; (8001f48 <lcd_init+0x2b8>)
 8001cde:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001ce0:	f7ff fcb4 	bl	800164c <LCD_RD_DATA>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b97      	ldr	r3, [pc, #604]	; (8001f48 <lcd_init+0x2b8>)
 8001cea:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cec:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <lcd_init+0x2b8>)
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b94      	ldr	r3, [pc, #592]	; (8001f48 <lcd_init+0x2b8>)
 8001cf6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001cf8:	f7ff fca8 	bl	800164c <LCD_RD_DATA>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b91      	ldr	r3, [pc, #580]	; (8001f48 <lcd_init+0x2b8>)
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b8f      	ldr	r3, [pc, #572]	; (8001f48 <lcd_init+0x2b8>)
 8001d0a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d0c:	20cf      	movs	r0, #207	; 0xcf
 8001d0e:	f7ff fc7d 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff fc8a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d18:	20c1      	movs	r0, #193	; 0xc1
 8001d1a:	f7ff fc87 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d1e:	2030      	movs	r0, #48	; 0x30
 8001d20:	f7ff fc84 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d24:	20ed      	movs	r0, #237	; 0xed
 8001d26:	f7ff fc71 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d2a:	2064      	movs	r0, #100	; 0x64
 8001d2c:	f7ff fc7e 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f7ff fc7b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d36:	2012      	movs	r0, #18
 8001d38:	f7ff fc78 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d3c:	2081      	movs	r0, #129	; 0x81
 8001d3e:	f7ff fc75 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d42:	20e8      	movs	r0, #232	; 0xe8
 8001d44:	f7ff fc62 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d48:	2085      	movs	r0, #133	; 0x85
 8001d4a:	f7ff fc6f 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d4e:	2010      	movs	r0, #16
 8001d50:	f7ff fc6c 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d54:	207a      	movs	r0, #122	; 0x7a
 8001d56:	f7ff fc69 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d5a:	20cb      	movs	r0, #203	; 0xcb
 8001d5c:	f7ff fc56 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d60:	2039      	movs	r0, #57	; 0x39
 8001d62:	f7ff fc63 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d66:	202c      	movs	r0, #44	; 0x2c
 8001d68:	f7ff fc60 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fc5d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d72:	2034      	movs	r0, #52	; 0x34
 8001d74:	f7ff fc5a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fc57 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d7e:	20f7      	movs	r0, #247	; 0xf7
 8001d80:	f7ff fc44 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d84:	2020      	movs	r0, #32
 8001d86:	f7ff fc51 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d8a:	20ea      	movs	r0, #234	; 0xea
 8001d8c:	f7ff fc3e 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff fc4b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fc48 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d9c:	20c0      	movs	r0, #192	; 0xc0
 8001d9e:	f7ff fc35 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001da2:	201b      	movs	r0, #27
 8001da4:	f7ff fc42 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001da8:	20c1      	movs	r0, #193	; 0xc1
 8001daa:	f7ff fc2f 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff fc3c 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001db4:	20c5      	movs	r0, #197	; 0xc5
 8001db6:	f7ff fc29 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001dba:	2030      	movs	r0, #48	; 0x30
 8001dbc:	f7ff fc36 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001dc0:	2030      	movs	r0, #48	; 0x30
 8001dc2:	f7ff fc33 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001dc6:	20c7      	movs	r0, #199	; 0xc7
 8001dc8:	f7ff fc20 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001dcc:	20b7      	movs	r0, #183	; 0xb7
 8001dce:	f7ff fc2d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001dd2:	2036      	movs	r0, #54	; 0x36
 8001dd4:	f7ff fc1a 	bl	800160c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001dd8:	2008      	movs	r0, #8
 8001dda:	f7ff fc27 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001dde:	203a      	movs	r0, #58	; 0x3a
 8001de0:	f7ff fc14 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001de4:	2055      	movs	r0, #85	; 0x55
 8001de6:	f7ff fc21 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dea:	20b1      	movs	r0, #177	; 0xb1
 8001dec:	f7ff fc0e 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fc1b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001df6:	201a      	movs	r0, #26
 8001df8:	f7ff fc18 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001dfc:	20b6      	movs	r0, #182	; 0xb6
 8001dfe:	f7ff fc05 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e02:	200a      	movs	r0, #10
 8001e04:	f7ff fc12 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e08:	20a2      	movs	r0, #162	; 0xa2
 8001e0a:	f7ff fc0f 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e0e:	20f2      	movs	r0, #242	; 0xf2
 8001e10:	f7ff fbfc 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff fc09 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e1a:	2026      	movs	r0, #38	; 0x26
 8001e1c:	f7ff fbf6 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff fc03 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e26:	20e0      	movs	r0, #224	; 0xe0
 8001e28:	f7ff fbf0 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e2c:	200f      	movs	r0, #15
 8001e2e:	f7ff fbfd 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e32:	202a      	movs	r0, #42	; 0x2a
 8001e34:	f7ff fbfa 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e38:	2028      	movs	r0, #40	; 0x28
 8001e3a:	f7ff fbf7 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e3e:	2008      	movs	r0, #8
 8001e40:	f7ff fbf4 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e44:	200e      	movs	r0, #14
 8001e46:	f7ff fbf1 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e4a:	2008      	movs	r0, #8
 8001e4c:	f7ff fbee 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e50:	2054      	movs	r0, #84	; 0x54
 8001e52:	f7ff fbeb 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e56:	20a9      	movs	r0, #169	; 0xa9
 8001e58:	f7ff fbe8 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e5c:	2043      	movs	r0, #67	; 0x43
 8001e5e:	f7ff fbe5 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f7ff fbe2 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e68:	200f      	movs	r0, #15
 8001e6a:	f7ff fbdf 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fbdc 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fbd9 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fbd6 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fbd3 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e86:	20e1      	movs	r0, #225	; 0xe1
 8001e88:	f7ff fbc0 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fbcd 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e92:	2015      	movs	r0, #21
 8001e94:	f7ff fbca 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e98:	2017      	movs	r0, #23
 8001e9a:	f7ff fbc7 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e9e:	2007      	movs	r0, #7
 8001ea0:	f7ff fbc4 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ea4:	2011      	movs	r0, #17
 8001ea6:	f7ff fbc1 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f7ff fbbe 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001eb0:	202b      	movs	r0, #43	; 0x2b
 8001eb2:	f7ff fbbb 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001eb6:	2056      	movs	r0, #86	; 0x56
 8001eb8:	f7ff fbb8 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ebc:	203c      	movs	r0, #60	; 0x3c
 8001ebe:	f7ff fbb5 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ec2:	2005      	movs	r0, #5
 8001ec4:	f7ff fbb2 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ec8:	2010      	movs	r0, #16
 8001eca:	f7ff fbaf 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f7ff fbac 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ed4:	203f      	movs	r0, #63	; 0x3f
 8001ed6:	f7ff fba9 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001eda:	203f      	movs	r0, #63	; 0x3f
 8001edc:	f7ff fba6 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ee0:	200f      	movs	r0, #15
 8001ee2:	f7ff fba3 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ee6:	202b      	movs	r0, #43	; 0x2b
 8001ee8:	f7ff fb90 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff fb9d 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fb9a 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff fb97 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001efe:	203f      	movs	r0, #63	; 0x3f
 8001f00:	f7ff fb94 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f04:	202a      	movs	r0, #42	; 0x2a
 8001f06:	f7ff fb81 	bl	800160c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fb8e 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fb8b 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fb88 	bl	800162c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f1c:	20ef      	movs	r0, #239	; 0xef
 8001f1e:	f7ff fb85 	bl	800162c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f22:	2011      	movs	r0, #17
 8001f24:	f7ff fb72 	bl	800160c <LCD_WR_REG>
	HAL_Delay(120);
 8001f28:	2078      	movs	r0, #120	; 0x78
 8001f2a:	f001 f925 	bl	8003178 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f2e:	2029      	movs	r0, #41	; 0x29
 8001f30:	f7ff fb6c 	bl	800160c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f3a:	4804      	ldr	r0, [pc, #16]	; (8001f4c <lcd_init+0x2bc>)
 8001f3c:	f002 fc02 	bl	8004744 <HAL_GPIO_WritePin>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40020800 	.word	0x40020800
 8001f48:	20000244 	.word	0x20000244
 8001f4c:	40020000 	.word	0x40020000

08001f50 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2140      	movs	r1, #64	; 0x40
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <led7_init+0x14>)
 8001f5a:	f002 fbf3 	bl	8004744 <HAL_GPIO_WritePin>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021800 	.word	0x40021800

08001f68 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <led7_Scan+0x104>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b3d      	ldr	r3, [pc, #244]	; (800206c <led7_Scan+0x104>)
 8001f76:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <led7_Scan+0x108>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <led7_Scan+0x10c>)
 8001f80:	5c9b      	ldrb	r3, [r3, r2]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <led7_Scan+0x104>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b36      	ldr	r3, [pc, #216]	; (800206c <led7_Scan+0x104>)
 8001f94:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <led7_Scan+0x108>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d846      	bhi.n	800202c <led7_Scan+0xc4>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <led7_Scan+0x3c>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fd3 	.word	0x08001fd3
 8001fac:	08001ff1 	.word	0x08001ff1
 8001fb0:	0800200f 	.word	0x0800200f
	case 0:
		spi_buffer |= 0x00b0;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <led7_Scan+0x104>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <led7_Scan+0x104>)
 8001fc0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <led7_Scan+0x104>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <led7_Scan+0x104>)
 8001fce:	801a      	strh	r2, [r3, #0]
		break;
 8001fd0:	e02d      	b.n	800202e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <led7_Scan+0x104>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <led7_Scan+0x104>)
 8001fde:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <led7_Scan+0x104>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f023 0320 	bic.w	r3, r3, #32
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <led7_Scan+0x104>)
 8001fec:	801a      	strh	r2, [r3, #0]
		break;
 8001fee:	e01e      	b.n	800202e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <led7_Scan+0x104>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <led7_Scan+0x104>)
 8001ffc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <led7_Scan+0x104>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f023 0310 	bic.w	r3, r3, #16
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <led7_Scan+0x104>)
 800200a:	801a      	strh	r2, [r3, #0]
		break;
 800200c:	e00f      	b.n	800202e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <led7_Scan+0x104>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <led7_Scan+0x104>)
 800201a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <led7_Scan+0x104>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <led7_Scan+0x104>)
 8002028:	801a      	strh	r2, [r3, #0]
		break;
 800202a:	e000      	b.n	800202e <led7_Scan+0xc6>
	default:
		break;
 800202c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <led7_Scan+0x108>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	425a      	negs	r2, r3
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	bf58      	it	pl
 8002040:	4253      	negpl	r3, r2
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <led7_Scan+0x108>)
 8002046:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	480a      	ldr	r0, [pc, #40]	; (8002078 <led7_Scan+0x110>)
 800204e:	f002 fb79 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002052:	2301      	movs	r3, #1
 8002054:	2202      	movs	r2, #2
 8002056:	4905      	ldr	r1, [pc, #20]	; (800206c <led7_Scan+0x104>)
 8002058:	4808      	ldr	r0, [pc, #32]	; (800207c <led7_Scan+0x114>)
 800205a:	f003 f9ce 	bl	80053fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800205e:	2201      	movs	r2, #1
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <led7_Scan+0x110>)
 8002064:	f002 fb6e 	bl	8004744 <HAL_GPIO_WritePin>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000000e 	.word	0x2000000e
 8002070:	200000b0 	.word	0x200000b0
 8002074:	20000000 	.word	0x20000000
 8002078:	40021800 	.word	0x40021800
 800207c:	2000028c 	.word	0x2000028c

08002080 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0e      	blt.n	80020b2 <led7_SetDigit+0x32>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b09      	cmp	r3, #9
 8002098:	dc0b      	bgt.n	80020b2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <led7_SetDigit+0x40>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b2d9      	uxtb	r1, r3
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <led7_SetDigit+0x44>)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	460a      	mov	r2, r1
 80020b0:	701a      	strb	r2, [r3, #0]
	}
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000004 	.word	0x20000004
 80020c4:	20000000 	.word	0x20000000

080020c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020cc:	f000 ffe2 	bl	8003094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d0:	f000 f82c 	bl	800212c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d4:	f7ff f90e 	bl	80012f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80020d8:	f000 fc44 	bl	8002964 <MX_SPI1_Init>
  MX_TIM2_Init();
 80020dc:	f000 fde6 	bl	8002cac <MX_TIM2_Init>
  MX_FSMC_Init();
 80020e0:	f7ff f838 	bl	8001154 <MX_FSMC_Init>
  MX_I2C1_Init();
 80020e4:	f7ff fa1c 	bl	8001520 <MX_I2C1_Init>
  MX_DMA_Init();
 80020e8:	f7ff f814 	bl	8001114 <MX_DMA_Init>
  MX_ADC1_Init();
 80020ec:	f7fe fe5a 	bl	8000da4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80020f0:	f000 ff2c 	bl	8002f4c <MX_USART1_UART_Init>
  MX_TIM13_Init();
 80020f4:	f000 fe26 	bl	8002d44 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80020f8:	f000 f882 	bl	8002200 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fb03 	bl	8001708 <lcd_Clear>

	while (1) {
		while (!flag_timer2);
 8002102:	bf00      	nop
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <main+0x60>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0fb      	beq.n	8002104 <main+0x3c>
		flag_timer2 = 0;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <main+0x60>)
 800210e:	2200      	movs	r2, #0
 8002110:	801a      	strh	r2, [r3, #0]
		button_Scan();
 8002112:	f7fe ff71 	bl	8000ff8 <button_Scan>
		TestADC();
 8002116:	f000 f90f 	bl	8002338 <TestADC>
		TestBuzzer();
 800211a:	f000 fa47 	bl	80025ac <TestBuzzer>
		setTime_led7();
 800211e:	f000 f883 	bl	8002228 <setTime_led7>
		led7_Scan();
 8002122:	f7ff ff21 	bl	8001f68 <led7_Scan>
		while (!flag_timer2);
 8002126:	e7ec      	b.n	8002102 <main+0x3a>
 8002128:	200000c0 	.word	0x200000c0

0800212c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b094      	sub	sp, #80	; 0x50
 8002130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	2230      	movs	r2, #48	; 0x30
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f005 ffbe 	bl	80080bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <SystemClock_Config+0xcc>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <SystemClock_Config+0xcc>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <SystemClock_Config+0xcc>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <SystemClock_Config+0xd0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <SystemClock_Config+0xd0>)
 8002176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <SystemClock_Config+0xd0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002190:	2310      	movs	r3, #16
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002194:	2302      	movs	r3, #2
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002198:	2300      	movs	r3, #0
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800219c:	2308      	movs	r3, #8
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021a0:	23a8      	movs	r3, #168	; 0xa8
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021a8:	2304      	movs	r3, #4
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ac:	f107 0320 	add.w	r3, r7, #32
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fc25 	bl	8004a00 <HAL_RCC_OscConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021bc:	f000 fa42 	bl	8002644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c0:	230f      	movs	r3, #15
 80021c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80021d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	2105      	movs	r1, #5
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fe86 	bl	8004ef0 <HAL_RCC_ClockConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021ea:	f000 fa2b 	bl	8002644 <Error_Handler>
  }
}
 80021ee:	bf00      	nop
 80021f0:	3750      	adds	r7, #80	; 0x50
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40007000 	.word	0x40007000

08002200 <system_init>:

/* USER CODE BEGIN 4 */
	void system_init() {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
		button_init();
 8002204:	f7fe feec 	bl	8000fe0 <button_init>
		lcd_init();
 8002208:	f7ff fd42 	bl	8001c90 <lcd_init>
		led7_init();
 800220c:	f7ff fea0 	bl	8001f50 <led7_init>
		sensor_init();
 8002210:	f000 fa6c 	bl	80026ec <sensor_init>
		buzzer_init();
 8002214:	f7fe ff5c 	bl	80010d0 <buzzer_init>

		timer_init();
 8002218:	f000 fb54 	bl	80028c4 <timer_init>
		setTimer2(50);
 800221c:	2032      	movs	r0, #50	; 0x32
 800221e:	f000 fb5b 	bl	80028d8 <setTimer2>
	}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <setTime_led7>:
		led7_SetDigit(4, 2, 0);
		led7_SetDigit(7, 3, 0);
	}

	void setTime_led7()
	{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
		count_update = (count_update + 1) % 20;
 800222c:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <setTime_led7+0xf8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c59      	adds	r1, r3, #1
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <setTime_led7+0xfc>)
 8002234:	fb83 2301 	smull	r2, r3, r3, r1
 8002238:	10da      	asrs	r2, r3, #3
 800223a:	17cb      	asrs	r3, r1, #31
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	1aca      	subs	r2, r1, r3
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <setTime_led7+0xf8>)
 800224a:	601a      	str	r2, [r3, #0]
		if (count_update == 0)
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <setTime_led7+0xf8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d163      	bne.n	800231c <setTime_led7+0xf4>
		{
			second = second + 1;
 8002254:	4b34      	ldr	r3, [pc, #208]	; (8002328 <setTime_led7+0x100>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a33      	ldr	r2, [pc, #204]	; (8002328 <setTime_led7+0x100>)
 800225c:	6013      	str	r3, [r2, #0]
			if(second >= 60)
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <setTime_led7+0x100>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b3b      	cmp	r3, #59	; 0x3b
 8002264:	dd1e      	ble.n	80022a4 <setTime_led7+0x7c>
			{
			  second = 0;
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <setTime_led7+0x100>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
			  min = min + 1;
 800226c:	4b2f      	ldr	r3, [pc, #188]	; (800232c <setTime_led7+0x104>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a2e      	ldr	r2, [pc, #184]	; (800232c <setTime_led7+0x104>)
 8002274:	6013      	str	r3, [r2, #0]
			  if (min >= 60){
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <setTime_led7+0x104>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b3b      	cmp	r3, #59	; 0x3b
 800227c:	dd12      	ble.n	80022a4 <setTime_led7+0x7c>
				  min = 0;
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <setTime_led7+0x104>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
				  hour = (hour +1) % 24;
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <setTime_led7+0x108>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <setTime_led7+0x10c>)
 800228c:	fb83 2301 	smull	r2, r3, r3, r1
 8002290:	109a      	asrs	r2, r3, #2
 8002292:	17cb      	asrs	r3, r1, #31
 8002294:	1ad2      	subs	r2, r2, r3
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1aca      	subs	r2, r1, r3
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <setTime_led7+0x108>)
 80022a2:	601a      	str	r2, [r3, #0]
			  }
		  }
			led7_SetDigit(hour/10, 0, 0);
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <setTime_led7+0x108>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <setTime_led7+0xfc>)
 80022aa:	fb82 1203 	smull	r1, r2, r2, r3
 80022ae:	1092      	asrs	r2, r2, #2
 80022b0:	17db      	asrs	r3, r3, #31
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fee1 	bl	8002080 <led7_SetDigit>
			led7_SetDigit(hour%10, 1, 0);
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <setTime_led7+0x108>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <setTime_led7+0xfc>)
 80022c4:	fb83 1302 	smull	r1, r3, r3, r2
 80022c8:	1099      	asrs	r1, r3, #2
 80022ca:	17d3      	asrs	r3, r2, #31
 80022cc:	1ac8      	subs	r0, r1, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4403      	add	r3, r0
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	1ad0      	subs	r0, r2, r3
 80022d8:	2200      	movs	r2, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	f7ff fed0 	bl	8002080 <led7_SetDigit>
			led7_SetDigit(min/10, 2, 0);
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <setTime_led7+0x104>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <setTime_led7+0xfc>)
 80022e6:	fb82 1203 	smull	r1, r2, r2, r3
 80022ea:	1092      	asrs	r2, r2, #2
 80022ec:	17db      	asrs	r3, r3, #31
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	2102      	movs	r1, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fec3 	bl	8002080 <led7_SetDigit>
			led7_SetDigit(min%10, 3, 0);
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <setTime_led7+0x104>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <setTime_led7+0xfc>)
 8002300:	fb83 1302 	smull	r1, r3, r3, r2
 8002304:	1099      	asrs	r1, r3, #2
 8002306:	17d3      	asrs	r3, r2, #31
 8002308:	1ac8      	subs	r0, r1, r3
 800230a:	4603      	mov	r3, r0
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4403      	add	r3, r0
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	1ad0      	subs	r0, r2, r3
 8002314:	2200      	movs	r2, #0
 8002316:	2103      	movs	r1, #3
 8002318:	f7ff feb2 	bl	8002080 <led7_SetDigit>
		}
	}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200000b4 	.word	0x200000b4
 8002324:	66666667 	.word	0x66666667
 8002328:	20000018 	.word	0x20000018
 800232c:	20000014 	.word	0x20000014
 8002330:	20000010 	.word	0x20000010
 8002334:	2aaaaaab 	.word	0x2aaaaaab

08002338 <TestADC>:
		}
	}

	uint8_t count_adc = 0;
	int alert = 0;
	void TestADC() {
 8002338:	b580      	push	{r7, lr}
 800233a:	ed2d 8b02 	vpush	{d8}
 800233e:	b084      	sub	sp, #16
 8002340:	af04      	add	r7, sp, #16
		count_adc = (count_adc + 1) % 20;
 8002342:	4b8d      	ldr	r3, [pc, #564]	; (8002578 <TestADC+0x240>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <TestADC+0x244>)
 800234a:	fb83 1302 	smull	r1, r3, r3, r2
 800234e:	10d9      	asrs	r1, r3, #3
 8002350:	17d3      	asrs	r3, r2, #31
 8002352:	1ac9      	subs	r1, r1, r3
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	1ad1      	subs	r1, r2, r3
 800235e:	b2ca      	uxtb	r2, r1
 8002360:	4b85      	ldr	r3, [pc, #532]	; (8002578 <TestADC+0x240>)
 8002362:	701a      	strb	r2, [r3, #0]
		if (count_adc == 0) {
 8002364:	4b84      	ldr	r3, [pc, #528]	; (8002578 <TestADC+0x240>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 80ff 	bne.w	800256c <TestADC+0x234>
			sensor_Read();
 800236e:	f000 f9cb 	bl	8002708 <sensor_Read>
			if (sensor_GetPotentiometer() >= 0.7 * 4095)
 8002372:	f000 f9e3 	bl	800273c <sensor_GetPotentiometer>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	f640 3332 	movw	r3, #2866	; 0xb32
 800237e:	429a      	cmp	r2, r3
 8002380:	d91b      	bls.n	80023ba <TestADC+0x82>
			{
				if (alert == 0)
 8002382:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <TestADC+0x248>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <TestADC+0x60>
				{
					buzzer_SetVolume(0);
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe feaa 	bl	80010e4 <buzzer_SetVolume>
					alert = 1;
 8002390:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <TestADC+0x248>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e009      	b.n	80023ac <TestADC+0x74>
				}
				else if (alert == 1)
 8002398:	4b79      	ldr	r3, [pc, #484]	; (8002580 <TestADC+0x248>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <TestADC+0x74>
				{
					buzzer_SetVolume(75);
 80023a0:	204b      	movs	r0, #75	; 0x4b
 80023a2:	f7fe fe9f 	bl	80010e4 <buzzer_SetVolume>
					alert = 0;
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <TestADC+0x248>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
				}
				uart_Rs232SendString("------WARNING------\n");
 80023ac:	4875      	ldr	r0, [pc, #468]	; (8002584 <TestADC+0x24c>)
 80023ae:	f000 fd8d 	bl	8002ecc <uart_Rs232SendString>
				uart_Rs232SendString("Potentiometer > 70%\n");
 80023b2:	4875      	ldr	r0, [pc, #468]	; (8002588 <TestADC+0x250>)
 80023b4:	f000 fd8a 	bl	8002ecc <uart_Rs232SendString>
 80023b8:	e002      	b.n	80023c0 <TestADC+0x88>
			}
			else
			{
				buzzer_SetVolume(0);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fe92 	bl	80010e4 <buzzer_SetVolume>
			}
			lcd_ShowString(10, 80, "Voltage(V):", RED, BLACK, 16, 0);
 80023c0:	2300      	movs	r3, #0
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	2310      	movs	r3, #16
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023d0:	4a6e      	ldr	r2, [pc, #440]	; (800258c <TestADC+0x254>)
 80023d2:	2150      	movs	r1, #80	; 0x50
 80023d4:	200a      	movs	r0, #10
 80023d6:	f7ff fbd3 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 80, sensor_GetVoltage(), 4, RED, BLACK, 16);
 80023da:	f000 f9bd 	bl	8002758 <sensor_GetVoltage>
 80023de:	eef0 7a40 	vmov.f32	s15, s0
 80023e2:	2310      	movs	r3, #16
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ee:	2204      	movs	r2, #4
 80023f0:	eeb0 0a67 	vmov.f32	s0, s15
 80023f4:	2150      	movs	r1, #80	; 0x50
 80023f6:	208c      	movs	r0, #140	; 0x8c
 80023f8:	f7ff fb3a 	bl	8001a70 <lcd_ShowFloatNum>
			lcd_ShowString(10, 100, "Current(mA):", RED, BLACK, 16, 0);
 80023fc:	2300      	movs	r3, #0
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	2310      	movs	r3, #16
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2300      	movs	r3, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800240c:	4a60      	ldr	r2, [pc, #384]	; (8002590 <TestADC+0x258>)
 800240e:	2164      	movs	r1, #100	; 0x64
 8002410:	200a      	movs	r0, #10
 8002412:	f7ff fbb5 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 100, sensor_GetCurrent(), 4, RED, BLACK, 16);
 8002416:	f000 f9db 	bl	80027d0 <sensor_GetCurrent>
 800241a:	eef0 7a40 	vmov.f32	s15, s0
 800241e:	2310      	movs	r3, #16
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	2300      	movs	r3, #0
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800242a:	2204      	movs	r2, #4
 800242c:	eeb0 0a67 	vmov.f32	s0, s15
 8002430:	2164      	movs	r1, #100	; 0x64
 8002432:	208c      	movs	r0, #140	; 0x8c
 8002434:	f7ff fb1c 	bl	8001a70 <lcd_ShowFloatNum>


			lcd_ShowString(10, 120, "Power(mW):", RED, BLACK, 16, 0);
 8002438:	2300      	movs	r3, #0
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	2310      	movs	r3, #16
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2300      	movs	r3, #0
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <TestADC+0x25c>)
 800244a:	2178      	movs	r1, #120	; 0x78
 800244c:	200a      	movs	r0, #10
 800244e:	f7ff fb97 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 120, sensor_GetCurrent() * sensor_GetVoltage(), 4, RED, BLACK, 16);
 8002452:	f000 f9bd 	bl	80027d0 <sensor_GetCurrent>
 8002456:	eeb0 8a40 	vmov.f32	s16, s0
 800245a:	f000 f97d 	bl	8002758 <sensor_GetVoltage>
 800245e:	eef0 7a40 	vmov.f32	s15, s0
 8002462:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002466:	2310      	movs	r3, #16
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	2300      	movs	r3, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002472:	2204      	movs	r2, #4
 8002474:	eeb0 0a67 	vmov.f32	s0, s15
 8002478:	2178      	movs	r1, #120	; 0x78
 800247a:	208c      	movs	r0, #140	; 0x8c
 800247c:	f7ff faf8 	bl	8001a70 <lcd_ShowFloatNum>

			if (sensor_GetLight() <= 4095 * 0.5)
 8002480:	f000 f950 	bl	8002724 <sensor_GetLight>
 8002484:	4603      	mov	r3, r0
 8002486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800248a:	d21a      	bcs.n	80024c2 <TestADC+0x18a>
			{
				lcd_ShowString(10, 140, "Light:", RED, BLACK, 16, 0);
 800248c:	2300      	movs	r3, #0
 800248e:	9302      	str	r3, [sp, #8]
 8002490:	2310      	movs	r3, #16
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2300      	movs	r3, #0
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800249c:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <TestADC+0x260>)
 800249e:	218c      	movs	r1, #140	; 0x8c
 80024a0:	200a      	movs	r0, #10
 80024a2:	f7ff fb6d 	bl	8001b80 <lcd_ShowString>
				lcd_ShowString(140, 140, "Strong", RED, BLACK, 16, 0);
 80024a6:	2300      	movs	r3, #0
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	2310      	movs	r3, #16
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2300      	movs	r3, #0
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024b6:	4a39      	ldr	r2, [pc, #228]	; (800259c <TestADC+0x264>)
 80024b8:	218c      	movs	r1, #140	; 0x8c
 80024ba:	208c      	movs	r0, #140	; 0x8c
 80024bc:	f7ff fb60 	bl	8001b80 <lcd_ShowString>
 80024c0:	e019      	b.n	80024f6 <TestADC+0x1be>
			}
			else
			{
				lcd_ShowString(10, 140, "Light:", RED, BLACK, 16, 0);
 80024c2:	2300      	movs	r3, #0
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2310      	movs	r3, #16
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024d2:	4a31      	ldr	r2, [pc, #196]	; (8002598 <TestADC+0x260>)
 80024d4:	218c      	movs	r1, #140	; 0x8c
 80024d6:	200a      	movs	r0, #10
 80024d8:	f7ff fb52 	bl	8001b80 <lcd_ShowString>
				lcd_ShowString(140, 140, "Weak", RED, BLACK, 16, 0);
 80024dc:	2300      	movs	r3, #0
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	2310      	movs	r3, #16
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2300      	movs	r3, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024ec:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <TestADC+0x268>)
 80024ee:	218c      	movs	r1, #140	; 0x8c
 80024f0:	208c      	movs	r0, #140	; 0x8c
 80024f2:	f7ff fb45 	bl	8001b80 <lcd_ShowString>
			}

			lcd_ShowString(10, 180, "Potentiometer:", RED, BLACK, 16, 0);
 80024f6:	2300      	movs	r3, #0
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	2310      	movs	r3, #16
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <TestADC+0x26c>)
 8002508:	21b4      	movs	r1, #180	; 0xb4
 800250a:	200a      	movs	r0, #10
 800250c:	f7ff fb38 	bl	8001b80 <lcd_ShowString>
			lcd_ShowIntNum(140, 180, sensor_GetPotentiometer(), 4, RED, BLACK,
 8002510:	f000 f914 	bl	800273c <sensor_GetPotentiometer>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	2310      	movs	r3, #16
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	2300      	movs	r3, #0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2304      	movs	r3, #4
 8002528:	21b4      	movs	r1, #180	; 0xb4
 800252a:	208c      	movs	r0, #140	; 0x8c
 800252c:	f7ff fa22 	bl	8001974 <lcd_ShowIntNum>
					16);
			lcd_ShowString(10, 160, "Temperature(C):", RED, BLACK, 16, 0);
 8002530:	2300      	movs	r3, #0
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	2310      	movs	r3, #16
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <TestADC+0x270>)
 8002542:	21a0      	movs	r1, #160	; 0xa0
 8002544:	200a      	movs	r0, #10
 8002546:	f7ff fb1b 	bl	8001b80 <lcd_ShowString>
			lcd_ShowFloatNum(140, 160, sensor_GetTemperature(), 4, RED, BLACK,
 800254a:	f000 f99d 	bl	8002888 <sensor_GetTemperature>
 800254e:	eef0 7a40 	vmov.f32	s15, s0
 8002552:	2310      	movs	r3, #16
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800255e:	2204      	movs	r2, #4
 8002560:	eeb0 0a67 	vmov.f32	s0, s15
 8002564:	21a0      	movs	r1, #160	; 0xa0
 8002566:	208c      	movs	r0, #140	; 0x8c
 8002568:	f7ff fa82 	bl	8001a70 <lcd_ShowFloatNum>
					16);
		}
	}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	ecbd 8b02 	vpop	{d8}
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200000b8 	.word	0x200000b8
 800257c:	66666667 	.word	0x66666667
 8002580:	200000bc 	.word	0x200000bc
 8002584:	08009144 	.word	0x08009144
 8002588:	0800915c 	.word	0x0800915c
 800258c:	08009174 	.word	0x08009174
 8002590:	08009180 	.word	0x08009180
 8002594:	08009190 	.word	0x08009190
 8002598:	0800919c 	.word	0x0800919c
 800259c:	080091a4 	.word	0x080091a4
 80025a0:	080091ac 	.word	0x080091ac
 80025a4:	080091b4 	.word	0x080091b4
 80025a8:	080091c4 	.word	0x080091c4

080025ac <TestBuzzer>:

	void TestBuzzer() {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
		if (IsButtonUp()) {
 80025b0:	f000 f810 	bl	80025d4 <IsButtonUp>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <TestBuzzer+0x14>
			buzzer_SetVolume(50);
 80025ba:	2032      	movs	r0, #50	; 0x32
 80025bc:	f7fe fd92 	bl	80010e4 <buzzer_SetVolume>
		}

		if (IsButtonDown()) {
 80025c0:	f000 f824 	bl	800260c <IsButtonDown>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <TestBuzzer+0x24>
			buzzer_SetVolume(0);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fd8a 	bl	80010e4 <buzzer_SetVolume>
		}
	}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <IsButtonUp>:

	unsigned char IsButtonUp()
	{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
	    if ((button_count[3] == 1) || (button_count[3] >= 10 && button_count[3]%4 == 0))
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <IsButtonUp+0x34>)
 80025da:	88db      	ldrh	r3, [r3, #6]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d00a      	beq.n	80025f6 <IsButtonUp+0x22>
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <IsButtonUp+0x34>)
 80025e2:	88db      	ldrh	r3, [r3, #6]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d908      	bls.n	80025fa <IsButtonUp+0x26>
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <IsButtonUp+0x34>)
 80025ea:	88db      	ldrh	r3, [r3, #6]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <IsButtonUp+0x26>
	        return 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <IsButtonUp+0x28>
	    else
	        return 0;
 80025fa:	2300      	movs	r3, #0
	}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000180 	.word	0x20000180

0800260c <IsButtonDown>:

	unsigned char IsButtonDown()
	{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
	    if ((button_count[7] == 1) || (button_count[7] >= 10 && button_count[7]%4 == 0))
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <IsButtonDown+0x34>)
 8002612:	89db      	ldrh	r3, [r3, #14]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d00a      	beq.n	800262e <IsButtonDown+0x22>
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <IsButtonDown+0x34>)
 800261a:	89db      	ldrh	r3, [r3, #14]
 800261c:	2b09      	cmp	r3, #9
 800261e:	d908      	bls.n	8002632 <IsButtonDown+0x26>
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <IsButtonDown+0x34>)
 8002622:	89db      	ldrh	r3, [r3, #14]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <IsButtonDown+0x26>
	        return 1;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <IsButtonDown+0x28>
	    else
	        return 0;
 8002632:	2300      	movs	r3, #0
	}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000180 	.word	0x20000180

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002648:	b672      	cpsid	i
}
 800264a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800264c:	e7fe      	b.n	800264c <Error_Handler+0x8>
	...

08002650 <isRingBufferFull>:

int isRingBufferEmpty(RingBuffer *buffer) {
  return buffer->head == buffer->tail;
}

int isRingBufferFull(RingBuffer *buffer) {
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return (buffer->tail + 1) % BUFFER_SIZE == buffer->head;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	1c59      	adds	r1, r3, #1
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <isRingBufferFull+0x40>)
 8002660:	fb83 2301 	smull	r2, r3, r3, r1
 8002664:	109a      	asrs	r2, r3, #2
 8002666:	17cb      	asrs	r3, r1, #31
 8002668:	1ad2      	subs	r2, r2, r3
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	1aca      	subs	r2, r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	429a      	cmp	r2, r3
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	66666667 	.word	0x66666667

08002694 <addToRingBuffer>:

void addToRingBuffer(RingBuffer *buffer, int data) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  if (isRingBufferFull(buffer)) {
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffd6 	bl	8002650 <isRingBufferFull>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <addToRingBuffer+0x1e>
    printf("Ring buffer is full!\n");
 80026aa:	480e      	ldr	r0, [pc, #56]	; (80026e4 <addToRingBuffer+0x50>)
 80026ac:	f005 fd7c 	bl	80081a8 <puts>
    return;
 80026b0:	e015      	b.n	80026de <addToRingBuffer+0x4a>
  }

  buffer->data[buffer->tail] = data;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <addToRingBuffer+0x54>)
 80026c6:	fb83 2301 	smull	r2, r3, r3, r1
 80026ca:	109a      	asrs	r2, r3, #2
 80026cc:	17cb      	asrs	r3, r1, #31
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	1aca      	subs	r2, r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	080091d4 	.word	0x080091d4
 80026e8:	66666667 	.word	0x66666667

080026ec <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 80026f0:	2205      	movs	r2, #5
 80026f2:	4903      	ldr	r1, [pc, #12]	; (8002700 <sensor_init+0x14>)
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <sensor_init+0x18>)
 80026f6:	f000 fda7 	bl	8003248 <HAL_ADC_Start_DMA>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000280 	.word	0x20000280
 8002704:	200000d8 	.word	0x200000d8

08002708 <sensor_Read>:

void sensor_Read(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800270c:	2205      	movs	r2, #5
 800270e:	4903      	ldr	r1, [pc, #12]	; (800271c <sensor_Read+0x14>)
 8002710:	4803      	ldr	r0, [pc, #12]	; (8002720 <sensor_Read+0x18>)
 8002712:	f000 fd99 	bl	8003248 <HAL_ADC_Start_DMA>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000280 	.word	0x20000280
 8002720:	200000d8 	.word	0x200000d8

08002724 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <sensor_GetLight+0x14>)
 800272a:	889b      	ldrh	r3, [r3, #4]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000280 	.word	0x20000280

0800273c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <sensor_GetPotentiometer+0x14>)
 8002742:	88db      	ldrh	r3, [r3, #6]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000280 	.word	0x20000280
 8002754:	00000000 	.word	0x00000000

08002758 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <sensor_GetVoltage+0x70>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002768:	ee17 0a90 	vmov	r0, s15
 800276c:	f7fd fee4 	bl	8000538 <__aeabi_f2d>
 8002770:	a311      	add	r3, pc, #68	; (adr r3, 80027b8 <sensor_GetVoltage+0x60>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd ff37 	bl	80005e8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <sensor_GetVoltage+0x74>)
 8002788:	f7fd ff2e 	bl	80005e8 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	a30a      	add	r3, pc, #40	; (adr r3, 80027c0 <sensor_GetVoltage+0x68>)
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f7fe f84f 	bl	800083c <__aeabi_ddiv>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	f7fe f931 	bl	8000a0c <__aeabi_d2f>
 80027aa:	4603      	mov	r3, r0
 80027ac:	ee07 3a90 	vmov	s15, r3
}
 80027b0:	eeb0 0a67 	vmov.f32	s0, s15
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	66666666 	.word	0x66666666
 80027bc:	400a6666 	.word	0x400a6666
 80027c0:	cccccccd 	.word	0xcccccccd
 80027c4:	40b908ac 	.word	0x40b908ac
 80027c8:	20000280 	.word	0x20000280
 80027cc:	40280000 	.word	0x40280000

080027d0 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <sensor_GetCurrent+0xa8>)
 80027d6:	885b      	ldrh	r3, [r3, #2]
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e0:	ee17 0a90 	vmov	r0, s15
 80027e4:	f7fd fea8 	bl	8000538 <__aeabi_f2d>
 80027e8:	a31f      	add	r3, pc, #124	; (adr r3, 8002868 <sensor_GetCurrent+0x98>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fd fefb 	bl	80005e8 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <sensor_GetCurrent+0xac>)
 8002800:	f7fd fef2 	bl	80005e8 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	a318      	add	r3, pc, #96	; (adr r3, 8002870 <sensor_GetCurrent+0xa0>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fe f813 	bl	800083c <__aeabi_ddiv>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <sensor_GetCurrent+0xb0>)
 8002824:	f7fd fd28 	bl	8000278 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <sensor_GetCurrent+0xb4>)
 8002836:	f7fd fed7 	bl	80005e8 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <sensor_GetCurrent+0xb0>)
 8002848:	f7fd fff8 	bl	800083c <__aeabi_ddiv>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f8da 	bl	8000a0c <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	ee07 3a90 	vmov	s15, r3
}
 800285e:	eeb0 0a67 	vmov.f32	s0, s15
 8002862:	bd80      	pop	{r7, pc}
 8002864:	f3af 8000 	nop.w
 8002868:	66666666 	.word	0x66666666
 800286c:	400a6666 	.word	0x400a6666
 8002870:	147ae148 	.word	0x147ae148
 8002874:	40a4b2ee 	.word	0x40a4b2ee
 8002878:	20000280 	.word	0x20000280
 800287c:	408f4000 	.word	0x408f4000
 8002880:	40040000 	.word	0x40040000
 8002884:	40140000 	.word	0x40140000

08002888 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <sensor_GetTemperature+0x30>)
 800288e:	891b      	ldrh	r3, [r3, #8]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002898:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028bc <sensor_GetTemperature+0x34>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028c0 <sensor_GetTemperature+0x38>
 80028a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028a8:	eef0 7a66 	vmov.f32	s15, s13
}
 80028ac:	eeb0 0a67 	vmov.f32	s0, s15
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000280 	.word	0x20000280
 80028bc:	43a50000 	.word	0x43a50000
 80028c0:	457ff000 	.word	0x457ff000

080028c4 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <timer_init+0x10>)
 80028ca:	f003 fb49 	bl	8005f60 <HAL_TIM_Base_Start_IT>
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000032c 	.word	0x2000032c

080028d8 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <setTimer2+0x2c>)
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <setTimer2+0x2c>)
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <setTimer2+0x30>)
 80028ee:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <setTimer2+0x34>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	200000c4 	.word	0x200000c4
 8002908:	200000c2 	.word	0x200000c2
 800290c:	200000c0 	.word	0x200000c0

08002910 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d114      	bne.n	800294c <HAL_TIM_PeriodElapsedCallback+0x3c>
		if(timer2_counter > 0){
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002934:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002940:	2201      	movs	r2, #1
 8002942:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800294a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
//		led7_Scan();
	}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	200000c2 	.word	0x200000c2
 800295c:	200000c0 	.word	0x200000c0
 8002960:	200000c4 	.word	0x200000c4

08002964 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_SPI1_Init+0x64>)
 800296a:	4a18      	ldr	r2, [pc, #96]	; (80029cc <MX_SPI1_Init+0x68>)
 800296c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_SPI1_Init+0x64>)
 8002970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_SPI1_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_SPI1_Init+0x64>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_SPI1_Init+0x64>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_SPI1_Init+0x64>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_SPI1_Init+0x64>)
 8002990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_SPI1_Init+0x64>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <MX_SPI1_Init+0x64>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_SPI1_Init+0x64>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <MX_SPI1_Init+0x64>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_SPI1_Init+0x64>)
 80029b0:	220a      	movs	r2, #10
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <MX_SPI1_Init+0x64>)
 80029b6:	f002 fc97 	bl	80052e8 <HAL_SPI_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029c0:	f7ff fe40 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000028c 	.word	0x2000028c
 80029cc:	40013000 	.word	0x40013000

080029d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_SPI_MspInit+0x84>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12b      	bne.n	8002a4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 80029fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_SPI_MspInit+0x88>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002a2a:	2338      	movs	r3, #56	; 0x38
 8002a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	; (8002a5c <HAL_SPI_MspInit+0x8c>)
 8002a46:	f001 fce1 	bl	800440c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40013000 	.word	0x40013000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020400 	.word	0x40020400

08002a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_MspInit+0x4c>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_MspInit+0x4c>)
 8002a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_MspInit+0x4c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_MspInit+0x4c>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_MspInit+0x4c>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_MspInit+0x4c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <NMI_Handler+0x4>

08002ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <BusFault_Handler+0x4>

08002ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <UsageFault_Handler+0x4>

08002ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002afc:	f000 fb1c 	bl	8003138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <TIM2_IRQHandler+0x10>)
 8002b0a:	f003 fbbb 	bl	8006284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000032c 	.word	0x2000032c

08002b18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <USART1_IRQHandler+0x10>)
 8002b1e:	f004 fb1b 	bl	8007158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000408 	.word	0x20000408

08002b2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <DMA2_Stream0_IRQHandler+0x10>)
 8002b32:	f001 fa01 	bl	8003f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000120 	.word	0x20000120

08002b40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e00a      	b.n	8002b68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b52:	f3af 8000 	nop.w
 8002b56:	4601      	mov	r1, r0
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	60ba      	str	r2, [r7, #8]
 8002b5e:	b2ca      	uxtb	r2, r1
 8002b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3301      	adds	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	dbf0      	blt.n	8002b52 <_read+0x12>
	}

return len;
 8002b70:	687b      	ldr	r3, [r7, #4]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e009      	b.n	8002ba0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	60ba      	str	r2, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	dbf1      	blt.n	8002b8c <_write+0x12>
	}
	return len;
 8002ba8:	687b      	ldr	r3, [r7, #4]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_close>:

int _close(int file)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bda:	605a      	str	r2, [r3, #4]
	return 0;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <_isatty>:

int _isatty(int file)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <_sbrk+0x5c>)
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_sbrk+0x60>)
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_sbrk+0x64>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <_sbrk+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c4c:	f005 fa0c 	bl	8008068 <__errno>
 8002c50:	4603      	mov	r3, r0
 8002c52:	220c      	movs	r2, #12
 8002c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e009      	b.n	8002c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <_sbrk+0x64>)
 8002c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20020000 	.word	0x20020000
 8002c7c:	00000400 	.word	0x00000400
 8002c80:	200000c8 	.word	0x200000c8
 8002c84:	20000460 	.word	0x20000460

08002c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <SystemInit+0x20>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <SystemInit+0x20>)
 8002c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002cd2:	f240 3247 	movw	r2, #839	; 0x347
 8002cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002ce0:	2263      	movs	r2, #99	; 0x63
 8002ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cf0:	4813      	ldr	r0, [pc, #76]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002cf2:	f003 f8e5 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002cfc:	f7ff fca2 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002d0e:	f003 fc83 	bl	8006618 <HAL_TIM_ConfigClockSource>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d18:	f7ff fc94 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d24:	463b      	mov	r3, r7
 8002d26:	4619      	mov	r1, r3
 8002d28:	4805      	ldr	r0, [pc, #20]	; (8002d40 <MX_TIM2_Init+0x94>)
 8002d2a:	f004 f875 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d34:	f7ff fc86 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	2000032c 	.word	0x2000032c

08002d44 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <MX_TIM13_Init+0x98>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d64:	f240 3247 	movw	r2, #839	; 0x347
 8002d68:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d72:	2263      	movs	r2, #99	; 0x63
 8002d74:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002d82:	4815      	ldr	r0, [pc, #84]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d84:	f003 f89c 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002d8e:	f7ff fc59 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002d92:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002d94:	f003 f954 	bl	8006040 <HAL_TIM_PWM_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002d9e:	f7ff fc51 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da2:	2360      	movs	r3, #96	; 0x60
 8002da4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	2200      	movs	r2, #0
 8002db6:	4619      	mov	r1, r3
 8002db8:	4807      	ldr	r0, [pc, #28]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002dba:	f003 fb6b 	bl	8006494 <HAL_TIM_PWM_ConfigChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002dc4:	f7ff fc3e 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <MX_TIM13_Init+0x94>)
 8002dca:	f000 f845 	bl	8002e58 <HAL_TIM_MspPostInit>

}
 8002dce:	bf00      	nop
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200002e4 	.word	0x200002e4
 8002ddc:	40001c00 	.word	0x40001c00

08002de0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d116      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_TIM_Base_MspInit+0x70>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <HAL_TIM_Base_MspInit+0x70>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <HAL_TIM_Base_MspInit+0x70>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	201c      	movs	r0, #28
 8002e14:	f000 fec1 	bl	8003b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e18:	201c      	movs	r0, #28
 8002e1a:	f000 feda 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002e1e:	e012      	b.n	8002e46 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <HAL_TIM_Base_MspInit+0x74>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10d      	bne.n	8002e46 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_TIM_Base_MspInit+0x70>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_TIM_Base_MspInit+0x70>)
 8002e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_TIM_Base_MspInit+0x70>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40001c00 	.word	0x40001c00

08002e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_TIM_MspPostInit+0x68>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d11e      	bne.n	8002eb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_TIM_MspPostInit+0x6c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_TIM_MspPostInit+0x6c>)
 8002e84:	f043 0320 	orr.w	r3, r3, #32
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_TIM_MspPostInit+0x6c>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <HAL_TIM_MspPostInit+0x70>)
 8002eb4:	f001 faaa 	bl	800440c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40001c00 	.word	0x40001c00
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40021400 	.word	0x40021400

08002ecc <uart_Rs232SendString>:

void uart_init_rs232() {
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
}

void uart_Rs232SendString(uint8_t *str) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*) msg, sprintf((void*) msg, "%s", str),
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <uart_Rs232SendString+0x28>)
 8002ed8:	4807      	ldr	r0, [pc, #28]	; (8002ef8 <uart_Rs232SendString+0x2c>)
 8002eda:	f005 f96d 	bl	80081b8 <siprintf>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <uart_Rs232SendString+0x2c>)
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <uart_Rs232SendString+0x30>)
 8002ee8:	f004 f873 	bl	8006fd2 <HAL_UART_Transmit>
			10);
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	08009204 	.word	0x08009204
 8002ef8:	20000374 	.word	0x20000374
 8002efc:	20000408 	.word	0x20000408

08002f00 <HAL_UART_RxCpltCallback>:
	uart_Rs232SendString((void*)".");
	sprintf((void*) msg, "%ld", num % 100);
	uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <HAL_UART_RxCpltCallback+0x3c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d110      	bne.n	8002f34 <HAL_UART_RxCpltCallback+0x34>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002f12:	230a      	movs	r3, #10
 8002f14:	2201      	movs	r2, #1
 8002f16:	490a      	ldr	r1, [pc, #40]	; (8002f40 <HAL_UART_RxCpltCallback+0x40>)
 8002f18:	480a      	ldr	r0, [pc, #40]	; (8002f44 <HAL_UART_RxCpltCallback+0x44>)
 8002f1a:	f004 f85a 	bl	8006fd2 <HAL_UART_Transmit>


		// turn on the receice interrupt
		addToRingBuffer(&buffer, receive_buffer1);
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_UART_RxCpltCallback+0x40>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4808      	ldr	r0, [pc, #32]	; (8002f48 <HAL_UART_RxCpltCallback+0x48>)
 8002f26:	f7ff fbb5 	bl	8002694 <addToRingBuffer>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4904      	ldr	r1, [pc, #16]	; (8002f40 <HAL_UART_RxCpltCallback+0x40>)
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <HAL_UART_RxCpltCallback+0x44>)
 8002f30:	f004 f8e1 	bl	80070f6 <HAL_UART_Receive_IT>
	}
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	200000cc 	.word	0x200000cc
 8002f44:	20000408 	.word	0x20000408
 8002f48:	200003d8 	.word	0x200003d8

08002f4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <MX_USART1_UART_Init+0x50>)
 8002f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f72:	220c      	movs	r2, #12
 8002f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_USART1_UART_Init+0x4c>)
 8002f84:	f003 ffd8 	bl	8006f38 <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f8e:	f7ff fb59 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000408 	.word	0x20000408
 8002f9c:	40011000 	.word	0x40011000

08002fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_UART_MspInit+0x94>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d134      	bne.n	800302c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_UART_MspInit+0x98>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_UART_MspInit+0x98>)
 8002fcc:	f043 0310 	orr.w	r3, r3, #16
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_UART_MspInit+0x98>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_UART_MspInit+0x98>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_UART_MspInit+0x98>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_UART_MspInit+0x98>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ffa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300c:	2307      	movs	r3, #7
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	4809      	ldr	r0, [pc, #36]	; (800303c <HAL_UART_MspInit+0x9c>)
 8003018:	f001 f9f8 	bl	800440c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	2025      	movs	r0, #37	; 0x25
 8003022:	f000 fdba 	bl	8003b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003026:	2025      	movs	r0, #37	; 0x25
 8003028:	f000 fdd3 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800302c:	bf00      	nop
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40011000 	.word	0x40011000
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000

08003040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003044:	480d      	ldr	r0, [pc, #52]	; (800307c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003046:	490e      	ldr	r1, [pc, #56]	; (8003080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800305c:	4c0b      	ldr	r4, [pc, #44]	; (800308c <LoopFillZerobss+0x26>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800306a:	f7ff fe0d 	bl	8002c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800306e:	f005 f801 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003072:	f7ff f829 	bl	80020c8 <main>
  bx  lr    
 8003076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800307c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003080:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003084:	0800c25c 	.word	0x0800c25c
  ldr r2, =_sbss
 8003088:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800308c:	20000460 	.word	0x20000460

08003090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003090:	e7fe      	b.n	8003090 <ADC_IRQHandler>
	...

08003094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_Init+0x40>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <HAL_Init+0x40>)
 800309e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_Init+0x40>)
 80030aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_Init+0x40>)
 80030b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030bc:	2003      	movs	r0, #3
 80030be:	f000 fd61 	bl	8003b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030c2:	200f      	movs	r0, #15
 80030c4:	f000 f808 	bl	80030d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c8:	f7ff fcca 	bl	8002a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00

080030d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_InitTick+0x54>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_InitTick+0x58>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fd79 	bl	8003bee <HAL_SYSTICK_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e00e      	b.n	8003124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b0f      	cmp	r3, #15
 800310a:	d80a      	bhi.n	8003122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800310c:	2200      	movs	r2, #0
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f000 fd41 	bl	8003b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003118:	4a06      	ldr	r2, [pc, #24]	; (8003134 <HAL_InitTick+0x5c>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000001c 	.word	0x2000001c
 8003130:	20000024 	.word	0x20000024
 8003134:	20000020 	.word	0x20000020

08003138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_IncTick+0x20>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_IncTick+0x24>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4413      	add	r3, r2
 8003148:	4a04      	ldr	r2, [pc, #16]	; (800315c <HAL_IncTick+0x24>)
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000024 	.word	0x20000024
 800315c:	2000044c 	.word	0x2000044c

08003160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return uwTick;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_GetTick+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	2000044c 	.word	0x2000044c

08003178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7ff ffee 	bl	8003160 <HAL_GetTick>
 8003184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d005      	beq.n	800319e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_Delay+0x44>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800319e:	bf00      	nop
 80031a0:	f7ff ffde 	bl	8003160 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d8f7      	bhi.n	80031a0 <HAL_Delay+0x28>
  {
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000024 	.word	0x20000024

080031c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e033      	b.n	800323e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fe6a 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d118      	bne.n	8003230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003206:	f023 0302 	bic.w	r3, r3, #2
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa68 	bl	80036e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
 800322e:	e001      	b.n	8003234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_ADC_Start_DMA+0x1e>
 8003262:	2302      	movs	r3, #2
 8003264:	e0e9      	b.n	800343a <HAL_ADC_Start_DMA+0x1f2>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d018      	beq.n	80032ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800328c:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_ADC_Start_DMA+0x1fc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a6d      	ldr	r2, [pc, #436]	; (8003448 <HAL_ADC_Start_DMA+0x200>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0c9a      	lsrs	r2, r3, #18
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032a0:	e002      	b.n	80032a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f9      	bne.n	80032a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032bc:	d107      	bne.n	80032ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 80a1 	bne.w	8003420 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003308:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d106      	bne.n	800332c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f023 0206 	bic.w	r2, r3, #6
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
 800332a:	e002      	b.n	8003332 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_ADC_Start_DMA+0x204>)
 800333c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	4a43      	ldr	r2, [pc, #268]	; (8003450 <HAL_ADC_Start_DMA+0x208>)
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	4a42      	ldr	r2, [pc, #264]	; (8003454 <HAL_ADC_Start_DMA+0x20c>)
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	4a41      	ldr	r2, [pc, #260]	; (8003458 <HAL_ADC_Start_DMA+0x210>)
 8003354:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800335e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800336e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	334c      	adds	r3, #76	; 0x4c
 800338a:	4619      	mov	r1, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f000 fce8 	bl	8003d64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2b00      	cmp	r3, #0
 800339e:	d12a      	bne.n	80033f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2d      	ldr	r2, [pc, #180]	; (800345c <HAL_ADC_Start_DMA+0x214>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d015      	beq.n	80033d6 <HAL_ADC_Start_DMA+0x18e>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <HAL_ADC_Start_DMA+0x218>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d105      	bne.n	80033c0 <HAL_ADC_Start_DMA+0x178>
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_ADC_Start_DMA+0x204>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a27      	ldr	r2, [pc, #156]	; (8003464 <HAL_ADC_Start_DMA+0x21c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d136      	bne.n	8003438 <HAL_ADC_Start_DMA+0x1f0>
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_ADC_Start_DMA+0x204>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d130      	bne.n	8003438 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d129      	bne.n	8003438 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e020      	b.n	8003438 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a18      	ldr	r2, [pc, #96]	; (800345c <HAL_ADC_Start_DMA+0x214>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d11b      	bne.n	8003438 <HAL_ADC_Start_DMA+0x1f0>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d114      	bne.n	8003438 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	e00b      	b.n	8003438 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0210 	orr.w	r2, r3, #16
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000001c 	.word	0x2000001c
 8003448:	431bde83 	.word	0x431bde83
 800344c:	40012300 	.word	0x40012300
 8003450:	080038e1 	.word	0x080038e1
 8003454:	0800399b 	.word	0x0800399b
 8003458:	080039b7 	.word	0x080039b7
 800345c:	40012000 	.word	0x40012000
 8003460:	40012100 	.word	0x40012100
 8003464:	40012200 	.word	0x40012200

08003468 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x1c>
 80034bc:	2302      	movs	r3, #2
 80034be:	e105      	b.n	80036cc <HAL_ADC_ConfigChannel+0x228>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d925      	bls.n	800351c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68d9      	ldr	r1, [r3, #12]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	3b1e      	subs	r3, #30
 80034e6:	2207      	movs	r2, #7
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43da      	mvns	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	400a      	ands	r2, r1
 80034f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68d9      	ldr	r1, [r3, #12]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	4603      	mov	r3, r0
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4403      	add	r3, r0
 800350e:	3b1e      	subs	r3, #30
 8003510:	409a      	lsls	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	e022      	b.n	8003562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6919      	ldr	r1, [r3, #16]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	2207      	movs	r2, #7
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	400a      	ands	r2, r1
 800353e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	4603      	mov	r3, r0
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4403      	add	r3, r0
 8003558:	409a      	lsls	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d824      	bhi.n	80035b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	3b05      	subs	r3, #5
 800357c:	221f      	movs	r2, #31
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	400a      	ands	r2, r1
 800358a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	3b05      	subs	r3, #5
 80035a6:	fa00 f203 	lsl.w	r2, r0, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
 80035b2:	e04c      	b.n	800364e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d824      	bhi.n	8003606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	3b23      	subs	r3, #35	; 0x23
 80035ce:	221f      	movs	r2, #31
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43da      	mvns	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	400a      	ands	r2, r1
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4618      	mov	r0, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	3b23      	subs	r3, #35	; 0x23
 80035f8:	fa00 f203 	lsl.w	r2, r0, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
 8003604:	e023      	b.n	800364e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	3b41      	subs	r3, #65	; 0x41
 8003618:	221f      	movs	r2, #31
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	400a      	ands	r2, r1
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	3b41      	subs	r3, #65	; 0x41
 8003642:	fa00 f203 	lsl.w	r2, r0, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800364e:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <HAL_ADC_ConfigChannel+0x234>)
 8003650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a21      	ldr	r2, [pc, #132]	; (80036dc <HAL_ADC_ConfigChannel+0x238>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d109      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1cc>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b12      	cmp	r3, #18
 8003662:	d105      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_ADC_ConfigChannel+0x238>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d123      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x21e>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d003      	beq.n	800368a <HAL_ADC_ConfigChannel+0x1e6>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b11      	cmp	r3, #17
 8003688:	d11b      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b10      	cmp	r3, #16
 800369c:	d111      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_ADC_ConfigChannel+0x23c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <HAL_ADC_ConfigChannel+0x240>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	0c9a      	lsrs	r2, r3, #18
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036b4:	e002      	b.n	80036bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f9      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40012300 	.word	0x40012300
 80036dc:	40012000 	.word	0x40012000
 80036e0:	2000001c 	.word	0x2000001c
 80036e4:	431bde83 	.word	0x431bde83

080036e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036f0:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <ADC_Init+0x1f0>)
 80036f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	4a58      	ldr	r2, [pc, #352]	; (80038dc <ADC_Init+0x1f4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800378e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6899      	ldr	r1, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	e00f      	b.n	80037e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0202 	bic.w	r2, r2, #2
 80037f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7e1b      	ldrb	r3, [r3, #24]
 8003800:	005a      	lsls	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003832:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	035a      	lsls	r2, r3, #13
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	e007      	b.n	800385c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	3b01      	subs	r3, #1
 8003878:	051a      	lsls	r2, r3, #20
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800389e:	025a      	lsls	r2, r3, #9
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6899      	ldr	r1, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	029a      	lsls	r2, r3, #10
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40012300 	.word	0x40012300
 80038dc:	0f000001 	.word	0x0f000001

080038e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d13c      	bne.n	8003974 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d12b      	bne.n	800396c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003918:	2b00      	cmp	r3, #0
 800391a:	d127      	bne.n	800396c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003934:	2b00      	cmp	r3, #0
 8003936:	d119      	bne.n	800396c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0220 	bic.w	r2, r2, #32
 8003946:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff fd7b 	bl	8003468 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003972:	e00e      	b.n	8003992 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff fd85 	bl	8003490 <HAL_ADC_ErrorCallback>
}
 8003986:	e004      	b.n	8003992 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fd67 	bl	800347c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2240      	movs	r2, #64	; 0x40
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f043 0204 	orr.w	r2, r3, #4
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff fd5a 	bl	8003490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <__NVIC_SetPriorityGrouping+0x44>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a00:	4013      	ands	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a16:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <__NVIC_SetPriorityGrouping+0x44>)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	60d3      	str	r3, [r2, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <__NVIC_GetPriorityGrouping+0x18>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	f003 0307 	and.w	r3, r3, #7
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	db0b      	blt.n	8003a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	f003 021f 	and.w	r2, r3, #31
 8003a60:	4907      	ldr	r1, [pc, #28]	; (8003a80 <__NVIC_EnableIRQ+0x38>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2001      	movs	r0, #1
 8003a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000e100 	.word	0xe000e100

08003a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	db0a      	blt.n	8003aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	490c      	ldr	r1, [pc, #48]	; (8003ad0 <__NVIC_SetPriority+0x4c>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	0112      	lsls	r2, r2, #4
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aac:	e00a      	b.n	8003ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4908      	ldr	r1, [pc, #32]	; (8003ad4 <__NVIC_SetPriority+0x50>)
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	3b04      	subs	r3, #4
 8003abc:	0112      	lsls	r2, r2, #4
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	761a      	strb	r2, [r3, #24]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000e100 	.word	0xe000e100
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	; 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f1c3 0307 	rsb	r3, r3, #7
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	bf28      	it	cs
 8003af6:	2304      	movcs	r3, #4
 8003af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d902      	bls.n	8003b08 <NVIC_EncodePriority+0x30>
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3b03      	subs	r3, #3
 8003b06:	e000      	b.n	8003b0a <NVIC_EncodePriority+0x32>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b20:	f04f 31ff 	mov.w	r1, #4294967295
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	43d9      	mvns	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b30:	4313      	orrs	r3, r2
         );
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3724      	adds	r7, #36	; 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b50:	d301      	bcc.n	8003b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b52:	2301      	movs	r3, #1
 8003b54:	e00f      	b.n	8003b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <SysTick_Config+0x40>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b5e:	210f      	movs	r1, #15
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	f7ff ff8e 	bl	8003a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <SysTick_Config+0x40>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b6e:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <SysTick_Config+0x40>)
 8003b70:	2207      	movs	r2, #7
 8003b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	e000e010 	.word	0xe000e010

08003b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff29 	bl	80039e4 <__NVIC_SetPriorityGrouping>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bac:	f7ff ff3e 	bl	8003a2c <__NVIC_GetPriorityGrouping>
 8003bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff ff8e 	bl	8003ad8 <NVIC_EncodePriority>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff5d 	bl	8003a84 <__NVIC_SetPriority>
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	4603      	mov	r3, r0
 8003bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff31 	bl	8003a48 <__NVIC_EnableIRQ>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ffa2 	bl	8003b40 <SysTick_Config>
 8003bfc:	4603      	mov	r3, r0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c14:	f7ff faa4 	bl	8003160 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e099      	b.n	8003d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c44:	e00f      	b.n	8003c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c46:	f7ff fa8b 	bl	8003160 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	d908      	bls.n	8003c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e078      	b.n	8003d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e8      	bne.n	8003c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <HAL_DMA_Init+0x158>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d107      	bne.n	8003cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d117      	bne.n	8003d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fb01 	bl	8004314 <DMA_CheckFifoParam>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2240      	movs	r2, #64	; 0x40
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d26:	2301      	movs	r3, #1
 8003d28:	e016      	b.n	8003d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fab8 	bl	80042a8 <DMA_CalcBaseAndBitshift>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	223f      	movs	r2, #63	; 0x3f
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	f010803f 	.word	0xf010803f

08003d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_DMA_Start_IT+0x26>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e040      	b.n	8003e0c <HAL_DMA_Start_IT+0xa8>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d12f      	bne.n	8003dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fa4a 	bl	800424c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	223f      	movs	r2, #63	; 0x3f
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0216 	orr.w	r2, r2, #22
 8003dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0208 	orr.w	r2, r2, #8
 8003dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e005      	b.n	8003e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
 8003e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e22:	f7ff f99d 	bl	8003160 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d008      	beq.n	8003e46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e052      	b.n	8003eec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0216 	bic.w	r2, r2, #22
 8003e54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <HAL_DMA_Abort+0x62>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0208 	bic.w	r2, r2, #8
 8003e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e96:	e013      	b.n	8003ec0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e98:	f7ff f962 	bl	8003160 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d90c      	bls.n	8003ec0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e015      	b.n	8003eec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e4      	bne.n	8003e98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	223f      	movs	r2, #63	; 0x3f
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d004      	beq.n	8003f12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00c      	b.n	8003f2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2205      	movs	r2, #5
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f44:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_DMA_IRQHandler+0x258>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a92      	ldr	r2, [pc, #584]	; (8004194 <HAL_DMA_IRQHandler+0x25c>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	0a9b      	lsrs	r3, r3, #10
 8003f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	2208      	movs	r2, #8
 8003f64:	409a      	lsls	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01a      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0204 	bic.w	r2, r2, #4
 8003f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	2208      	movs	r2, #8
 8003f92:	409a      	lsls	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	2201      	movs	r2, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d012      	beq.n	8003fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	2204      	movs	r2, #4
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	409a      	lsls	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	2210      	movs	r2, #16
 8004016:	409a      	lsls	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d043      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d03c      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	2210      	movs	r2, #16
 8004034:	409a      	lsls	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d018      	beq.n	800407a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d108      	bne.n	8004068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d024      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e01f      	b.n	80040a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e016      	b.n	80040a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0208 	bic.w	r2, r2, #8
 8004096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	2220      	movs	r2, #32
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 808e 	beq.w	80041d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8086 	beq.w	80041d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	2220      	movs	r2, #32
 80040d0:	409a      	lsls	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d136      	bne.n	8004150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0216 	bic.w	r2, r2, #22
 80040f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_DMA_IRQHandler+0x1da>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0208 	bic.w	r2, r2, #8
 8004120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	223f      	movs	r2, #63	; 0x3f
 8004128:	409a      	lsls	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	2b00      	cmp	r3, #0
 8004144:	d07d      	beq.n	8004242 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	4798      	blx	r3
        }
        return;
 800414e:	e078      	b.n	8004242 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01c      	beq.n	8004198 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d108      	bne.n	800417e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	2b00      	cmp	r3, #0
 8004172:	d030      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
 800417c:	e02b      	b.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
 800418e:	e022      	b.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
 8004190:	2000001c 	.word	0x2000001c
 8004194:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0210 	bic.w	r2, r2, #16
 80041b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d032      	beq.n	8004244 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d022      	beq.n	8004230 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2205      	movs	r2, #5
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	429a      	cmp	r2, r3
 800420c:	d307      	bcc.n	800421e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f2      	bne.n	8004202 <HAL_DMA_IRQHandler+0x2ca>
 800421c:	e000      	b.n	8004220 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800421e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
 8004240:	e000      	b.n	8004244 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004242:	bf00      	nop
    }
  }
}
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop

0800424c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004268:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d108      	bne.n	800428c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800428a:	e007      	b.n	800429c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3b10      	subs	r3, #16
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <DMA_CalcBaseAndBitshift+0x64>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <DMA_CalcBaseAndBitshift+0x68>)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d909      	bls.n	80042ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	1d1a      	adds	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	659a      	str	r2, [r3, #88]	; 0x58
 80042e8:	e007      	b.n	80042fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	aaaaaaab 	.word	0xaaaaaaab
 8004310:	0800c1ac 	.word	0x0800c1ac

08004314 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11f      	bne.n	800436e <DMA_CheckFifoParam+0x5a>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d856      	bhi.n	80043e2 <DMA_CheckFifoParam+0xce>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <DMA_CheckFifoParam+0x28>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800435f 	.word	0x0800435f
 8004344:	0800434d 	.word	0x0800434d
 8004348:	080043e3 	.word	0x080043e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d046      	beq.n	80043e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e043      	b.n	80043e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004366:	d140      	bne.n	80043ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e03d      	b.n	80043ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	d121      	bne.n	80043bc <DMA_CheckFifoParam+0xa8>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d837      	bhi.n	80043ee <DMA_CheckFifoParam+0xda>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <DMA_CheckFifoParam+0x70>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	08004395 	.word	0x08004395
 8004388:	0800439b 	.word	0x0800439b
 800438c:	08004395 	.word	0x08004395
 8004390:	080043ad 	.word	0x080043ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      break;
 8004398:	e030      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d025      	beq.n	80043f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043aa:	e022      	b.n	80043f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043b4:	d11f      	bne.n	80043f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043ba:	e01c      	b.n	80043f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d903      	bls.n	80043ca <DMA_CheckFifoParam+0xb6>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d003      	beq.n	80043d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043c8:	e018      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
      break;
 80043ce:	e015      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      break;
 80043e0:	e00b      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      break;
 80043e2:	bf00      	nop
 80043e4:	e00a      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      break;
 80043e6:	bf00      	nop
 80043e8:	e008      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      break;
 80043ea:	bf00      	nop
 80043ec:	e006      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      break;
 80043ee:	bf00      	nop
 80043f0:	e004      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      break;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      break;   
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <DMA_CheckFifoParam+0xe8>
      break;
 80043fa:	bf00      	nop
    }
  } 
  
  return status; 
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop

0800440c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	; 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e16b      	b.n	8004700 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004428:	2201      	movs	r2, #1
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	429a      	cmp	r2, r3
 8004442:	f040 815a 	bne.w	80046fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d005      	beq.n	800445e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800445a:	2b02      	cmp	r3, #2
 800445c:	d130      	bne.n	80044c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2203      	movs	r2, #3
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004494:	2201      	movs	r2, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 0201 	and.w	r2, r3, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d017      	beq.n	80044fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2203      	movs	r2, #3
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d123      	bne.n	8004550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3208      	adds	r2, #8
 8004510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	220f      	movs	r2, #15
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	08da      	lsrs	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3208      	adds	r2, #8
 800454a:	69b9      	ldr	r1, [r7, #24]
 800454c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	2203      	movs	r2, #3
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0203 	and.w	r2, r3, #3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80b4 	beq.w	80046fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	4b60      	ldr	r3, [pc, #384]	; (8004718 <HAL_GPIO_Init+0x30c>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	4a5f      	ldr	r2, [pc, #380]	; (8004718 <HAL_GPIO_Init+0x30c>)
 800459c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045a0:	6453      	str	r3, [r2, #68]	; 0x44
 80045a2:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <HAL_GPIO_Init+0x30c>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ae:	4a5b      	ldr	r2, [pc, #364]	; (800471c <HAL_GPIO_Init+0x310>)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	3302      	adds	r3, #2
 80045b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	220f      	movs	r2, #15
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a52      	ldr	r2, [pc, #328]	; (8004720 <HAL_GPIO_Init+0x314>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02b      	beq.n	8004632 <HAL_GPIO_Init+0x226>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a51      	ldr	r2, [pc, #324]	; (8004724 <HAL_GPIO_Init+0x318>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d025      	beq.n	800462e <HAL_GPIO_Init+0x222>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a50      	ldr	r2, [pc, #320]	; (8004728 <HAL_GPIO_Init+0x31c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01f      	beq.n	800462a <HAL_GPIO_Init+0x21e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4f      	ldr	r2, [pc, #316]	; (800472c <HAL_GPIO_Init+0x320>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d019      	beq.n	8004626 <HAL_GPIO_Init+0x21a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4e      	ldr	r2, [pc, #312]	; (8004730 <HAL_GPIO_Init+0x324>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_GPIO_Init+0x216>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_GPIO_Init+0x328>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00d      	beq.n	800461e <HAL_GPIO_Init+0x212>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4c      	ldr	r2, [pc, #304]	; (8004738 <HAL_GPIO_Init+0x32c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <HAL_GPIO_Init+0x20e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a4b      	ldr	r2, [pc, #300]	; (800473c <HAL_GPIO_Init+0x330>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <HAL_GPIO_Init+0x20a>
 8004612:	2307      	movs	r3, #7
 8004614:	e00e      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004616:	2308      	movs	r3, #8
 8004618:	e00c      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800461a:	2306      	movs	r3, #6
 800461c:	e00a      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800461e:	2305      	movs	r3, #5
 8004620:	e008      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004622:	2304      	movs	r3, #4
 8004624:	e006      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004626:	2303      	movs	r3, #3
 8004628:	e004      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800462a:	2302      	movs	r3, #2
 800462c:	e002      	b.n	8004634 <HAL_GPIO_Init+0x228>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_GPIO_Init+0x228>
 8004632:	2300      	movs	r3, #0
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	f002 0203 	and.w	r2, r2, #3
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	4093      	lsls	r3, r2
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004644:	4935      	ldr	r1, [pc, #212]	; (800471c <HAL_GPIO_Init+0x310>)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	3302      	adds	r3, #2
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_GPIO_Init+0x334>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <HAL_GPIO_Init+0x334>)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_GPIO_Init+0x334>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046a0:	4a27      	ldr	r2, [pc, #156]	; (8004740 <HAL_GPIO_Init+0x334>)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a6:	4b26      	ldr	r3, [pc, #152]	; (8004740 <HAL_GPIO_Init+0x334>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_GPIO_Init+0x334>)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_GPIO_Init+0x334>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f4:	4a12      	ldr	r2, [pc, #72]	; (8004740 <HAL_GPIO_Init+0x334>)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	f67f ae90 	bls.w	8004428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	40013800 	.word	0x40013800
 8004720:	40020000 	.word	0x40020000
 8004724:	40020400 	.word	0x40020400
 8004728:	40020800 	.word	0x40020800
 800472c:	40020c00 	.word	0x40020c00
 8004730:	40021000 	.word	0x40021000
 8004734:	40021400 	.word	0x40021400
 8004738:	40021800 	.word	0x40021800
 800473c:	40021c00 	.word	0x40021c00
 8004740:	40013c00 	.word	0x40013c00

08004744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004754:	787b      	ldrb	r3, [r7, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004760:	e003      	b.n	800476a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004762:	887b      	ldrh	r3, [r7, #2]
 8004764:	041a      	lsls	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	619a      	str	r2, [r3, #24]
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e12b      	b.n	80049e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc feec 	bl	800157c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2224      	movs	r2, #36	; 0x24
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047dc:	f000 fd5c 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 80047e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4a81      	ldr	r2, [pc, #516]	; (80049ec <HAL_I2C_Init+0x274>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d807      	bhi.n	80047fc <HAL_I2C_Init+0x84>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a80      	ldr	r2, [pc, #512]	; (80049f0 <HAL_I2C_Init+0x278>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bf94      	ite	ls
 80047f4:	2301      	movls	r3, #1
 80047f6:	2300      	movhi	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e006      	b.n	800480a <HAL_I2C_Init+0x92>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a7d      	ldr	r2, [pc, #500]	; (80049f4 <HAL_I2C_Init+0x27c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	bf94      	ite	ls
 8004804:	2301      	movls	r3, #1
 8004806:	2300      	movhi	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e0e7      	b.n	80049e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a78      	ldr	r2, [pc, #480]	; (80049f8 <HAL_I2C_Init+0x280>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	0c9b      	lsrs	r3, r3, #18
 800481c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a6a      	ldr	r2, [pc, #424]	; (80049ec <HAL_I2C_Init+0x274>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d802      	bhi.n	800484c <HAL_I2C_Init+0xd4>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3301      	adds	r3, #1
 800484a:	e009      	b.n	8004860 <HAL_I2C_Init+0xe8>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	4a69      	ldr	r2, [pc, #420]	; (80049fc <HAL_I2C_Init+0x284>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	3301      	adds	r3, #1
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004872:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	495c      	ldr	r1, [pc, #368]	; (80049ec <HAL_I2C_Init+0x274>)
 800487c:	428b      	cmp	r3, r1
 800487e:	d819      	bhi.n	80048b4 <HAL_I2C_Init+0x13c>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e59      	subs	r1, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	fbb1 f3f3 	udiv	r3, r1, r3
 800488e:	1c59      	adds	r1, r3, #1
 8004890:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004894:	400b      	ands	r3, r1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_I2C_Init+0x138>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1e59      	subs	r1, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048a8:	3301      	adds	r3, #1
 80048aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ae:	e051      	b.n	8004954 <HAL_I2C_Init+0x1dc>
 80048b0:	2304      	movs	r3, #4
 80048b2:	e04f      	b.n	8004954 <HAL_I2C_Init+0x1dc>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d111      	bne.n	80048e0 <HAL_I2C_Init+0x168>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1e58      	subs	r0, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	440b      	add	r3, r1
 80048ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e012      	b.n	8004906 <HAL_I2C_Init+0x18e>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1e58      	subs	r0, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	0099      	lsls	r1, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f6:	3301      	adds	r3, #1
 80048f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_I2C_Init+0x196>
 800490a:	2301      	movs	r3, #1
 800490c:	e022      	b.n	8004954 <HAL_I2C_Init+0x1dc>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10e      	bne.n	8004934 <HAL_I2C_Init+0x1bc>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1e58      	subs	r0, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	440b      	add	r3, r1
 8004924:	fbb0 f3f3 	udiv	r3, r0, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004932:	e00f      	b.n	8004954 <HAL_I2C_Init+0x1dc>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e58      	subs	r0, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	0099      	lsls	r1, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	6809      	ldr	r1, [r1, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004982:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6911      	ldr	r1, [r2, #16]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68d2      	ldr	r2, [r2, #12]
 800498e:	4311      	orrs	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	430b      	orrs	r3, r1
 8004996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	000186a0 	.word	0x000186a0
 80049f0:	001e847f 	.word	0x001e847f
 80049f4:	003d08ff 	.word	0x003d08ff
 80049f8:	431bde83 	.word	0x431bde83
 80049fc:	10624dd3 	.word	0x10624dd3

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e264      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d075      	beq.n	8004b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a1e:	4ba3      	ldr	r3, [pc, #652]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2a:	4ba0      	ldr	r3, [pc, #640]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a36:	4b9d      	ldr	r3, [pc, #628]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a42:	d10b      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	4b99      	ldr	r3, [pc, #612]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05b      	beq.n	8004b08 <HAL_RCC_OscConfig+0x108>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d157      	bne.n	8004b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e23f      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x74>
 8004a66:	4b91      	ldr	r3, [pc, #580]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a90      	ldr	r2, [pc, #576]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e01d      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x98>
 8004a7e:	4b8b      	ldr	r3, [pc, #556]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a8a      	ldr	r2, [pc, #552]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b88      	ldr	r3, [pc, #544]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a87      	ldr	r2, [pc, #540]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e00b      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a98:	4b84      	ldr	r3, [pc, #528]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a83      	ldr	r2, [pc, #524]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b81      	ldr	r3, [pc, #516]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a80      	ldr	r2, [pc, #512]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d013      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fe fb52 	bl	8003160 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fe fb4e 	bl	8003160 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e204      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b76      	ldr	r3, [pc, #472]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xc0>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fe fb3e 	bl	8003160 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fb3a 	bl	8003160 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e1f0      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xe8>
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d063      	beq.n	8004bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b16:	4b65      	ldr	r3, [pc, #404]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b22:	4b62      	ldr	r3, [pc, #392]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d11c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1c4      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b56      	ldr	r3, [pc, #344]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4952      	ldr	r1, [pc, #328]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b66:	e03a      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b70:	4b4f      	ldr	r3, [pc, #316]	; (8004cb0 <HAL_RCC_OscConfig+0x2b0>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe faf3 	bl	8003160 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fe faef 	bl	8003160 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1a5      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	4b46      	ldr	r3, [pc, #280]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b43      	ldr	r3, [pc, #268]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4940      	ldr	r1, [pc, #256]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
 8004bb0:	e015      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <HAL_RCC_OscConfig+0x2b0>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fe fad2 	bl	8003160 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fe face 	bl	8003160 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e184      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b36      	ldr	r3, [pc, #216]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d030      	beq.n	8004c4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf2:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <HAL_RCC_OscConfig+0x2b4>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fe fab2 	bl	8003160 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fe faae 	bl	8003160 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e164      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	4b26      	ldr	r3, [pc, #152]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x200>
 8004c1e:	e015      	b.n	8004c4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c20:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <HAL_RCC_OscConfig+0x2b4>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c26:	f7fe fa9b 	bl	8003160 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fe fa97 	bl	8003160 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e14d      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f0      	bne.n	8004c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a0 	beq.w	8004d9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a0e      	ldr	r2, [pc, #56]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_OscConfig+0x2b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d121      	bne.n	8004cda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <HAL_RCC_OscConfig+0x2b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a07      	ldr	r2, [pc, #28]	; (8004cb8 <HAL_RCC_OscConfig+0x2b8>)
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca2:	f7fe fa5d 	bl	8003160 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	e011      	b.n	8004cce <HAL_RCC_OscConfig+0x2ce>
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	42470000 	.word	0x42470000
 8004cb4:	42470e80 	.word	0x42470e80
 8004cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cbc:	f7fe fa50 	bl	8003160 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e106      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cce:	4b85      	ldr	r3, [pc, #532]	; (8004ee4 <HAL_RCC_OscConfig+0x4e4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x2f0>
 8004ce2:	4b81      	ldr	r3, [pc, #516]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	4a80      	ldr	r2, [pc, #512]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70
 8004cee:	e01c      	b.n	8004d2a <HAL_RCC_OscConfig+0x32a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCC_OscConfig+0x312>
 8004cf8:	4b7b      	ldr	r3, [pc, #492]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a7a      	ldr	r2, [pc, #488]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
 8004d04:	4b78      	ldr	r3, [pc, #480]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a77      	ldr	r2, [pc, #476]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d10:	e00b      	b.n	8004d2a <HAL_RCC_OscConfig+0x32a>
 8004d12:	4b75      	ldr	r3, [pc, #468]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	4a74      	ldr	r2, [pc, #464]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1e:	4b72      	ldr	r3, [pc, #456]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	4a71      	ldr	r2, [pc, #452]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d015      	beq.n	8004d5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fe fa15 	bl	8003160 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fe fa11 	bl	8003160 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0c5      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	4b65      	ldr	r3, [pc, #404]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ee      	beq.n	8004d3a <HAL_RCC_OscConfig+0x33a>
 8004d5c:	e014      	b.n	8004d88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5e:	f7fe f9ff 	bl	8003160 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fe f9fb 	bl	8003160 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0af      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7c:	4b5a      	ldr	r3, [pc, #360]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ee      	bne.n	8004d66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a55      	ldr	r2, [pc, #340]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 809b 	beq.w	8004eda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da4:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d05c      	beq.n	8004e6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d141      	bne.n	8004e3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db8:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <HAL_RCC_OscConfig+0x4ec>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fe f9cf 	bl	8003160 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fe f9cb 	bl	8003160 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e081      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	019b      	lsls	r3, r3, #6
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	4937      	ldr	r1, [pc, #220]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0e:	4b37      	ldr	r3, [pc, #220]	; (8004eec <HAL_RCC_OscConfig+0x4ec>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fe f9a4 	bl	8003160 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fe f9a0 	bl	8003160 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e056      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x41c>
 8004e3a:	e04e      	b.n	8004eda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <HAL_RCC_OscConfig+0x4ec>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e42:	f7fe f98d 	bl	8003160 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4a:	f7fe f989 	bl	8003160 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e03f      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5c:	4b22      	ldr	r3, [pc, #136]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <HAL_RCC_OscConfig+0x44a>
 8004e68:	e037      	b.n	8004eda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e032      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <HAL_RCC_OscConfig+0x4e8>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d028      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d121      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d11a      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d111      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d001      	beq.n	8004eda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	42470060 	.word	0x42470060

08004ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0cc      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b68      	ldr	r3, [pc, #416]	; (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90c      	bls.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b65      	ldr	r3, [pc, #404]	; (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b63      	ldr	r3, [pc, #396]	; (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0b8      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d020      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f44:	4b59      	ldr	r3, [pc, #356]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a58      	ldr	r2, [pc, #352]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f5c:	4b53      	ldr	r3, [pc, #332]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a52      	ldr	r2, [pc, #328]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b50      	ldr	r3, [pc, #320]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	494d      	ldr	r1, [pc, #308]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d044      	beq.n	8005010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	4b47      	ldr	r3, [pc, #284]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d119      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e07f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d107      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fae:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e06f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbe:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e067      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fce:	4b37      	ldr	r3, [pc, #220]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f023 0203 	bic.w	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4934      	ldr	r1, [pc, #208]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe0:	f7fe f8be 	bl	8003160 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fe f8ba 	bl	8003160 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e04f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 020c 	and.w	r2, r3, #12
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	429a      	cmp	r2, r3
 800500e:	d1eb      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005010:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d20c      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e032      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4916      	ldr	r1, [pc, #88]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	490e      	ldr	r1, [pc, #56]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005076:	f000 f821 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 800507a:	4602      	mov	r2, r0
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	490a      	ldr	r1, [pc, #40]	; (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	5ccb      	ldrb	r3, [r1, r3]
 800508a:	fa22 f303 	lsr.w	r3, r2, r3
 800508e:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe f81e 	bl	80030d8 <HAL_InitTick>

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023c00 	.word	0x40023c00
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800c194 	.word	0x0800c194
 80050b4:	2000001c 	.word	0x2000001c
 80050b8:	20000020 	.word	0x20000020

080050bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	2300      	movs	r3, #0
 80050ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d4:	4b67      	ldr	r3, [pc, #412]	; (8005274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d00d      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x40>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	f200 80bd 	bhi.w	8005260 <HAL_RCC_GetSysClockFreq+0x1a4>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d003      	beq.n	80050f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ee:	e0b7      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f0:	4b61      	ldr	r3, [pc, #388]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050f2:	60bb      	str	r3, [r7, #8]
       break;
 80050f4:	e0b7      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050f6:	4b61      	ldr	r3, [pc, #388]	; (800527c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050f8:	60bb      	str	r3, [r7, #8]
      break;
 80050fa:	e0b4      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050fc:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005104:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005106:	4b5b      	ldr	r3, [pc, #364]	; (8005274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04d      	beq.n	80051ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005112:	4b58      	ldr	r3, [pc, #352]	; (8005274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	461a      	mov	r2, r3
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	ea02 0800 	and.w	r8, r2, r0
 800512a:	ea03 0901 	and.w	r9, r3, r1
 800512e:	4640      	mov	r0, r8
 8005130:	4649      	mov	r1, r9
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	014b      	lsls	r3, r1, #5
 800513c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005140:	0142      	lsls	r2, r0, #5
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	ebb0 0008 	subs.w	r0, r0, r8
 800514a:	eb61 0109 	sbc.w	r1, r1, r9
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	018b      	lsls	r3, r1, #6
 8005158:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800515c:	0182      	lsls	r2, r0, #6
 800515e:	1a12      	subs	r2, r2, r0
 8005160:	eb63 0301 	sbc.w	r3, r3, r1
 8005164:	f04f 0000 	mov.w	r0, #0
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	00d9      	lsls	r1, r3, #3
 800516e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005172:	00d0      	lsls	r0, r2, #3
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	eb12 0208 	adds.w	r2, r2, r8
 800517c:	eb43 0309 	adc.w	r3, r3, r9
 8005180:	f04f 0000 	mov.w	r0, #0
 8005184:	f04f 0100 	mov.w	r1, #0
 8005188:	0259      	lsls	r1, r3, #9
 800518a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800518e:	0250      	lsls	r0, r2, #9
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	461a      	mov	r2, r3
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	f7fb fc84 	bl	8000aac <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4613      	mov	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	e04a      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	461a      	mov	r2, r3
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	ea02 0400 	and.w	r4, r2, r0
 80051c6:	ea03 0501 	and.w	r5, r3, r1
 80051ca:	4620      	mov	r0, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	014b      	lsls	r3, r1, #5
 80051d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051dc:	0142      	lsls	r2, r0, #5
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	1b00      	subs	r0, r0, r4
 80051e4:	eb61 0105 	sbc.w	r1, r1, r5
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	018b      	lsls	r3, r1, #6
 80051f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051f6:	0182      	lsls	r2, r0, #6
 80051f8:	1a12      	subs	r2, r2, r0
 80051fa:	eb63 0301 	sbc.w	r3, r3, r1
 80051fe:	f04f 0000 	mov.w	r0, #0
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	00d9      	lsls	r1, r3, #3
 8005208:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800520c:	00d0      	lsls	r0, r2, #3
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	1912      	adds	r2, r2, r4
 8005214:	eb45 0303 	adc.w	r3, r5, r3
 8005218:	f04f 0000 	mov.w	r0, #0
 800521c:	f04f 0100 	mov.w	r1, #0
 8005220:	0299      	lsls	r1, r3, #10
 8005222:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005226:	0290      	lsls	r0, r2, #10
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	461a      	mov	r2, r3
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	f7fb fc38 	bl	8000aac <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4613      	mov	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	0c1b      	lsrs	r3, r3, #16
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	3301      	adds	r3, #1
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	60bb      	str	r3, [r7, #8]
      break;
 800525e:	e002      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005262:	60bb      	str	r3, [r7, #8]
      break;
 8005264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005266:	68bb      	ldr	r3, [r7, #8]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800
 8005278:	00f42400 	.word	0x00f42400
 800527c:	007a1200 	.word	0x007a1200

08005280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <HAL_RCC_GetHCLKFreq+0x14>)
 8005286:	681b      	ldr	r3, [r3, #0]
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	2000001c 	.word	0x2000001c

08005298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800529c:	f7ff fff0 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0a9b      	lsrs	r3, r3, #10
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	; (80052bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40023800 	.word	0x40023800
 80052bc:	0800c1a4 	.word	0x0800c1a4

080052c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052c4:	f7ff ffdc 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0b5b      	lsrs	r3, r3, #13
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4903      	ldr	r1, [pc, #12]	; (80052e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	0800c1a4 	.word	0x0800c1a4

080052e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07b      	b.n	80053f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d108      	bne.n	8005314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530a:	d009      	beq.n	8005320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	61da      	str	r2, [r3, #28]
 8005312:	e005      	b.n	8005320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fd fb48 	bl	80029d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	ea42 0103 	orr.w	r1, r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	0c1b      	lsrs	r3, r3, #16
 80053be:	f003 0104 	and.w	r1, r3, #4
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	f003 0210 	and.w	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b088      	sub	sp, #32
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_SPI_Transmit+0x22>
 8005418:	2302      	movs	r3, #2
 800541a:	e126      	b.n	800566a <HAL_SPI_Transmit+0x270>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005424:	f7fd fe9c 	bl	8003160 <HAL_GetTick>
 8005428:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d002      	beq.n	8005440 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800543a:	2302      	movs	r3, #2
 800543c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800543e:	e10b      	b.n	8005658 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_SPI_Transmit+0x52>
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005450:	e102      	b.n	8005658 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2203      	movs	r2, #3
 8005456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005498:	d10f      	bne.n	80054ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d007      	beq.n	80054d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e0:	d14b      	bne.n	800557a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_SPI_Transmit+0xf6>
 80054ea:	8afb      	ldrh	r3, [r7, #22]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d13e      	bne.n	800556e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	881a      	ldrh	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	1c9a      	adds	r2, r3, #2
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005514:	e02b      	b.n	800556e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d112      	bne.n	800554a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	1c9a      	adds	r2, r3, #2
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	86da      	strh	r2, [r3, #54]	; 0x36
 8005548:	e011      	b.n	800556e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554a:	f7fd fe09 	bl	8003160 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d803      	bhi.n	8005562 <HAL_SPI_Transmit+0x168>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d102      	bne.n	8005568 <HAL_SPI_Transmit+0x16e>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800556c:	e074      	b.n	8005658 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ce      	bne.n	8005516 <HAL_SPI_Transmit+0x11c>
 8005578:	e04c      	b.n	8005614 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_SPI_Transmit+0x18e>
 8005582:	8afb      	ldrh	r3, [r7, #22]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d140      	bne.n	800560a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	7812      	ldrb	r2, [r2, #0]
 8005594:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055ae:	e02c      	b.n	800560a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d113      	bne.n	80055e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80055e4:	e011      	b.n	800560a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e6:	f7fd fdbb 	bl	8003160 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d803      	bhi.n	80055fe <HAL_SPI_Transmit+0x204>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Transmit+0x20a>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005608:	e026      	b.n	8005658 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1cd      	bne.n	80055b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fbcb 	bl	8005db4 <SPI_EndRxTxTransaction>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e000      	b.n	8005658 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005656:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005668:	7ffb      	ldrb	r3, [r7, #31]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b088      	sub	sp, #32
 8005676:	af02      	add	r7, sp, #8
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800568e:	d112      	bne.n	80056b6 <HAL_SPI_Receive+0x44>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10e      	bne.n	80056b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2204      	movs	r2, #4
 800569c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056a0:	88fa      	ldrh	r2, [r7, #6]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f8f1 	bl	8005894 <HAL_SPI_TransmitReceive>
 80056b2:	4603      	mov	r3, r0
 80056b4:	e0ea      	b.n	800588c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_SPI_Receive+0x52>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e0e3      	b.n	800588c <HAL_SPI_Receive+0x21a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056cc:	f7fd fd48 	bl	8003160 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056de:	2302      	movs	r3, #2
 80056e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056e2:	e0ca      	b.n	800587a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_SPI_Receive+0x7e>
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056f4:	e0c1      	b.n	800587a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2204      	movs	r2, #4
 80056fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573c:	d10f      	bne.n	800575e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800574c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d007      	beq.n	800577c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800577a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d162      	bne.n	800584a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005784:	e02e      	b.n	80057e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b01      	cmp	r3, #1
 8005792:	d115      	bne.n	80057c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f103 020c 	add.w	r2, r3, #12
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057be:	e011      	b.n	80057e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c0:	f7fd fcce 	bl	8003160 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d803      	bhi.n	80057d8 <HAL_SPI_Receive+0x166>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d102      	bne.n	80057de <HAL_SPI_Receive+0x16c>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057e2:	e04a      	b.n	800587a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1cb      	bne.n	8005786 <HAL_SPI_Receive+0x114>
 80057ee:	e031      	b.n	8005854 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d113      	bne.n	8005826 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	b292      	uxth	r2, r2
 800580a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	1c9a      	adds	r2, r3, #2
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005824:	e011      	b.n	800584a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005826:	f7fd fc9b 	bl	8003160 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d803      	bhi.n	800583e <HAL_SPI_Receive+0x1cc>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d102      	bne.n	8005844 <HAL_SPI_Receive+0x1d2>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005848:	e017      	b.n	800587a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1cd      	bne.n	80057f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fa45 	bl	8005ce8 <SPI_EndRxTransaction>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
 8005876:	e000      	b.n	800587a <HAL_SPI_Receive+0x208>
  }

error :
 8005878:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	; 0x30
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058a2:	2301      	movs	r3, #1
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x26>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e18a      	b.n	8005bd0 <HAL_SPI_TransmitReceive+0x33c>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c2:	f7fd fc4d 	bl	8003160 <HAL_GetTick>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058d8:	887b      	ldrh	r3, [r7, #2]
 80058da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d00f      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x70>
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ea:	d107      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x68>
 80058f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d003      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005902:	e15b      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x82>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x82>
 8005910:	887b      	ldrh	r3, [r7, #2]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800591c:	e14e      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b04      	cmp	r3, #4
 8005928:	d003      	beq.n	8005932 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2205      	movs	r2, #5
 800592e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	887a      	ldrh	r2, [r7, #2]
 8005942:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	887a      	ldrh	r2, [r7, #2]
 800595a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d007      	beq.n	8005986 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598e:	d178      	bne.n	8005a82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_SPI_TransmitReceive+0x10a>
 8005998:	8b7b      	ldrh	r3, [r7, #26]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d166      	bne.n	8005a6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	881a      	ldrh	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c2:	e053      	b.n	8005a6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d11b      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x176>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d016      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x176>
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d113      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	881a      	ldrh	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	1c9a      	adds	r2, r3, #2
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d119      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x1b8>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	1c9a      	adds	r2, r3, #2
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a4c:	f7fd fb88 	bl	8003160 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d807      	bhi.n	8005a6c <HAL_SPI_TransmitReceive+0x1d8>
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d003      	beq.n	8005a6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a6a:	e0a7      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1a6      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x130>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1a1      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x130>
 8005a80:	e07c      	b.n	8005b7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_SPI_TransmitReceive+0x1fc>
 8005a8a:	8b7b      	ldrh	r3, [r7, #26]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d16b      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab6:	e057      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d11c      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x26c>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d017      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0x26c>
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d114      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	7812      	ldrb	r2, [r2, #0]
 8005ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d119      	bne.n	8005b42 <HAL_SPI_TransmitReceive+0x2ae>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d014      	beq.n	8005b42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b42:	f7fd fb0d 	bl	8003160 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d803      	bhi.n	8005b5a <HAL_SPI_TransmitReceive+0x2c6>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b58:	d102      	bne.n	8005b60 <HAL_SPI_TransmitReceive+0x2cc>
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d103      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b66:	e029      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1a2      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x224>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d19d      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f917 	bl	8005db4 <SPI_EndRxTxTransaction>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b98:	e010      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	e000      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005bba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3730      	adds	r7, #48	; 0x30
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005be8:	f7fd faba 	bl	8003160 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bf8:	f7fd fab2 	bl	8003160 <HAL_GetTick>
 8005bfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bfe:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	015b      	lsls	r3, r3, #5
 8005c04:	0d1b      	lsrs	r3, r3, #20
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c0e:	e054      	b.n	8005cba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d050      	beq.n	8005cba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c18:	f7fd faa2 	bl	8003160 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d902      	bls.n	8005c2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d13d      	bne.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c46:	d111      	bne.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c50:	d004      	beq.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5a:	d107      	bne.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c74:	d10f      	bne.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e017      	b.n	8005cda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d19b      	bne.n	8005c10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	2000001c 	.word	0x2000001c

08005ce8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cfc:	d111      	bne.n	8005d22 <SPI_EndRxTransaction+0x3a>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d06:	d004      	beq.n	8005d12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d10:	d107      	bne.n	8005d22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2a:	d12a      	bne.n	8005d82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d34:	d012      	beq.n	8005d5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff ff49 	bl	8005bd8 <SPI_WaitFlagStateUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d02d      	beq.n	8005da8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e026      	b.n	8005daa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	2101      	movs	r1, #1
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f7ff ff36 	bl	8005bd8 <SPI_WaitFlagStateUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01a      	beq.n	8005da8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e013      	b.n	8005daa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff ff23 	bl	8005bd8 <SPI_WaitFlagStateUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e000      	b.n	8005daa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <SPI_EndRxTxTransaction+0x7c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <SPI_EndRxTxTransaction+0x80>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0d5b      	lsrs	r3, r3, #21
 8005dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dde:	d112      	bne.n	8005e06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	2180      	movs	r1, #128	; 0x80
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff fef4 	bl	8005bd8 <SPI_WaitFlagStateUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfa:	f043 0220 	orr.w	r2, r3, #32
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e00f      	b.n	8005e26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d0f2      	beq.n	8005e06 <SPI_EndRxTxTransaction+0x52>
 8005e20:	e000      	b.n	8005e24 <SPI_EndRxTxTransaction+0x70>
        break;
 8005e22:	bf00      	nop
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	2000001c 	.word	0x2000001c
 8005e34:	165e9f81 	.word	0x165e9f81

08005e38 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e034      	b.n	8005eb8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7fb fa3c 	bl	80012e0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f002 f828 	bl	8007ec8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	461a      	mov	r2, r3
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	f002 f872 	bl	8007f6c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6858      	ldr	r0, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	f002 f8a7 	bl	8007fe8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	6892      	ldr	r2, [r2, #8]
 8005ea2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	f041 0101 	orr.w	r1, r1, #1
 8005eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e041      	b.n	8005f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fc ff7a 	bl	8002de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f000 fc7a 	bl	80067f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e04e      	b.n	8006016 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a23      	ldr	r2, [pc, #140]	; (8006024 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x80>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x80>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <HAL_TIM_Base_Start_IT+0xc8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x80>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1e      	ldr	r2, [pc, #120]	; (800602c <HAL_TIM_Base_Start_IT+0xcc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x80>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x80>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x80>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	; (8006038 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x80>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a18      	ldr	r2, [pc, #96]	; (800603c <HAL_TIM_Base_Start_IT+0xdc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d111      	bne.n	8006004 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b06      	cmp	r3, #6
 8005ff0:	d010      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0201 	orr.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006002:	e007      	b.n	8006014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40001800 	.word	0x40001800

08006040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e041      	b.n	80060d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f839 	bl	80060de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f000 fbba 	bl	80067f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <HAL_TIM_PWM_Start+0x24>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	bf14      	ite	ne
 8006110:	2301      	movne	r3, #1
 8006112:	2300      	moveq	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e022      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b04      	cmp	r3, #4
 800611c:	d109      	bne.n	8006132 <HAL_TIM_PWM_Start+0x3e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	bf14      	ite	ne
 800612a:	2301      	movne	r3, #1
 800612c:	2300      	moveq	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e015      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b08      	cmp	r3, #8
 8006136:	d109      	bne.n	800614c <HAL_TIM_PWM_Start+0x58>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	bf14      	ite	ne
 8006144:	2301      	movne	r3, #1
 8006146:	2300      	moveq	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e008      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07c      	b.n	8006260 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0x82>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006174:	e013      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b04      	cmp	r3, #4
 800617a:	d104      	bne.n	8006186 <HAL_TIM_PWM_Start+0x92>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006184:	e00b      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Start+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006194:	e003      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fe10 	bl	8006dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a2d      	ldr	r2, [pc, #180]	; (8006268 <HAL_TIM_PWM_Start+0x174>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIM_PWM_Start+0xcc>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2c      	ldr	r2, [pc, #176]	; (800626c <HAL_TIM_PWM_Start+0x178>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d101      	bne.n	80061c4 <HAL_TIM_PWM_Start+0xd0>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <HAL_TIM_PWM_Start+0xd2>
 80061c4:	2300      	movs	r3, #0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a22      	ldr	r2, [pc, #136]	; (8006268 <HAL_TIM_PWM_Start+0x174>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d022      	beq.n	800622a <HAL_TIM_PWM_Start+0x136>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ec:	d01d      	beq.n	800622a <HAL_TIM_PWM_Start+0x136>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_TIM_PWM_Start+0x17c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d018      	beq.n	800622a <HAL_TIM_PWM_Start+0x136>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_TIM_PWM_Start+0x180>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_TIM_PWM_Start+0x136>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_TIM_PWM_Start+0x184>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00e      	beq.n	800622a <HAL_TIM_PWM_Start+0x136>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a16      	ldr	r2, [pc, #88]	; (800626c <HAL_TIM_PWM_Start+0x178>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_TIM_PWM_Start+0x136>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_TIM_PWM_Start+0x188>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <HAL_TIM_PWM_Start+0x136>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a16      	ldr	r2, [pc, #88]	; (8006280 <HAL_TIM_PWM_Start+0x18c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d111      	bne.n	800624e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b06      	cmp	r3, #6
 800623a:	d010      	beq.n	800625e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624c:	e007      	b.n	800625e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40001800 	.word	0x40001800

08006284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d122      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d11b      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0202 	mvn.w	r2, #2
 80062b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa77 	bl	80067ba <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa69 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fa7a 	bl	80067ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d122      	bne.n	8006334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d11b      	bne.n	8006334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0204 	mvn.w	r2, #4
 8006304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa4d 	bl	80067ba <HAL_TIM_IC_CaptureCallback>
 8006320:	e005      	b.n	800632e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa3f 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa50 	bl	80067ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b08      	cmp	r3, #8
 8006340:	d122      	bne.n	8006388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b08      	cmp	r3, #8
 800634e:	d11b      	bne.n	8006388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0208 	mvn.w	r2, #8
 8006358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2204      	movs	r2, #4
 800635e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa23 	bl	80067ba <HAL_TIM_IC_CaptureCallback>
 8006374:	e005      	b.n	8006382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa15 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa26 	bl	80067ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	2b10      	cmp	r3, #16
 8006394:	d122      	bne.n	80063dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0210 	mvn.w	r2, #16
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2208      	movs	r2, #8
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f9f9 	bl	80067ba <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f9eb 	bl	80067a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f9fc 	bl	80067ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0201 	mvn.w	r2, #1
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fc fa84 	bl	8002910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b80      	cmp	r3, #128	; 0x80
 8006414:	d10e      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	d107      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800642c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fd78 	bl	8006f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d10e      	bne.n	8006460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d107      	bne.n	8006460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9c1 	bl	80067e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b20      	cmp	r3, #32
 800646c:	d10e      	bne.n	800648c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b20      	cmp	r3, #32
 800647a:	d107      	bne.n	800648c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0220 	mvn.w	r2, #32
 8006484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fd42 	bl	8006f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e0ae      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	f200 809f 	bhi.w	8006600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	08006601 	.word	0x08006601
 80064d0:	08006601 	.word	0x08006601
 80064d4:	08006601 	.word	0x08006601
 80064d8:	0800653d 	.word	0x0800653d
 80064dc:	08006601 	.word	0x08006601
 80064e0:	08006601 	.word	0x08006601
 80064e4:	08006601 	.word	0x08006601
 80064e8:	0800657f 	.word	0x0800657f
 80064ec:	08006601 	.word	0x08006601
 80064f0:	08006601 	.word	0x08006601
 80064f4:	08006601 	.word	0x08006601
 80064f8:	080065bf 	.word	0x080065bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fa18 	bl	8006938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0208 	orr.w	r2, r2, #8
 8006516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0204 	bic.w	r2, r2, #4
 8006526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6999      	ldr	r1, [r3, #24]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	619a      	str	r2, [r3, #24]
      break;
 800653a:	e064      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fa68 	bl	8006a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	021a      	lsls	r2, r3, #8
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	619a      	str	r2, [r3, #24]
      break;
 800657c:	e043      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fabd 	bl	8006b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0208 	orr.w	r2, r2, #8
 8006598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0204 	bic.w	r2, r2, #4
 80065a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69d9      	ldr	r1, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	61da      	str	r2, [r3, #28]
      break;
 80065bc:	e023      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fb11 	bl	8006bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69d9      	ldr	r1, [r3, #28]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	021a      	lsls	r2, r3, #8
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	61da      	str	r2, [r3, #28]
      break;
 80065fe:	e002      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	75fb      	strb	r3, [r7, #23]
      break;
 8006604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIM_ConfigClockSource+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e0b4      	b.n	800679e <HAL_TIM_ConfigClockSource+0x186>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d03e      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0xd4>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006672:	f200 8087 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	f000 8086 	beq.w	800678a <HAL_TIM_ConfigClockSource+0x172>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	d87f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b70      	cmp	r3, #112	; 0x70
 8006686:	d01a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xa6>
 8006688:	2b70      	cmp	r3, #112	; 0x70
 800668a:	d87b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b60      	cmp	r3, #96	; 0x60
 800668e:	d050      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x11a>
 8006690:	2b60      	cmp	r3, #96	; 0x60
 8006692:	d877      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b50      	cmp	r3, #80	; 0x50
 8006696:	d03c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xfa>
 8006698:	2b50      	cmp	r3, #80	; 0x50
 800669a:	d873      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d058      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x13a>
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d86f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066a4:	2b30      	cmp	r3, #48	; 0x30
 80066a6:	d064      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066a8:	2b30      	cmp	r3, #48	; 0x30
 80066aa:	d86b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d060      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d867      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05c      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d05a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	e062      	b.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f000 fb5d 	bl	8006d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
      break;
 80066ea:	e04f      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6899      	ldr	r1, [r3, #8]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f000 fb46 	bl	8006d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800670e:	609a      	str	r2, [r3, #8]
      break;
 8006710:	e03c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	461a      	mov	r2, r3
 8006720:	f000 faba 	bl	8006c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2150      	movs	r1, #80	; 0x50
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fb13 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 8006730:	e02c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	461a      	mov	r2, r3
 8006740:	f000 fad9 	bl	8006cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2160      	movs	r1, #96	; 0x60
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fb03 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 8006750:	e01c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6859      	ldr	r1, [r3, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	461a      	mov	r2, r3
 8006760:	f000 fa9a 	bl	8006c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	4618      	mov	r0, r3
 800676c:	f000 faf3 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 8006770:	e00c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 faea 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 8006782:	e003      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e000      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800678a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
	...

080067f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a40      	ldr	r2, [pc, #256]	; (800690c <TIM_Base_SetConfig+0x114>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <TIM_Base_SetConfig+0x40>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006816:	d00f      	beq.n	8006838 <TIM_Base_SetConfig+0x40>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a3d      	ldr	r2, [pc, #244]	; (8006910 <TIM_Base_SetConfig+0x118>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00b      	beq.n	8006838 <TIM_Base_SetConfig+0x40>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a3c      	ldr	r2, [pc, #240]	; (8006914 <TIM_Base_SetConfig+0x11c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d007      	beq.n	8006838 <TIM_Base_SetConfig+0x40>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a3b      	ldr	r2, [pc, #236]	; (8006918 <TIM_Base_SetConfig+0x120>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_Base_SetConfig+0x40>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a3a      	ldr	r2, [pc, #232]	; (800691c <TIM_Base_SetConfig+0x124>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d108      	bne.n	800684a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2f      	ldr	r2, [pc, #188]	; (800690c <TIM_Base_SetConfig+0x114>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d02b      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006858:	d027      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a2c      	ldr	r2, [pc, #176]	; (8006910 <TIM_Base_SetConfig+0x118>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d023      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a2b      	ldr	r2, [pc, #172]	; (8006914 <TIM_Base_SetConfig+0x11c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01f      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <TIM_Base_SetConfig+0x120>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01b      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a29      	ldr	r2, [pc, #164]	; (800691c <TIM_Base_SetConfig+0x124>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d017      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a28      	ldr	r2, [pc, #160]	; (8006920 <TIM_Base_SetConfig+0x128>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a27      	ldr	r2, [pc, #156]	; (8006924 <TIM_Base_SetConfig+0x12c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00f      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a26      	ldr	r2, [pc, #152]	; (8006928 <TIM_Base_SetConfig+0x130>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00b      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a25      	ldr	r2, [pc, #148]	; (800692c <TIM_Base_SetConfig+0x134>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a24      	ldr	r2, [pc, #144]	; (8006930 <TIM_Base_SetConfig+0x138>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_Base_SetConfig+0xb2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a23      	ldr	r2, [pc, #140]	; (8006934 <TIM_Base_SetConfig+0x13c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d108      	bne.n	80068bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a0a      	ldr	r2, [pc, #40]	; (800690c <TIM_Base_SetConfig+0x114>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_Base_SetConfig+0xf8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a0c      	ldr	r2, [pc, #48]	; (800691c <TIM_Base_SetConfig+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d103      	bne.n	80068f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	615a      	str	r2, [r3, #20]
}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40010000 	.word	0x40010000
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40010400 	.word	0x40010400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800
 800692c:	40001800 	.word	0x40001800
 8006930:	40001c00 	.word	0x40001c00
 8006934:	40002000 	.word	0x40002000

08006938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f023 0201 	bic.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f023 0302 	bic.w	r3, r3, #2
 8006980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a20      	ldr	r2, [pc, #128]	; (8006a10 <TIM_OC1_SetConfig+0xd8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC1_SetConfig+0x64>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <TIM_OC1_SetConfig+0xdc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d10c      	bne.n	80069b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0308 	bic.w	r3, r3, #8
 80069a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 0304 	bic.w	r3, r3, #4
 80069b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a15      	ldr	r2, [pc, #84]	; (8006a10 <TIM_OC1_SetConfig+0xd8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_OC1_SetConfig+0x8e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a14      	ldr	r2, [pc, #80]	; (8006a14 <TIM_OC1_SetConfig+0xdc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d111      	bne.n	80069ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	621a      	str	r2, [r3, #32]
}
 8006a04:	bf00      	nop
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40010400 	.word	0x40010400

08006a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0210 	bic.w	r2, r3, #16
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0320 	bic.w	r3, r3, #32
 8006a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a22      	ldr	r2, [pc, #136]	; (8006afc <TIM_OC2_SetConfig+0xe4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d003      	beq.n	8006a80 <TIM_OC2_SetConfig+0x68>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <TIM_OC2_SetConfig+0xe8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10d      	bne.n	8006a9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <TIM_OC2_SetConfig+0xe4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC2_SetConfig+0x94>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <TIM_OC2_SetConfig+0xe8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d113      	bne.n	8006ad4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400

08006b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <TIM_OC3_SetConfig+0xe0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_OC3_SetConfig+0x66>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <TIM_OC3_SetConfig+0xe4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10d      	bne.n	8006b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a16      	ldr	r2, [pc, #88]	; (8006be4 <TIM_OC3_SetConfig+0xe0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_OC3_SetConfig+0x92>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <TIM_OC3_SetConfig+0xe4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d113      	bne.n	8006bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400

08006bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	031b      	lsls	r3, r3, #12
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <TIM_OC4_SetConfig+0xa4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_OC4_SetConfig+0x68>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <TIM_OC4_SetConfig+0xa8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d109      	bne.n	8006c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	019b      	lsls	r3, r3, #6
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40010400 	.word	0x40010400

08006c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 030a 	bic.w	r3, r3, #10
 8006cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b087      	sub	sp, #28
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f023 0210 	bic.w	r2, r3, #16
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	031b      	lsls	r3, r3, #12
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f043 0307 	orr.w	r3, r3, #7
 8006d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	609a      	str	r2, [r3, #8]
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	609a      	str	r2, [r3, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	2201      	movs	r2, #1
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	43db      	mvns	r3, r3
 8006dee:	401a      	ands	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1a      	ldr	r2, [r3, #32]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	431a      	orrs	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e05a      	b.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7c:	d01d      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1a      	ldr	r2, [pc, #104]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a18      	ldr	r2, [pc, #96]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800
 8006f00:	40000c00 	.word	0x40000c00
 8006f04:	40010400 	.word	0x40010400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40001800 	.word	0x40001800

08006f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e03f      	b.n	8006fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fc f81e 	bl	8002fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2224      	movs	r2, #36	; 0x24
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fddb 	bl	8007b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695a      	ldr	r2, [r3, #20]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b08a      	sub	sp, #40	; 0x28
 8006fd6:	af02      	add	r7, sp, #8
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d17c      	bne.n	80070ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <HAL_UART_Transmit+0x2c>
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e075      	b.n	80070ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_UART_Transmit+0x3e>
 800700c:	2302      	movs	r3, #2
 800700e:	e06e      	b.n	80070ee <HAL_UART_Transmit+0x11c>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2221      	movs	r2, #33	; 0x21
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007026:	f7fc f89b 	bl	8003160 <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	88fa      	ldrh	r2, [r7, #6]
 8007036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007040:	d108      	bne.n	8007054 <HAL_UART_Transmit+0x82>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	e003      	b.n	800705c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007058:	2300      	movs	r3, #0
 800705a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007064:	e02a      	b.n	80070bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2200      	movs	r2, #0
 800706e:	2180      	movs	r1, #128	; 0x80
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fb1f 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e036      	b.n	80070ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10b      	bne.n	800709e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	3302      	adds	r3, #2
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	e007      	b.n	80070ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	3301      	adds	r3, #1
 80070ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1cf      	bne.n	8007066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2140      	movs	r1, #64	; 0x40
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 faef 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070ec:	2302      	movs	r3, #2
  }
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	4613      	mov	r3, r2
 8007102:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b20      	cmp	r3, #32
 800710e:	d11d      	bne.n	800714c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Receive_IT+0x26>
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e016      	b.n	800714e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_UART_Receive_IT+0x38>
 800712a:	2302      	movs	r3, #2
 800712c:	e00f      	b.n	800714e <HAL_UART_Receive_IT+0x58>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	461a      	mov	r2, r3
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fb24 	bl	8007790 <UART_Start_Receive_IT>
 8007148:	4603      	mov	r3, r0
 800714a:	e000      	b.n	800714e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b0ba      	sub	sp, #232	; 0xe8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800717e:	2300      	movs	r3, #0
 8007180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007184:	2300      	movs	r3, #0
 8007186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800718a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10f      	bne.n	80071be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <HAL_UART_IRQHandler+0x66>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc03 	bl	80079c2 <UART_Receive_IT>
      return;
 80071bc:	e256      	b.n	800766c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80de 	beq.w	8007384 <HAL_UART_IRQHandler+0x22c>
 80071c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80d1 	beq.w	8007384 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <HAL_UART_IRQHandler+0xae>
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f043 0201 	orr.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f043 0202 	orr.w	r2, r3, #2
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_UART_IRQHandler+0xf6>
 8007236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d011      	beq.n	800727e <HAL_UART_IRQHandler+0x126>
 800725a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f043 0208 	orr.w	r2, r3, #8
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 81ed 	beq.w	8007662 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_UART_IRQHandler+0x14e>
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb8e 	bl	80079c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b40      	cmp	r3, #64	; 0x40
 80072b2:	bf0c      	ite	eq
 80072b4:	2301      	moveq	r3, #1
 80072b6:	2300      	movne	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <HAL_UART_IRQHandler+0x17a>
 80072ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d04f      	beq.n	8007372 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa96 	bl	8007804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d141      	bne.n	800736a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3314      	adds	r3, #20
 80072ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800731e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800732a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1d9      	bne.n	80072e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	4a7d      	ldr	r2, [pc, #500]	; (8007534 <HAL_UART_IRQHandler+0x3dc>)
 8007340:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	4618      	mov	r0, r3
 8007348:	f7fc fdd4 	bl	8003ef4 <HAL_DMA_Abort_IT>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	e00e      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f990 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e00a      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f98c 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e006      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f988 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800737e:	e170      	b.n	8007662 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	bf00      	nop
    return;
 8007382:	e16e      	b.n	8007662 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	2b01      	cmp	r3, #1
 800738a:	f040 814a 	bne.w	8007622 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8143 	beq.w	8007622 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 813c 	beq.w	8007622 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	f040 80b4 	bne.w	8007538 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8140 	beq.w	8007666 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ee:	429a      	cmp	r2, r3
 80073f0:	f080 8139 	bcs.w	8007666 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007406:	f000 8088 	beq.w	800751a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	330c      	adds	r3, #12
 8007432:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007442:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800744e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1d9      	bne.n	800740a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3314      	adds	r3, #20
 8007476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800747a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800747e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007482:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800748c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e1      	bne.n	8007456 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3314      	adds	r3, #20
 8007498:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3314      	adds	r3, #20
 80074b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e3      	bne.n	8007492 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	330c      	adds	r3, #12
 80074de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ea:	f023 0310 	bic.w	r3, r3, #16
 80074ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	330c      	adds	r3, #12
 80074f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80074fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800750a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e3      	bne.n	80074d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	4618      	mov	r0, r3
 8007516:	f7fc fc7d 	bl	8003e14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007522:	b29b      	uxth	r3, r3
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f8b6 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007530:	e099      	b.n	8007666 <HAL_UART_IRQHandler+0x50e>
 8007532:	bf00      	nop
 8007534:	080078cb 	.word	0x080078cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007540:	b29b      	uxth	r3, r3
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 808b 	beq.w	800766a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8086 	beq.w	800766a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	330c      	adds	r3, #12
 8007564:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007582:	647a      	str	r2, [r7, #68]	; 0x44
 8007584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e3      	bne.n	800755e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3314      	adds	r3, #20
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	623b      	str	r3, [r7, #32]
   return(result);
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f023 0301 	bic.w	r3, r3, #1
 80075ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075ba:	633a      	str	r2, [r7, #48]	; 0x30
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e3      	bne.n	8007596 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330c      	adds	r3, #12
 80075e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0310 	bic.w	r3, r3, #16
 80075f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007600:	61fa      	str	r2, [r7, #28]
 8007602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	617b      	str	r3, [r7, #20]
   return(result);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e3      	bne.n	80075dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f83e 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007620:	e023      	b.n	800766a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_UART_IRQHandler+0x4ea>
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f959 	bl	80078f2 <UART_Transmit_IT>
    return;
 8007640:	e014      	b.n	800766c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00e      	beq.n	800766c <HAL_UART_IRQHandler+0x514>
 800764e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f999 	bl	8007992 <UART_EndTransmit_IT>
    return;
 8007660:	e004      	b.n	800766c <HAL_UART_IRQHandler+0x514>
    return;
 8007662:	bf00      	nop
 8007664:	e002      	b.n	800766c <HAL_UART_IRQHandler+0x514>
      return;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_UART_IRQHandler+0x514>
      return;
 800766a:	bf00      	nop
  }
}
 800766c:	37e8      	adds	r7, #232	; 0xe8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop

08007674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b090      	sub	sp, #64	; 0x40
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c4:	e050      	b.n	8007768 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076cc:	d04c      	beq.n	8007768 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076d4:	f7fb fd44 	bl	8003160 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d241      	bcs.n	8007768 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007704:	637a      	str	r2, [r7, #52]	; 0x34
 8007706:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800770a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e5      	bne.n	80076e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	613b      	str	r3, [r7, #16]
   return(result);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007738:	623a      	str	r2, [r7, #32]
 800773a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	69f9      	ldr	r1, [r7, #28]
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	61bb      	str	r3, [r7, #24]
   return(result);
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e5      	bne.n	8007718 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e00f      	b.n	8007788 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4013      	ands	r3, r2
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	429a      	cmp	r2, r3
 8007776:	bf0c      	ite	eq
 8007778:	2301      	moveq	r3, #1
 800777a:	2300      	movne	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	429a      	cmp	r2, r3
 8007784:	d09f      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3740      	adds	r7, #64	; 0x40
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2222      	movs	r2, #34	; 0x22
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695a      	ldr	r2, [r3, #20]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0201 	orr.w	r2, r2, #1
 80077e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f042 0220 	orr.w	r2, r2, #32
 80077f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b095      	sub	sp, #84	; 0x54
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800782c:	643a      	str	r2, [r7, #64]	; 0x40
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3314      	adds	r3, #20
 8007846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	d119      	bne.n	80078b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	60bb      	str	r3, [r7, #8]
   return(result);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f023 0310 	bic.w	r3, r3, #16
 8007892:	647b      	str	r3, [r7, #68]	; 0x44
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800789c:	61ba      	str	r2, [r7, #24]
 800789e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078be:	bf00      	nop
 80078c0:	3754      	adds	r7, #84	; 0x54
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff fecf 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b21      	cmp	r3, #33	; 0x21
 8007904:	d13e      	bne.n	8007984 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790e:	d114      	bne.n	800793a <UART_Transmit_IT+0x48>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d110      	bne.n	800793a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	1c9a      	adds	r2, r3, #2
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	621a      	str	r2, [r3, #32]
 8007938:	e008      	b.n	800794c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	1c59      	adds	r1, r3, #1
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6211      	str	r1, [r2, #32]
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29b      	uxth	r3, r3
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	4619      	mov	r1, r3
 800795a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10f      	bne.n	8007980 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800796e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800797e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fe5e 	bl	8007674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b08c      	sub	sp, #48	; 0x30
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b22      	cmp	r3, #34	; 0x22
 80079d4:	f040 80ab 	bne.w	8007b2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e0:	d117      	bne.n	8007a12 <UART_Receive_IT+0x50>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d113      	bne.n	8007a12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	1c9a      	adds	r2, r3, #2
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a10:	e026      	b.n	8007a60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a24:	d007      	beq.n	8007a36 <UART_Receive_IT+0x74>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <UART_Receive_IT+0x82>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e008      	b.n	8007a56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d15a      	bne.n	8007b2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0220 	bic.w	r2, r2, #32
 8007a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0201 	bic.w	r2, r2, #1
 8007aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d135      	bne.n	8007b20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f023 0310 	bic.w	r3, r3, #16
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ada:	623a      	str	r2, [r7, #32]
 8007adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	69f9      	ldr	r1, [r7, #28]
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e5      	bne.n	8007aba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0310 	and.w	r3, r3, #16
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d10a      	bne.n	8007b12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fdbf 	bl	800769c <HAL_UARTEx_RxEventCallback>
 8007b1e:	e002      	b.n	8007b26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fb f9ed 	bl	8002f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e002      	b.n	8007b30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e000      	b.n	8007b30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b2e:	2302      	movs	r3, #2
  }
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3730      	adds	r7, #48	; 0x30
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	b09f      	sub	sp, #124	; 0x7c
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4e:	68d9      	ldr	r1, [r3, #12]
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	ea40 0301 	orr.w	r3, r0, r1
 8007b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b7c:	f021 010c 	bic.w	r1, r1, #12
 8007b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b86:	430b      	orrs	r3, r1
 8007b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b96:	6999      	ldr	r1, [r3, #24]
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	ea40 0301 	orr.w	r3, r0, r1
 8007ba0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4bc5      	ldr	r3, [pc, #788]	; (8007ebc <UART_SetConfig+0x384>)
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d004      	beq.n	8007bb6 <UART_SetConfig+0x7e>
 8007bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	4bc3      	ldr	r3, [pc, #780]	; (8007ec0 <UART_SetConfig+0x388>)
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d103      	bne.n	8007bbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bb6:	f7fd fb83 	bl	80052c0 <HAL_RCC_GetPCLK2Freq>
 8007bba:	6778      	str	r0, [r7, #116]	; 0x74
 8007bbc:	e002      	b.n	8007bc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bbe:	f7fd fb6b 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 8007bc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bcc:	f040 80b6 	bne.w	8007d3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd2:	461c      	mov	r4, r3
 8007bd4:	f04f 0500 	mov.w	r5, #0
 8007bd8:	4622      	mov	r2, r4
 8007bda:	462b      	mov	r3, r5
 8007bdc:	1891      	adds	r1, r2, r2
 8007bde:	6439      	str	r1, [r7, #64]	; 0x40
 8007be0:	415b      	adcs	r3, r3
 8007be2:	647b      	str	r3, [r7, #68]	; 0x44
 8007be4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007be8:	1912      	adds	r2, r2, r4
 8007bea:	eb45 0303 	adc.w	r3, r5, r3
 8007bee:	f04f 0000 	mov.w	r0, #0
 8007bf2:	f04f 0100 	mov.w	r1, #0
 8007bf6:	00d9      	lsls	r1, r3, #3
 8007bf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bfc:	00d0      	lsls	r0, r2, #3
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	1911      	adds	r1, r2, r4
 8007c04:	6639      	str	r1, [r7, #96]	; 0x60
 8007c06:	416b      	adcs	r3, r5
 8007c08:	667b      	str	r3, [r7, #100]	; 0x64
 8007c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	1891      	adds	r1, r2, r2
 8007c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c18:	415b      	adcs	r3, r3
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c24:	f7f8 ff42 	bl	8000aac <__aeabi_uldivmod>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4ba5      	ldr	r3, [pc, #660]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	011e      	lsls	r6, r3, #4
 8007c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c38:	461c      	mov	r4, r3
 8007c3a:	f04f 0500 	mov.w	r5, #0
 8007c3e:	4622      	mov	r2, r4
 8007c40:	462b      	mov	r3, r5
 8007c42:	1891      	adds	r1, r2, r2
 8007c44:	6339      	str	r1, [r7, #48]	; 0x30
 8007c46:	415b      	adcs	r3, r3
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c4e:	1912      	adds	r2, r2, r4
 8007c50:	eb45 0303 	adc.w	r3, r5, r3
 8007c54:	f04f 0000 	mov.w	r0, #0
 8007c58:	f04f 0100 	mov.w	r1, #0
 8007c5c:	00d9      	lsls	r1, r3, #3
 8007c5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c62:	00d0      	lsls	r0, r2, #3
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	1911      	adds	r1, r2, r4
 8007c6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c6c:	416b      	adcs	r3, r5
 8007c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	461a      	mov	r2, r3
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	1891      	adds	r1, r2, r2
 8007c7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c7e:	415b      	adcs	r3, r3
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c8a:	f7f8 ff0f 	bl	8000aac <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4b8c      	ldr	r3, [pc, #560]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007c94:	fba3 1302 	umull	r1, r3, r3, r2
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	2164      	movs	r1, #100	; 0x64
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	3332      	adds	r3, #50	; 0x32
 8007ca6:	4a87      	ldr	r2, [pc, #540]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cb4:	441e      	add	r6, r3
 8007cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f04f 0100 	mov.w	r1, #0
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	1894      	adds	r4, r2, r2
 8007cc4:	623c      	str	r4, [r7, #32]
 8007cc6:	415b      	adcs	r3, r3
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cce:	1812      	adds	r2, r2, r0
 8007cd0:	eb41 0303 	adc.w	r3, r1, r3
 8007cd4:	f04f 0400 	mov.w	r4, #0
 8007cd8:	f04f 0500 	mov.w	r5, #0
 8007cdc:	00dd      	lsls	r5, r3, #3
 8007cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ce2:	00d4      	lsls	r4, r2, #3
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	1814      	adds	r4, r2, r0
 8007cea:	653c      	str	r4, [r7, #80]	; 0x50
 8007cec:	414b      	adcs	r3, r1
 8007cee:	657b      	str	r3, [r7, #84]	; 0x54
 8007cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	1891      	adds	r1, r2, r2
 8007cfc:	61b9      	str	r1, [r7, #24]
 8007cfe:	415b      	adcs	r3, r3
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d0a:	f7f8 fecf 	bl	8000aac <__aeabi_uldivmod>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4b6c      	ldr	r3, [pc, #432]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007d14:	fba3 1302 	umull	r1, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	2164      	movs	r1, #100	; 0x64
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	3332      	adds	r3, #50	; 0x32
 8007d26:	4a67      	ldr	r2, [pc, #412]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007d28:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	f003 0207 	and.w	r2, r3, #7
 8007d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4432      	add	r2, r6
 8007d38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d3a:	e0b9      	b.n	8007eb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d3e:	461c      	mov	r4, r3
 8007d40:	f04f 0500 	mov.w	r5, #0
 8007d44:	4622      	mov	r2, r4
 8007d46:	462b      	mov	r3, r5
 8007d48:	1891      	adds	r1, r2, r2
 8007d4a:	6139      	str	r1, [r7, #16]
 8007d4c:	415b      	adcs	r3, r3
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d54:	1912      	adds	r2, r2, r4
 8007d56:	eb45 0303 	adc.w	r3, r5, r3
 8007d5a:	f04f 0000 	mov.w	r0, #0
 8007d5e:	f04f 0100 	mov.w	r1, #0
 8007d62:	00d9      	lsls	r1, r3, #3
 8007d64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d68:	00d0      	lsls	r0, r2, #3
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	eb12 0804 	adds.w	r8, r2, r4
 8007d72:	eb43 0905 	adc.w	r9, r3, r5
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	008b      	lsls	r3, r1, #2
 8007d8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d8e:	0082      	lsls	r2, r0, #2
 8007d90:	4640      	mov	r0, r8
 8007d92:	4649      	mov	r1, r9
 8007d94:	f7f8 fe8a 	bl	8000aac <__aeabi_uldivmod>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4b49      	ldr	r3, [pc, #292]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	011e      	lsls	r6, r3, #4
 8007da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da8:	4618      	mov	r0, r3
 8007daa:	f04f 0100 	mov.w	r1, #0
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	1894      	adds	r4, r2, r2
 8007db4:	60bc      	str	r4, [r7, #8]
 8007db6:	415b      	adcs	r3, r3
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dbe:	1812      	adds	r2, r2, r0
 8007dc0:	eb41 0303 	adc.w	r3, r1, r3
 8007dc4:	f04f 0400 	mov.w	r4, #0
 8007dc8:	f04f 0500 	mov.w	r5, #0
 8007dcc:	00dd      	lsls	r5, r3, #3
 8007dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dd2:	00d4      	lsls	r4, r2, #3
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	1814      	adds	r4, r2, r0
 8007dda:	64bc      	str	r4, [r7, #72]	; 0x48
 8007ddc:	414b      	adcs	r3, r1
 8007dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	008b      	lsls	r3, r1, #2
 8007df4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007df8:	0082      	lsls	r2, r0, #2
 8007dfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007dfe:	f7f8 fe55 	bl	8000aac <__aeabi_uldivmod>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4b2f      	ldr	r3, [pc, #188]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e08:	fba3 1302 	umull	r1, r3, r3, r2
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	2164      	movs	r1, #100	; 0x64
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	3332      	adds	r3, #50	; 0x32
 8007e1a:	4a2a      	ldr	r2, [pc, #168]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e26:	441e      	add	r6, r3
 8007e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f04f 0100 	mov.w	r1, #0
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	1894      	adds	r4, r2, r2
 8007e36:	603c      	str	r4, [r7, #0]
 8007e38:	415b      	adcs	r3, r3
 8007e3a:	607b      	str	r3, [r7, #4]
 8007e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e40:	1812      	adds	r2, r2, r0
 8007e42:	eb41 0303 	adc.w	r3, r1, r3
 8007e46:	f04f 0400 	mov.w	r4, #0
 8007e4a:	f04f 0500 	mov.w	r5, #0
 8007e4e:	00dd      	lsls	r5, r3, #3
 8007e50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e54:	00d4      	lsls	r4, r2, #3
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	eb12 0a00 	adds.w	sl, r2, r0
 8007e5e:	eb43 0b01 	adc.w	fp, r3, r1
 8007e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	008b      	lsls	r3, r1, #2
 8007e76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e7a:	0082      	lsls	r2, r0, #2
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	4659      	mov	r1, fp
 8007e80:	f7f8 fe14 	bl	8000aac <__aeabi_uldivmod>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	2164      	movs	r1, #100	; 0x64
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	3332      	adds	r3, #50	; 0x32
 8007e9c:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4432      	add	r2, r6
 8007eae:	609a      	str	r2, [r3, #8]
}
 8007eb0:	bf00      	nop
 8007eb2:	377c      	adds	r7, #124	; 0x7c
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eba:	bf00      	nop
 8007ebc:	40011000 	.word	0x40011000
 8007ec0:	40011400 	.word	0x40011400
 8007ec4:	51eb851f 	.word	0x51eb851f

08007ec8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <FSMC_NORSRAM_Init+0xa0>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007ef2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007ef8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007efe:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007f04:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007f0a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007f10:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007f16:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007f1c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007f22:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007f28:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007f2e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007f34:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d103      	bne.n	8007f4c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	fff00080 	.word	0xfff00080

08007f6c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f86:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f8e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f9a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fa2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007faa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fb4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	3b02      	subs	r3, #2
 8007fbc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007fbe:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008000:	d122      	bne.n	8008048 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4b15      	ldr	r3, [pc, #84]	; (8008064 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008010:	4013      	ands	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800801e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008026:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800802e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008034:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6979      	ldr	r1, [r7, #20]
 8008042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008046:	e005      	b.n	8008054 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	cff00000 	.word	0xcff00000

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	; (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	20000028 	.word	0x20000028

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f001 f84c 	bl	8009124 <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	0800c254 	.word	0x0800c254
 80080b0:	0800c254 	.word	0x0800c254
 80080b4:	0800c254 	.word	0x0800c254
 80080b8:	0800c258 	.word	0x0800c258

080080bc <memset>:
 80080bc:	4402      	add	r2, r0
 80080be:	4603      	mov	r3, r0
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d100      	bne.n	80080c6 <memset+0xa>
 80080c4:	4770      	bx	lr
 80080c6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ca:	e7f9      	b.n	80080c0 <memset+0x4>

080080cc <_puts_r>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	460e      	mov	r6, r1
 80080d0:	4605      	mov	r5, r0
 80080d2:	b118      	cbz	r0, 80080dc <_puts_r+0x10>
 80080d4:	6983      	ldr	r3, [r0, #24]
 80080d6:	b90b      	cbnz	r3, 80080dc <_puts_r+0x10>
 80080d8:	f000 fa68 	bl	80085ac <__sinit>
 80080dc:	69ab      	ldr	r3, [r5, #24]
 80080de:	68ac      	ldr	r4, [r5, #8]
 80080e0:	b913      	cbnz	r3, 80080e8 <_puts_r+0x1c>
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 fa62 	bl	80085ac <__sinit>
 80080e8:	4b2c      	ldr	r3, [pc, #176]	; (800819c <_puts_r+0xd0>)
 80080ea:	429c      	cmp	r4, r3
 80080ec:	d120      	bne.n	8008130 <_puts_r+0x64>
 80080ee:	686c      	ldr	r4, [r5, #4]
 80080f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f2:	07db      	lsls	r3, r3, #31
 80080f4:	d405      	bmi.n	8008102 <_puts_r+0x36>
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	0598      	lsls	r0, r3, #22
 80080fa:	d402      	bmi.n	8008102 <_puts_r+0x36>
 80080fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080fe:	f000 faf3 	bl	80086e8 <__retarget_lock_acquire_recursive>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	0719      	lsls	r1, r3, #28
 8008106:	d51d      	bpl.n	8008144 <_puts_r+0x78>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	b1db      	cbz	r3, 8008144 <_puts_r+0x78>
 800810c:	3e01      	subs	r6, #1
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008114:	3b01      	subs	r3, #1
 8008116:	60a3      	str	r3, [r4, #8]
 8008118:	bb39      	cbnz	r1, 800816a <_puts_r+0x9e>
 800811a:	2b00      	cmp	r3, #0
 800811c:	da38      	bge.n	8008190 <_puts_r+0xc4>
 800811e:	4622      	mov	r2, r4
 8008120:	210a      	movs	r1, #10
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f868 	bl	80081f8 <__swbuf_r>
 8008128:	3001      	adds	r0, #1
 800812a:	d011      	beq.n	8008150 <_puts_r+0x84>
 800812c:	250a      	movs	r5, #10
 800812e:	e011      	b.n	8008154 <_puts_r+0x88>
 8008130:	4b1b      	ldr	r3, [pc, #108]	; (80081a0 <_puts_r+0xd4>)
 8008132:	429c      	cmp	r4, r3
 8008134:	d101      	bne.n	800813a <_puts_r+0x6e>
 8008136:	68ac      	ldr	r4, [r5, #8]
 8008138:	e7da      	b.n	80080f0 <_puts_r+0x24>
 800813a:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <_puts_r+0xd8>)
 800813c:	429c      	cmp	r4, r3
 800813e:	bf08      	it	eq
 8008140:	68ec      	ldreq	r4, [r5, #12]
 8008142:	e7d5      	b.n	80080f0 <_puts_r+0x24>
 8008144:	4621      	mov	r1, r4
 8008146:	4628      	mov	r0, r5
 8008148:	f000 f8a8 	bl	800829c <__swsetup_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	d0dd      	beq.n	800810c <_puts_r+0x40>
 8008150:	f04f 35ff 	mov.w	r5, #4294967295
 8008154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008156:	07da      	lsls	r2, r3, #31
 8008158:	d405      	bmi.n	8008166 <_puts_r+0x9a>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	059b      	lsls	r3, r3, #22
 800815e:	d402      	bmi.n	8008166 <_puts_r+0x9a>
 8008160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008162:	f000 fac2 	bl	80086ea <__retarget_lock_release_recursive>
 8008166:	4628      	mov	r0, r5
 8008168:	bd70      	pop	{r4, r5, r6, pc}
 800816a:	2b00      	cmp	r3, #0
 800816c:	da04      	bge.n	8008178 <_puts_r+0xac>
 800816e:	69a2      	ldr	r2, [r4, #24]
 8008170:	429a      	cmp	r2, r3
 8008172:	dc06      	bgt.n	8008182 <_puts_r+0xb6>
 8008174:	290a      	cmp	r1, #10
 8008176:	d004      	beq.n	8008182 <_puts_r+0xb6>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	7019      	strb	r1, [r3, #0]
 8008180:	e7c5      	b.n	800810e <_puts_r+0x42>
 8008182:	4622      	mov	r2, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f000 f837 	bl	80081f8 <__swbuf_r>
 800818a:	3001      	adds	r0, #1
 800818c:	d1bf      	bne.n	800810e <_puts_r+0x42>
 800818e:	e7df      	b.n	8008150 <_puts_r+0x84>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	250a      	movs	r5, #10
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	701d      	strb	r5, [r3, #0]
 800819a:	e7db      	b.n	8008154 <_puts_r+0x88>
 800819c:	0800c1d8 	.word	0x0800c1d8
 80081a0:	0800c1f8 	.word	0x0800c1f8
 80081a4:	0800c1b8 	.word	0x0800c1b8

080081a8 <puts>:
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <puts+0xc>)
 80081aa:	4601      	mov	r1, r0
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	f7ff bf8d 	b.w	80080cc <_puts_r>
 80081b2:	bf00      	nop
 80081b4:	20000028 	.word	0x20000028

080081b8 <siprintf>:
 80081b8:	b40e      	push	{r1, r2, r3}
 80081ba:	b500      	push	{lr}
 80081bc:	b09c      	sub	sp, #112	; 0x70
 80081be:	ab1d      	add	r3, sp, #116	; 0x74
 80081c0:	9002      	str	r0, [sp, #8]
 80081c2:	9006      	str	r0, [sp, #24]
 80081c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081c8:	4809      	ldr	r0, [pc, #36]	; (80081f0 <siprintf+0x38>)
 80081ca:	9107      	str	r1, [sp, #28]
 80081cc:	9104      	str	r1, [sp, #16]
 80081ce:	4909      	ldr	r1, [pc, #36]	; (80081f4 <siprintf+0x3c>)
 80081d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081d4:	9105      	str	r1, [sp, #20]
 80081d6:	6800      	ldr	r0, [r0, #0]
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	a902      	add	r1, sp, #8
 80081dc:	f000 fbf0 	bl	80089c0 <_svfiprintf_r>
 80081e0:	9b02      	ldr	r3, [sp, #8]
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	b01c      	add	sp, #112	; 0x70
 80081e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081ec:	b003      	add	sp, #12
 80081ee:	4770      	bx	lr
 80081f0:	20000028 	.word	0x20000028
 80081f4:	ffff0208 	.word	0xffff0208

080081f8 <__swbuf_r>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	460e      	mov	r6, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	4605      	mov	r5, r0
 8008200:	b118      	cbz	r0, 800820a <__swbuf_r+0x12>
 8008202:	6983      	ldr	r3, [r0, #24]
 8008204:	b90b      	cbnz	r3, 800820a <__swbuf_r+0x12>
 8008206:	f000 f9d1 	bl	80085ac <__sinit>
 800820a:	4b21      	ldr	r3, [pc, #132]	; (8008290 <__swbuf_r+0x98>)
 800820c:	429c      	cmp	r4, r3
 800820e:	d12b      	bne.n	8008268 <__swbuf_r+0x70>
 8008210:	686c      	ldr	r4, [r5, #4]
 8008212:	69a3      	ldr	r3, [r4, #24]
 8008214:	60a3      	str	r3, [r4, #8]
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	071a      	lsls	r2, r3, #28
 800821a:	d52f      	bpl.n	800827c <__swbuf_r+0x84>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	b36b      	cbz	r3, 800827c <__swbuf_r+0x84>
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	6820      	ldr	r0, [r4, #0]
 8008224:	1ac0      	subs	r0, r0, r3
 8008226:	6963      	ldr	r3, [r4, #20]
 8008228:	b2f6      	uxtb	r6, r6
 800822a:	4283      	cmp	r3, r0
 800822c:	4637      	mov	r7, r6
 800822e:	dc04      	bgt.n	800823a <__swbuf_r+0x42>
 8008230:	4621      	mov	r1, r4
 8008232:	4628      	mov	r0, r5
 8008234:	f000 f926 	bl	8008484 <_fflush_r>
 8008238:	bb30      	cbnz	r0, 8008288 <__swbuf_r+0x90>
 800823a:	68a3      	ldr	r3, [r4, #8]
 800823c:	3b01      	subs	r3, #1
 800823e:	60a3      	str	r3, [r4, #8]
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	6022      	str	r2, [r4, #0]
 8008246:	701e      	strb	r6, [r3, #0]
 8008248:	6963      	ldr	r3, [r4, #20]
 800824a:	3001      	adds	r0, #1
 800824c:	4283      	cmp	r3, r0
 800824e:	d004      	beq.n	800825a <__swbuf_r+0x62>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	07db      	lsls	r3, r3, #31
 8008254:	d506      	bpl.n	8008264 <__swbuf_r+0x6c>
 8008256:	2e0a      	cmp	r6, #10
 8008258:	d104      	bne.n	8008264 <__swbuf_r+0x6c>
 800825a:	4621      	mov	r1, r4
 800825c:	4628      	mov	r0, r5
 800825e:	f000 f911 	bl	8008484 <_fflush_r>
 8008262:	b988      	cbnz	r0, 8008288 <__swbuf_r+0x90>
 8008264:	4638      	mov	r0, r7
 8008266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <__swbuf_r+0x9c>)
 800826a:	429c      	cmp	r4, r3
 800826c:	d101      	bne.n	8008272 <__swbuf_r+0x7a>
 800826e:	68ac      	ldr	r4, [r5, #8]
 8008270:	e7cf      	b.n	8008212 <__swbuf_r+0x1a>
 8008272:	4b09      	ldr	r3, [pc, #36]	; (8008298 <__swbuf_r+0xa0>)
 8008274:	429c      	cmp	r4, r3
 8008276:	bf08      	it	eq
 8008278:	68ec      	ldreq	r4, [r5, #12]
 800827a:	e7ca      	b.n	8008212 <__swbuf_r+0x1a>
 800827c:	4621      	mov	r1, r4
 800827e:	4628      	mov	r0, r5
 8008280:	f000 f80c 	bl	800829c <__swsetup_r>
 8008284:	2800      	cmp	r0, #0
 8008286:	d0cb      	beq.n	8008220 <__swbuf_r+0x28>
 8008288:	f04f 37ff 	mov.w	r7, #4294967295
 800828c:	e7ea      	b.n	8008264 <__swbuf_r+0x6c>
 800828e:	bf00      	nop
 8008290:	0800c1d8 	.word	0x0800c1d8
 8008294:	0800c1f8 	.word	0x0800c1f8
 8008298:	0800c1b8 	.word	0x0800c1b8

0800829c <__swsetup_r>:
 800829c:	4b32      	ldr	r3, [pc, #200]	; (8008368 <__swsetup_r+0xcc>)
 800829e:	b570      	push	{r4, r5, r6, lr}
 80082a0:	681d      	ldr	r5, [r3, #0]
 80082a2:	4606      	mov	r6, r0
 80082a4:	460c      	mov	r4, r1
 80082a6:	b125      	cbz	r5, 80082b2 <__swsetup_r+0x16>
 80082a8:	69ab      	ldr	r3, [r5, #24]
 80082aa:	b913      	cbnz	r3, 80082b2 <__swsetup_r+0x16>
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 f97d 	bl	80085ac <__sinit>
 80082b2:	4b2e      	ldr	r3, [pc, #184]	; (800836c <__swsetup_r+0xd0>)
 80082b4:	429c      	cmp	r4, r3
 80082b6:	d10f      	bne.n	80082d8 <__swsetup_r+0x3c>
 80082b8:	686c      	ldr	r4, [r5, #4]
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082c0:	0719      	lsls	r1, r3, #28
 80082c2:	d42c      	bmi.n	800831e <__swsetup_r+0x82>
 80082c4:	06dd      	lsls	r5, r3, #27
 80082c6:	d411      	bmi.n	80082ec <__swsetup_r+0x50>
 80082c8:	2309      	movs	r3, #9
 80082ca:	6033      	str	r3, [r6, #0]
 80082cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	e03e      	b.n	8008356 <__swsetup_r+0xba>
 80082d8:	4b25      	ldr	r3, [pc, #148]	; (8008370 <__swsetup_r+0xd4>)
 80082da:	429c      	cmp	r4, r3
 80082dc:	d101      	bne.n	80082e2 <__swsetup_r+0x46>
 80082de:	68ac      	ldr	r4, [r5, #8]
 80082e0:	e7eb      	b.n	80082ba <__swsetup_r+0x1e>
 80082e2:	4b24      	ldr	r3, [pc, #144]	; (8008374 <__swsetup_r+0xd8>)
 80082e4:	429c      	cmp	r4, r3
 80082e6:	bf08      	it	eq
 80082e8:	68ec      	ldreq	r4, [r5, #12]
 80082ea:	e7e6      	b.n	80082ba <__swsetup_r+0x1e>
 80082ec:	0758      	lsls	r0, r3, #29
 80082ee:	d512      	bpl.n	8008316 <__swsetup_r+0x7a>
 80082f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082f2:	b141      	cbz	r1, 8008306 <__swsetup_r+0x6a>
 80082f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082f8:	4299      	cmp	r1, r3
 80082fa:	d002      	beq.n	8008302 <__swsetup_r+0x66>
 80082fc:	4630      	mov	r0, r6
 80082fe:	f000 fa59 	bl	80087b4 <_free_r>
 8008302:	2300      	movs	r3, #0
 8008304:	6363      	str	r3, [r4, #52]	; 0x34
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	2300      	movs	r3, #0
 8008310:	6063      	str	r3, [r4, #4]
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f043 0308 	orr.w	r3, r3, #8
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	b94b      	cbnz	r3, 8008336 <__swsetup_r+0x9a>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832c:	d003      	beq.n	8008336 <__swsetup_r+0x9a>
 800832e:	4621      	mov	r1, r4
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f9ff 	bl	8008734 <__smakebuf_r>
 8008336:	89a0      	ldrh	r0, [r4, #12]
 8008338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800833c:	f010 0301 	ands.w	r3, r0, #1
 8008340:	d00a      	beq.n	8008358 <__swsetup_r+0xbc>
 8008342:	2300      	movs	r3, #0
 8008344:	60a3      	str	r3, [r4, #8]
 8008346:	6963      	ldr	r3, [r4, #20]
 8008348:	425b      	negs	r3, r3
 800834a:	61a3      	str	r3, [r4, #24]
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	b943      	cbnz	r3, 8008362 <__swsetup_r+0xc6>
 8008350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008354:	d1ba      	bne.n	80082cc <__swsetup_r+0x30>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	0781      	lsls	r1, r0, #30
 800835a:	bf58      	it	pl
 800835c:	6963      	ldrpl	r3, [r4, #20]
 800835e:	60a3      	str	r3, [r4, #8]
 8008360:	e7f4      	b.n	800834c <__swsetup_r+0xb0>
 8008362:	2000      	movs	r0, #0
 8008364:	e7f7      	b.n	8008356 <__swsetup_r+0xba>
 8008366:	bf00      	nop
 8008368:	20000028 	.word	0x20000028
 800836c:	0800c1d8 	.word	0x0800c1d8
 8008370:	0800c1f8 	.word	0x0800c1f8
 8008374:	0800c1b8 	.word	0x0800c1b8

08008378 <__sflush_r>:
 8008378:	898a      	ldrh	r2, [r1, #12]
 800837a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837e:	4605      	mov	r5, r0
 8008380:	0710      	lsls	r0, r2, #28
 8008382:	460c      	mov	r4, r1
 8008384:	d458      	bmi.n	8008438 <__sflush_r+0xc0>
 8008386:	684b      	ldr	r3, [r1, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	dc05      	bgt.n	8008398 <__sflush_r+0x20>
 800838c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	dc02      	bgt.n	8008398 <__sflush_r+0x20>
 8008392:	2000      	movs	r0, #0
 8008394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800839a:	2e00      	cmp	r6, #0
 800839c:	d0f9      	beq.n	8008392 <__sflush_r+0x1a>
 800839e:	2300      	movs	r3, #0
 80083a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083a4:	682f      	ldr	r7, [r5, #0]
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	d032      	beq.n	8008410 <__sflush_r+0x98>
 80083aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	075a      	lsls	r2, r3, #29
 80083b0:	d505      	bpl.n	80083be <__sflush_r+0x46>
 80083b2:	6863      	ldr	r3, [r4, #4]
 80083b4:	1ac0      	subs	r0, r0, r3
 80083b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083b8:	b10b      	cbz	r3, 80083be <__sflush_r+0x46>
 80083ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083bc:	1ac0      	subs	r0, r0, r3
 80083be:	2300      	movs	r3, #0
 80083c0:	4602      	mov	r2, r0
 80083c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b0      	blx	r6
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	d106      	bne.n	80083de <__sflush_r+0x66>
 80083d0:	6829      	ldr	r1, [r5, #0]
 80083d2:	291d      	cmp	r1, #29
 80083d4:	d82c      	bhi.n	8008430 <__sflush_r+0xb8>
 80083d6:	4a2a      	ldr	r2, [pc, #168]	; (8008480 <__sflush_r+0x108>)
 80083d8:	40ca      	lsrs	r2, r1
 80083da:	07d6      	lsls	r6, r2, #31
 80083dc:	d528      	bpl.n	8008430 <__sflush_r+0xb8>
 80083de:	2200      	movs	r2, #0
 80083e0:	6062      	str	r2, [r4, #4]
 80083e2:	04d9      	lsls	r1, r3, #19
 80083e4:	6922      	ldr	r2, [r4, #16]
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	d504      	bpl.n	80083f4 <__sflush_r+0x7c>
 80083ea:	1c42      	adds	r2, r0, #1
 80083ec:	d101      	bne.n	80083f2 <__sflush_r+0x7a>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b903      	cbnz	r3, 80083f4 <__sflush_r+0x7c>
 80083f2:	6560      	str	r0, [r4, #84]	; 0x54
 80083f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083f6:	602f      	str	r7, [r5, #0]
 80083f8:	2900      	cmp	r1, #0
 80083fa:	d0ca      	beq.n	8008392 <__sflush_r+0x1a>
 80083fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008400:	4299      	cmp	r1, r3
 8008402:	d002      	beq.n	800840a <__sflush_r+0x92>
 8008404:	4628      	mov	r0, r5
 8008406:	f000 f9d5 	bl	80087b4 <_free_r>
 800840a:	2000      	movs	r0, #0
 800840c:	6360      	str	r0, [r4, #52]	; 0x34
 800840e:	e7c1      	b.n	8008394 <__sflush_r+0x1c>
 8008410:	6a21      	ldr	r1, [r4, #32]
 8008412:	2301      	movs	r3, #1
 8008414:	4628      	mov	r0, r5
 8008416:	47b0      	blx	r6
 8008418:	1c41      	adds	r1, r0, #1
 800841a:	d1c7      	bne.n	80083ac <__sflush_r+0x34>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0c4      	beq.n	80083ac <__sflush_r+0x34>
 8008422:	2b1d      	cmp	r3, #29
 8008424:	d001      	beq.n	800842a <__sflush_r+0xb2>
 8008426:	2b16      	cmp	r3, #22
 8008428:	d101      	bne.n	800842e <__sflush_r+0xb6>
 800842a:	602f      	str	r7, [r5, #0]
 800842c:	e7b1      	b.n	8008392 <__sflush_r+0x1a>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	e7ad      	b.n	8008394 <__sflush_r+0x1c>
 8008438:	690f      	ldr	r7, [r1, #16]
 800843a:	2f00      	cmp	r7, #0
 800843c:	d0a9      	beq.n	8008392 <__sflush_r+0x1a>
 800843e:	0793      	lsls	r3, r2, #30
 8008440:	680e      	ldr	r6, [r1, #0]
 8008442:	bf08      	it	eq
 8008444:	694b      	ldreq	r3, [r1, #20]
 8008446:	600f      	str	r7, [r1, #0]
 8008448:	bf18      	it	ne
 800844a:	2300      	movne	r3, #0
 800844c:	eba6 0807 	sub.w	r8, r6, r7
 8008450:	608b      	str	r3, [r1, #8]
 8008452:	f1b8 0f00 	cmp.w	r8, #0
 8008456:	dd9c      	ble.n	8008392 <__sflush_r+0x1a>
 8008458:	6a21      	ldr	r1, [r4, #32]
 800845a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800845c:	4643      	mov	r3, r8
 800845e:	463a      	mov	r2, r7
 8008460:	4628      	mov	r0, r5
 8008462:	47b0      	blx	r6
 8008464:	2800      	cmp	r0, #0
 8008466:	dc06      	bgt.n	8008476 <__sflush_r+0xfe>
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	e78e      	b.n	8008394 <__sflush_r+0x1c>
 8008476:	4407      	add	r7, r0
 8008478:	eba8 0800 	sub.w	r8, r8, r0
 800847c:	e7e9      	b.n	8008452 <__sflush_r+0xda>
 800847e:	bf00      	nop
 8008480:	20400001 	.word	0x20400001

08008484 <_fflush_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	b913      	cbnz	r3, 8008494 <_fflush_r+0x10>
 800848e:	2500      	movs	r5, #0
 8008490:	4628      	mov	r0, r5
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	b118      	cbz	r0, 800849e <_fflush_r+0x1a>
 8008496:	6983      	ldr	r3, [r0, #24]
 8008498:	b90b      	cbnz	r3, 800849e <_fflush_r+0x1a>
 800849a:	f000 f887 	bl	80085ac <__sinit>
 800849e:	4b14      	ldr	r3, [pc, #80]	; (80084f0 <_fflush_r+0x6c>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	d11b      	bne.n	80084dc <_fflush_r+0x58>
 80084a4:	686c      	ldr	r4, [r5, #4]
 80084a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0ef      	beq.n	800848e <_fflush_r+0xa>
 80084ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084b0:	07d0      	lsls	r0, r2, #31
 80084b2:	d404      	bmi.n	80084be <_fflush_r+0x3a>
 80084b4:	0599      	lsls	r1, r3, #22
 80084b6:	d402      	bmi.n	80084be <_fflush_r+0x3a>
 80084b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ba:	f000 f915 	bl	80086e8 <__retarget_lock_acquire_recursive>
 80084be:	4628      	mov	r0, r5
 80084c0:	4621      	mov	r1, r4
 80084c2:	f7ff ff59 	bl	8008378 <__sflush_r>
 80084c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084c8:	07da      	lsls	r2, r3, #31
 80084ca:	4605      	mov	r5, r0
 80084cc:	d4e0      	bmi.n	8008490 <_fflush_r+0xc>
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	059b      	lsls	r3, r3, #22
 80084d2:	d4dd      	bmi.n	8008490 <_fflush_r+0xc>
 80084d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084d6:	f000 f908 	bl	80086ea <__retarget_lock_release_recursive>
 80084da:	e7d9      	b.n	8008490 <_fflush_r+0xc>
 80084dc:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <_fflush_r+0x70>)
 80084de:	429c      	cmp	r4, r3
 80084e0:	d101      	bne.n	80084e6 <_fflush_r+0x62>
 80084e2:	68ac      	ldr	r4, [r5, #8]
 80084e4:	e7df      	b.n	80084a6 <_fflush_r+0x22>
 80084e6:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <_fflush_r+0x74>)
 80084e8:	429c      	cmp	r4, r3
 80084ea:	bf08      	it	eq
 80084ec:	68ec      	ldreq	r4, [r5, #12]
 80084ee:	e7da      	b.n	80084a6 <_fflush_r+0x22>
 80084f0:	0800c1d8 	.word	0x0800c1d8
 80084f4:	0800c1f8 	.word	0x0800c1f8
 80084f8:	0800c1b8 	.word	0x0800c1b8

080084fc <std>:
 80084fc:	2300      	movs	r3, #0
 80084fe:	b510      	push	{r4, lr}
 8008500:	4604      	mov	r4, r0
 8008502:	e9c0 3300 	strd	r3, r3, [r0]
 8008506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800850a:	6083      	str	r3, [r0, #8]
 800850c:	8181      	strh	r1, [r0, #12]
 800850e:	6643      	str	r3, [r0, #100]	; 0x64
 8008510:	81c2      	strh	r2, [r0, #14]
 8008512:	6183      	str	r3, [r0, #24]
 8008514:	4619      	mov	r1, r3
 8008516:	2208      	movs	r2, #8
 8008518:	305c      	adds	r0, #92	; 0x5c
 800851a:	f7ff fdcf 	bl	80080bc <memset>
 800851e:	4b05      	ldr	r3, [pc, #20]	; (8008534 <std+0x38>)
 8008520:	6263      	str	r3, [r4, #36]	; 0x24
 8008522:	4b05      	ldr	r3, [pc, #20]	; (8008538 <std+0x3c>)
 8008524:	62a3      	str	r3, [r4, #40]	; 0x28
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <std+0x40>)
 8008528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800852a:	4b05      	ldr	r3, [pc, #20]	; (8008540 <std+0x44>)
 800852c:	6224      	str	r4, [r4, #32]
 800852e:	6323      	str	r3, [r4, #48]	; 0x30
 8008530:	bd10      	pop	{r4, pc}
 8008532:	bf00      	nop
 8008534:	08008f09 	.word	0x08008f09
 8008538:	08008f2b 	.word	0x08008f2b
 800853c:	08008f63 	.word	0x08008f63
 8008540:	08008f87 	.word	0x08008f87

08008544 <_cleanup_r>:
 8008544:	4901      	ldr	r1, [pc, #4]	; (800854c <_cleanup_r+0x8>)
 8008546:	f000 b8af 	b.w	80086a8 <_fwalk_reent>
 800854a:	bf00      	nop
 800854c:	08008485 	.word	0x08008485

08008550 <__sfmoreglue>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	1e4a      	subs	r2, r1, #1
 8008554:	2568      	movs	r5, #104	; 0x68
 8008556:	4355      	muls	r5, r2
 8008558:	460e      	mov	r6, r1
 800855a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800855e:	f000 f979 	bl	8008854 <_malloc_r>
 8008562:	4604      	mov	r4, r0
 8008564:	b140      	cbz	r0, 8008578 <__sfmoreglue+0x28>
 8008566:	2100      	movs	r1, #0
 8008568:	e9c0 1600 	strd	r1, r6, [r0]
 800856c:	300c      	adds	r0, #12
 800856e:	60a0      	str	r0, [r4, #8]
 8008570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008574:	f7ff fda2 	bl	80080bc <memset>
 8008578:	4620      	mov	r0, r4
 800857a:	bd70      	pop	{r4, r5, r6, pc}

0800857c <__sfp_lock_acquire>:
 800857c:	4801      	ldr	r0, [pc, #4]	; (8008584 <__sfp_lock_acquire+0x8>)
 800857e:	f000 b8b3 	b.w	80086e8 <__retarget_lock_acquire_recursive>
 8008582:	bf00      	nop
 8008584:	20000458 	.word	0x20000458

08008588 <__sfp_lock_release>:
 8008588:	4801      	ldr	r0, [pc, #4]	; (8008590 <__sfp_lock_release+0x8>)
 800858a:	f000 b8ae 	b.w	80086ea <__retarget_lock_release_recursive>
 800858e:	bf00      	nop
 8008590:	20000458 	.word	0x20000458

08008594 <__sinit_lock_acquire>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__sinit_lock_acquire+0x8>)
 8008596:	f000 b8a7 	b.w	80086e8 <__retarget_lock_acquire_recursive>
 800859a:	bf00      	nop
 800859c:	20000453 	.word	0x20000453

080085a0 <__sinit_lock_release>:
 80085a0:	4801      	ldr	r0, [pc, #4]	; (80085a8 <__sinit_lock_release+0x8>)
 80085a2:	f000 b8a2 	b.w	80086ea <__retarget_lock_release_recursive>
 80085a6:	bf00      	nop
 80085a8:	20000453 	.word	0x20000453

080085ac <__sinit>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	4604      	mov	r4, r0
 80085b0:	f7ff fff0 	bl	8008594 <__sinit_lock_acquire>
 80085b4:	69a3      	ldr	r3, [r4, #24]
 80085b6:	b11b      	cbz	r3, 80085c0 <__sinit+0x14>
 80085b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085bc:	f7ff bff0 	b.w	80085a0 <__sinit_lock_release>
 80085c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085c4:	6523      	str	r3, [r4, #80]	; 0x50
 80085c6:	4b13      	ldr	r3, [pc, #76]	; (8008614 <__sinit+0x68>)
 80085c8:	4a13      	ldr	r2, [pc, #76]	; (8008618 <__sinit+0x6c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80085ce:	42a3      	cmp	r3, r4
 80085d0:	bf04      	itt	eq
 80085d2:	2301      	moveq	r3, #1
 80085d4:	61a3      	streq	r3, [r4, #24]
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 f820 	bl	800861c <__sfp>
 80085dc:	6060      	str	r0, [r4, #4]
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 f81c 	bl	800861c <__sfp>
 80085e4:	60a0      	str	r0, [r4, #8]
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 f818 	bl	800861c <__sfp>
 80085ec:	2200      	movs	r2, #0
 80085ee:	60e0      	str	r0, [r4, #12]
 80085f0:	2104      	movs	r1, #4
 80085f2:	6860      	ldr	r0, [r4, #4]
 80085f4:	f7ff ff82 	bl	80084fc <std>
 80085f8:	68a0      	ldr	r0, [r4, #8]
 80085fa:	2201      	movs	r2, #1
 80085fc:	2109      	movs	r1, #9
 80085fe:	f7ff ff7d 	bl	80084fc <std>
 8008602:	68e0      	ldr	r0, [r4, #12]
 8008604:	2202      	movs	r2, #2
 8008606:	2112      	movs	r1, #18
 8008608:	f7ff ff78 	bl	80084fc <std>
 800860c:	2301      	movs	r3, #1
 800860e:	61a3      	str	r3, [r4, #24]
 8008610:	e7d2      	b.n	80085b8 <__sinit+0xc>
 8008612:	bf00      	nop
 8008614:	0800c1b4 	.word	0x0800c1b4
 8008618:	08008545 	.word	0x08008545

0800861c <__sfp>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	4607      	mov	r7, r0
 8008620:	f7ff ffac 	bl	800857c <__sfp_lock_acquire>
 8008624:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <__sfp+0x84>)
 8008626:	681e      	ldr	r6, [r3, #0]
 8008628:	69b3      	ldr	r3, [r6, #24]
 800862a:	b913      	cbnz	r3, 8008632 <__sfp+0x16>
 800862c:	4630      	mov	r0, r6
 800862e:	f7ff ffbd 	bl	80085ac <__sinit>
 8008632:	3648      	adds	r6, #72	; 0x48
 8008634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008638:	3b01      	subs	r3, #1
 800863a:	d503      	bpl.n	8008644 <__sfp+0x28>
 800863c:	6833      	ldr	r3, [r6, #0]
 800863e:	b30b      	cbz	r3, 8008684 <__sfp+0x68>
 8008640:	6836      	ldr	r6, [r6, #0]
 8008642:	e7f7      	b.n	8008634 <__sfp+0x18>
 8008644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008648:	b9d5      	cbnz	r5, 8008680 <__sfp+0x64>
 800864a:	4b16      	ldr	r3, [pc, #88]	; (80086a4 <__sfp+0x88>)
 800864c:	60e3      	str	r3, [r4, #12]
 800864e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008652:	6665      	str	r5, [r4, #100]	; 0x64
 8008654:	f000 f847 	bl	80086e6 <__retarget_lock_init_recursive>
 8008658:	f7ff ff96 	bl	8008588 <__sfp_lock_release>
 800865c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008664:	6025      	str	r5, [r4, #0]
 8008666:	61a5      	str	r5, [r4, #24]
 8008668:	2208      	movs	r2, #8
 800866a:	4629      	mov	r1, r5
 800866c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008670:	f7ff fd24 	bl	80080bc <memset>
 8008674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800867c:	4620      	mov	r0, r4
 800867e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008680:	3468      	adds	r4, #104	; 0x68
 8008682:	e7d9      	b.n	8008638 <__sfp+0x1c>
 8008684:	2104      	movs	r1, #4
 8008686:	4638      	mov	r0, r7
 8008688:	f7ff ff62 	bl	8008550 <__sfmoreglue>
 800868c:	4604      	mov	r4, r0
 800868e:	6030      	str	r0, [r6, #0]
 8008690:	2800      	cmp	r0, #0
 8008692:	d1d5      	bne.n	8008640 <__sfp+0x24>
 8008694:	f7ff ff78 	bl	8008588 <__sfp_lock_release>
 8008698:	230c      	movs	r3, #12
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	e7ee      	b.n	800867c <__sfp+0x60>
 800869e:	bf00      	nop
 80086a0:	0800c1b4 	.word	0x0800c1b4
 80086a4:	ffff0001 	.word	0xffff0001

080086a8 <_fwalk_reent>:
 80086a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ac:	4606      	mov	r6, r0
 80086ae:	4688      	mov	r8, r1
 80086b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086b4:	2700      	movs	r7, #0
 80086b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086ba:	f1b9 0901 	subs.w	r9, r9, #1
 80086be:	d505      	bpl.n	80086cc <_fwalk_reent+0x24>
 80086c0:	6824      	ldr	r4, [r4, #0]
 80086c2:	2c00      	cmp	r4, #0
 80086c4:	d1f7      	bne.n	80086b6 <_fwalk_reent+0xe>
 80086c6:	4638      	mov	r0, r7
 80086c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086cc:	89ab      	ldrh	r3, [r5, #12]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d907      	bls.n	80086e2 <_fwalk_reent+0x3a>
 80086d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086d6:	3301      	adds	r3, #1
 80086d8:	d003      	beq.n	80086e2 <_fwalk_reent+0x3a>
 80086da:	4629      	mov	r1, r5
 80086dc:	4630      	mov	r0, r6
 80086de:	47c0      	blx	r8
 80086e0:	4307      	orrs	r7, r0
 80086e2:	3568      	adds	r5, #104	; 0x68
 80086e4:	e7e9      	b.n	80086ba <_fwalk_reent+0x12>

080086e6 <__retarget_lock_init_recursive>:
 80086e6:	4770      	bx	lr

080086e8 <__retarget_lock_acquire_recursive>:
 80086e8:	4770      	bx	lr

080086ea <__retarget_lock_release_recursive>:
 80086ea:	4770      	bx	lr

080086ec <__swhatbuf_r>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	460e      	mov	r6, r1
 80086f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f4:	2900      	cmp	r1, #0
 80086f6:	b096      	sub	sp, #88	; 0x58
 80086f8:	4614      	mov	r4, r2
 80086fa:	461d      	mov	r5, r3
 80086fc:	da07      	bge.n	800870e <__swhatbuf_r+0x22>
 80086fe:	2300      	movs	r3, #0
 8008700:	602b      	str	r3, [r5, #0]
 8008702:	89b3      	ldrh	r3, [r6, #12]
 8008704:	061a      	lsls	r2, r3, #24
 8008706:	d410      	bmi.n	800872a <__swhatbuf_r+0x3e>
 8008708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870c:	e00e      	b.n	800872c <__swhatbuf_r+0x40>
 800870e:	466a      	mov	r2, sp
 8008710:	f000 fc60 	bl	8008fd4 <_fstat_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	dbf2      	blt.n	80086fe <__swhatbuf_r+0x12>
 8008718:	9a01      	ldr	r2, [sp, #4]
 800871a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800871e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008722:	425a      	negs	r2, r3
 8008724:	415a      	adcs	r2, r3
 8008726:	602a      	str	r2, [r5, #0]
 8008728:	e7ee      	b.n	8008708 <__swhatbuf_r+0x1c>
 800872a:	2340      	movs	r3, #64	; 0x40
 800872c:	2000      	movs	r0, #0
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	b016      	add	sp, #88	; 0x58
 8008732:	bd70      	pop	{r4, r5, r6, pc}

08008734 <__smakebuf_r>:
 8008734:	898b      	ldrh	r3, [r1, #12]
 8008736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008738:	079d      	lsls	r5, r3, #30
 800873a:	4606      	mov	r6, r0
 800873c:	460c      	mov	r4, r1
 800873e:	d507      	bpl.n	8008750 <__smakebuf_r+0x1c>
 8008740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	6123      	str	r3, [r4, #16]
 8008748:	2301      	movs	r3, #1
 800874a:	6163      	str	r3, [r4, #20]
 800874c:	b002      	add	sp, #8
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	ab01      	add	r3, sp, #4
 8008752:	466a      	mov	r2, sp
 8008754:	f7ff ffca 	bl	80086ec <__swhatbuf_r>
 8008758:	9900      	ldr	r1, [sp, #0]
 800875a:	4605      	mov	r5, r0
 800875c:	4630      	mov	r0, r6
 800875e:	f000 f879 	bl	8008854 <_malloc_r>
 8008762:	b948      	cbnz	r0, 8008778 <__smakebuf_r+0x44>
 8008764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008768:	059a      	lsls	r2, r3, #22
 800876a:	d4ef      	bmi.n	800874c <__smakebuf_r+0x18>
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	f043 0302 	orr.w	r3, r3, #2
 8008774:	81a3      	strh	r3, [r4, #12]
 8008776:	e7e3      	b.n	8008740 <__smakebuf_r+0xc>
 8008778:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <__smakebuf_r+0x7c>)
 800877a:	62b3      	str	r3, [r6, #40]	; 0x28
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	6020      	str	r0, [r4, #0]
 8008780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008784:	81a3      	strh	r3, [r4, #12]
 8008786:	9b00      	ldr	r3, [sp, #0]
 8008788:	6163      	str	r3, [r4, #20]
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	6120      	str	r0, [r4, #16]
 800878e:	b15b      	cbz	r3, 80087a8 <__smakebuf_r+0x74>
 8008790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008794:	4630      	mov	r0, r6
 8008796:	f000 fc2f 	bl	8008ff8 <_isatty_r>
 800879a:	b128      	cbz	r0, 80087a8 <__smakebuf_r+0x74>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	f043 0301 	orr.w	r3, r3, #1
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	89a0      	ldrh	r0, [r4, #12]
 80087aa:	4305      	orrs	r5, r0
 80087ac:	81a5      	strh	r5, [r4, #12]
 80087ae:	e7cd      	b.n	800874c <__smakebuf_r+0x18>
 80087b0:	08008545 	.word	0x08008545

080087b4 <_free_r>:
 80087b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087b6:	2900      	cmp	r1, #0
 80087b8:	d048      	beq.n	800884c <_free_r+0x98>
 80087ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087be:	9001      	str	r0, [sp, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f1a1 0404 	sub.w	r4, r1, #4
 80087c6:	bfb8      	it	lt
 80087c8:	18e4      	addlt	r4, r4, r3
 80087ca:	f000 fc5f 	bl	800908c <__malloc_lock>
 80087ce:	4a20      	ldr	r2, [pc, #128]	; (8008850 <_free_r+0x9c>)
 80087d0:	9801      	ldr	r0, [sp, #4]
 80087d2:	6813      	ldr	r3, [r2, #0]
 80087d4:	4615      	mov	r5, r2
 80087d6:	b933      	cbnz	r3, 80087e6 <_free_r+0x32>
 80087d8:	6063      	str	r3, [r4, #4]
 80087da:	6014      	str	r4, [r2, #0]
 80087dc:	b003      	add	sp, #12
 80087de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087e2:	f000 bc59 	b.w	8009098 <__malloc_unlock>
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	d90b      	bls.n	8008802 <_free_r+0x4e>
 80087ea:	6821      	ldr	r1, [r4, #0]
 80087ec:	1862      	adds	r2, r4, r1
 80087ee:	4293      	cmp	r3, r2
 80087f0:	bf04      	itt	eq
 80087f2:	681a      	ldreq	r2, [r3, #0]
 80087f4:	685b      	ldreq	r3, [r3, #4]
 80087f6:	6063      	str	r3, [r4, #4]
 80087f8:	bf04      	itt	eq
 80087fa:	1852      	addeq	r2, r2, r1
 80087fc:	6022      	streq	r2, [r4, #0]
 80087fe:	602c      	str	r4, [r5, #0]
 8008800:	e7ec      	b.n	80087dc <_free_r+0x28>
 8008802:	461a      	mov	r2, r3
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	b10b      	cbz	r3, 800880c <_free_r+0x58>
 8008808:	42a3      	cmp	r3, r4
 800880a:	d9fa      	bls.n	8008802 <_free_r+0x4e>
 800880c:	6811      	ldr	r1, [r2, #0]
 800880e:	1855      	adds	r5, r2, r1
 8008810:	42a5      	cmp	r5, r4
 8008812:	d10b      	bne.n	800882c <_free_r+0x78>
 8008814:	6824      	ldr	r4, [r4, #0]
 8008816:	4421      	add	r1, r4
 8008818:	1854      	adds	r4, r2, r1
 800881a:	42a3      	cmp	r3, r4
 800881c:	6011      	str	r1, [r2, #0]
 800881e:	d1dd      	bne.n	80087dc <_free_r+0x28>
 8008820:	681c      	ldr	r4, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	6053      	str	r3, [r2, #4]
 8008826:	4421      	add	r1, r4
 8008828:	6011      	str	r1, [r2, #0]
 800882a:	e7d7      	b.n	80087dc <_free_r+0x28>
 800882c:	d902      	bls.n	8008834 <_free_r+0x80>
 800882e:	230c      	movs	r3, #12
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	e7d3      	b.n	80087dc <_free_r+0x28>
 8008834:	6825      	ldr	r5, [r4, #0]
 8008836:	1961      	adds	r1, r4, r5
 8008838:	428b      	cmp	r3, r1
 800883a:	bf04      	itt	eq
 800883c:	6819      	ldreq	r1, [r3, #0]
 800883e:	685b      	ldreq	r3, [r3, #4]
 8008840:	6063      	str	r3, [r4, #4]
 8008842:	bf04      	itt	eq
 8008844:	1949      	addeq	r1, r1, r5
 8008846:	6021      	streq	r1, [r4, #0]
 8008848:	6054      	str	r4, [r2, #4]
 800884a:	e7c7      	b.n	80087dc <_free_r+0x28>
 800884c:	b003      	add	sp, #12
 800884e:	bd30      	pop	{r4, r5, pc}
 8008850:	200000d0 	.word	0x200000d0

08008854 <_malloc_r>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	1ccd      	adds	r5, r1, #3
 8008858:	f025 0503 	bic.w	r5, r5, #3
 800885c:	3508      	adds	r5, #8
 800885e:	2d0c      	cmp	r5, #12
 8008860:	bf38      	it	cc
 8008862:	250c      	movcc	r5, #12
 8008864:	2d00      	cmp	r5, #0
 8008866:	4606      	mov	r6, r0
 8008868:	db01      	blt.n	800886e <_malloc_r+0x1a>
 800886a:	42a9      	cmp	r1, r5
 800886c:	d903      	bls.n	8008876 <_malloc_r+0x22>
 800886e:	230c      	movs	r3, #12
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	2000      	movs	r0, #0
 8008874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008876:	f000 fc09 	bl	800908c <__malloc_lock>
 800887a:	4921      	ldr	r1, [pc, #132]	; (8008900 <_malloc_r+0xac>)
 800887c:	680a      	ldr	r2, [r1, #0]
 800887e:	4614      	mov	r4, r2
 8008880:	b99c      	cbnz	r4, 80088aa <_malloc_r+0x56>
 8008882:	4f20      	ldr	r7, [pc, #128]	; (8008904 <_malloc_r+0xb0>)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	b923      	cbnz	r3, 8008892 <_malloc_r+0x3e>
 8008888:	4621      	mov	r1, r4
 800888a:	4630      	mov	r0, r6
 800888c:	f000 fb2c 	bl	8008ee8 <_sbrk_r>
 8008890:	6038      	str	r0, [r7, #0]
 8008892:	4629      	mov	r1, r5
 8008894:	4630      	mov	r0, r6
 8008896:	f000 fb27 	bl	8008ee8 <_sbrk_r>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d123      	bne.n	80088e6 <_malloc_r+0x92>
 800889e:	230c      	movs	r3, #12
 80088a0:	6033      	str	r3, [r6, #0]
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 fbf8 	bl	8009098 <__malloc_unlock>
 80088a8:	e7e3      	b.n	8008872 <_malloc_r+0x1e>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	1b5b      	subs	r3, r3, r5
 80088ae:	d417      	bmi.n	80088e0 <_malloc_r+0x8c>
 80088b0:	2b0b      	cmp	r3, #11
 80088b2:	d903      	bls.n	80088bc <_malloc_r+0x68>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	441c      	add	r4, r3
 80088b8:	6025      	str	r5, [r4, #0]
 80088ba:	e004      	b.n	80088c6 <_malloc_r+0x72>
 80088bc:	6863      	ldr	r3, [r4, #4]
 80088be:	42a2      	cmp	r2, r4
 80088c0:	bf0c      	ite	eq
 80088c2:	600b      	streq	r3, [r1, #0]
 80088c4:	6053      	strne	r3, [r2, #4]
 80088c6:	4630      	mov	r0, r6
 80088c8:	f000 fbe6 	bl	8009098 <__malloc_unlock>
 80088cc:	f104 000b 	add.w	r0, r4, #11
 80088d0:	1d23      	adds	r3, r4, #4
 80088d2:	f020 0007 	bic.w	r0, r0, #7
 80088d6:	1ac2      	subs	r2, r0, r3
 80088d8:	d0cc      	beq.n	8008874 <_malloc_r+0x20>
 80088da:	1a1b      	subs	r3, r3, r0
 80088dc:	50a3      	str	r3, [r4, r2]
 80088de:	e7c9      	b.n	8008874 <_malloc_r+0x20>
 80088e0:	4622      	mov	r2, r4
 80088e2:	6864      	ldr	r4, [r4, #4]
 80088e4:	e7cc      	b.n	8008880 <_malloc_r+0x2c>
 80088e6:	1cc4      	adds	r4, r0, #3
 80088e8:	f024 0403 	bic.w	r4, r4, #3
 80088ec:	42a0      	cmp	r0, r4
 80088ee:	d0e3      	beq.n	80088b8 <_malloc_r+0x64>
 80088f0:	1a21      	subs	r1, r4, r0
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 faf8 	bl	8008ee8 <_sbrk_r>
 80088f8:	3001      	adds	r0, #1
 80088fa:	d1dd      	bne.n	80088b8 <_malloc_r+0x64>
 80088fc:	e7cf      	b.n	800889e <_malloc_r+0x4a>
 80088fe:	bf00      	nop
 8008900:	200000d0 	.word	0x200000d0
 8008904:	200000d4 	.word	0x200000d4

08008908 <__ssputs_r>:
 8008908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890c:	688e      	ldr	r6, [r1, #8]
 800890e:	429e      	cmp	r6, r3
 8008910:	4682      	mov	sl, r0
 8008912:	460c      	mov	r4, r1
 8008914:	4690      	mov	r8, r2
 8008916:	461f      	mov	r7, r3
 8008918:	d838      	bhi.n	800898c <__ssputs_r+0x84>
 800891a:	898a      	ldrh	r2, [r1, #12]
 800891c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008920:	d032      	beq.n	8008988 <__ssputs_r+0x80>
 8008922:	6825      	ldr	r5, [r4, #0]
 8008924:	6909      	ldr	r1, [r1, #16]
 8008926:	eba5 0901 	sub.w	r9, r5, r1
 800892a:	6965      	ldr	r5, [r4, #20]
 800892c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008934:	3301      	adds	r3, #1
 8008936:	444b      	add	r3, r9
 8008938:	106d      	asrs	r5, r5, #1
 800893a:	429d      	cmp	r5, r3
 800893c:	bf38      	it	cc
 800893e:	461d      	movcc	r5, r3
 8008940:	0553      	lsls	r3, r2, #21
 8008942:	d531      	bpl.n	80089a8 <__ssputs_r+0xa0>
 8008944:	4629      	mov	r1, r5
 8008946:	f7ff ff85 	bl	8008854 <_malloc_r>
 800894a:	4606      	mov	r6, r0
 800894c:	b950      	cbnz	r0, 8008964 <__ssputs_r+0x5c>
 800894e:	230c      	movs	r3, #12
 8008950:	f8ca 3000 	str.w	r3, [sl]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008964:	6921      	ldr	r1, [r4, #16]
 8008966:	464a      	mov	r2, r9
 8008968:	f000 fb68 	bl	800903c <memcpy>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	6126      	str	r6, [r4, #16]
 800897a:	6165      	str	r5, [r4, #20]
 800897c:	444e      	add	r6, r9
 800897e:	eba5 0509 	sub.w	r5, r5, r9
 8008982:	6026      	str	r6, [r4, #0]
 8008984:	60a5      	str	r5, [r4, #8]
 8008986:	463e      	mov	r6, r7
 8008988:	42be      	cmp	r6, r7
 800898a:	d900      	bls.n	800898e <__ssputs_r+0x86>
 800898c:	463e      	mov	r6, r7
 800898e:	4632      	mov	r2, r6
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	4641      	mov	r1, r8
 8008994:	f000 fb60 	bl	8009058 <memmove>
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	1b9b      	subs	r3, r3, r6
 800899e:	4432      	add	r2, r6
 80089a0:	60a3      	str	r3, [r4, #8]
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	2000      	movs	r0, #0
 80089a6:	e7db      	b.n	8008960 <__ssputs_r+0x58>
 80089a8:	462a      	mov	r2, r5
 80089aa:	f000 fb7b 	bl	80090a4 <_realloc_r>
 80089ae:	4606      	mov	r6, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d1e1      	bne.n	8008978 <__ssputs_r+0x70>
 80089b4:	6921      	ldr	r1, [r4, #16]
 80089b6:	4650      	mov	r0, sl
 80089b8:	f7ff fefc 	bl	80087b4 <_free_r>
 80089bc:	e7c7      	b.n	800894e <__ssputs_r+0x46>
	...

080089c0 <_svfiprintf_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	4698      	mov	r8, r3
 80089c6:	898b      	ldrh	r3, [r1, #12]
 80089c8:	061b      	lsls	r3, r3, #24
 80089ca:	b09d      	sub	sp, #116	; 0x74
 80089cc:	4607      	mov	r7, r0
 80089ce:	460d      	mov	r5, r1
 80089d0:	4614      	mov	r4, r2
 80089d2:	d50e      	bpl.n	80089f2 <_svfiprintf_r+0x32>
 80089d4:	690b      	ldr	r3, [r1, #16]
 80089d6:	b963      	cbnz	r3, 80089f2 <_svfiprintf_r+0x32>
 80089d8:	2140      	movs	r1, #64	; 0x40
 80089da:	f7ff ff3b 	bl	8008854 <_malloc_r>
 80089de:	6028      	str	r0, [r5, #0]
 80089e0:	6128      	str	r0, [r5, #16]
 80089e2:	b920      	cbnz	r0, 80089ee <_svfiprintf_r+0x2e>
 80089e4:	230c      	movs	r3, #12
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	e0d1      	b.n	8008b92 <_svfiprintf_r+0x1d2>
 80089ee:	2340      	movs	r3, #64	; 0x40
 80089f0:	616b      	str	r3, [r5, #20]
 80089f2:	2300      	movs	r3, #0
 80089f4:	9309      	str	r3, [sp, #36]	; 0x24
 80089f6:	2320      	movs	r3, #32
 80089f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a00:	2330      	movs	r3, #48	; 0x30
 8008a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bac <_svfiprintf_r+0x1ec>
 8008a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a0a:	f04f 0901 	mov.w	r9, #1
 8008a0e:	4623      	mov	r3, r4
 8008a10:	469a      	mov	sl, r3
 8008a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a16:	b10a      	cbz	r2, 8008a1c <_svfiprintf_r+0x5c>
 8008a18:	2a25      	cmp	r2, #37	; 0x25
 8008a1a:	d1f9      	bne.n	8008a10 <_svfiprintf_r+0x50>
 8008a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a20:	d00b      	beq.n	8008a3a <_svfiprintf_r+0x7a>
 8008a22:	465b      	mov	r3, fp
 8008a24:	4622      	mov	r2, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff ff6d 	bl	8008908 <__ssputs_r>
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f000 80aa 	beq.w	8008b88 <_svfiprintf_r+0x1c8>
 8008a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a36:	445a      	add	r2, fp
 8008a38:	9209      	str	r2, [sp, #36]	; 0x24
 8008a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 80a2 	beq.w	8008b88 <_svfiprintf_r+0x1c8>
 8008a44:	2300      	movs	r3, #0
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a4e:	f10a 0a01 	add.w	sl, sl, #1
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	9307      	str	r3, [sp, #28]
 8008a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a5c:	4654      	mov	r4, sl
 8008a5e:	2205      	movs	r2, #5
 8008a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a64:	4851      	ldr	r0, [pc, #324]	; (8008bac <_svfiprintf_r+0x1ec>)
 8008a66:	f7f7 fbb3 	bl	80001d0 <memchr>
 8008a6a:	9a04      	ldr	r2, [sp, #16]
 8008a6c:	b9d8      	cbnz	r0, 8008aa6 <_svfiprintf_r+0xe6>
 8008a6e:	06d0      	lsls	r0, r2, #27
 8008a70:	bf44      	itt	mi
 8008a72:	2320      	movmi	r3, #32
 8008a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a78:	0711      	lsls	r1, r2, #28
 8008a7a:	bf44      	itt	mi
 8008a7c:	232b      	movmi	r3, #43	; 0x2b
 8008a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a82:	f89a 3000 	ldrb.w	r3, [sl]
 8008a86:	2b2a      	cmp	r3, #42	; 0x2a
 8008a88:	d015      	beq.n	8008ab6 <_svfiprintf_r+0xf6>
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	4654      	mov	r4, sl
 8008a8e:	2000      	movs	r0, #0
 8008a90:	f04f 0c0a 	mov.w	ip, #10
 8008a94:	4621      	mov	r1, r4
 8008a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a9a:	3b30      	subs	r3, #48	; 0x30
 8008a9c:	2b09      	cmp	r3, #9
 8008a9e:	d94e      	bls.n	8008b3e <_svfiprintf_r+0x17e>
 8008aa0:	b1b0      	cbz	r0, 8008ad0 <_svfiprintf_r+0x110>
 8008aa2:	9207      	str	r2, [sp, #28]
 8008aa4:	e014      	b.n	8008ad0 <_svfiprintf_r+0x110>
 8008aa6:	eba0 0308 	sub.w	r3, r0, r8
 8008aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	46a2      	mov	sl, r4
 8008ab4:	e7d2      	b.n	8008a5c <_svfiprintf_r+0x9c>
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	1d19      	adds	r1, r3, #4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	9103      	str	r1, [sp, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfbb      	ittet	lt
 8008ac2:	425b      	neglt	r3, r3
 8008ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac8:	9307      	strge	r3, [sp, #28]
 8008aca:	9307      	strlt	r3, [sp, #28]
 8008acc:	bfb8      	it	lt
 8008ace:	9204      	strlt	r2, [sp, #16]
 8008ad0:	7823      	ldrb	r3, [r4, #0]
 8008ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad4:	d10c      	bne.n	8008af0 <_svfiprintf_r+0x130>
 8008ad6:	7863      	ldrb	r3, [r4, #1]
 8008ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8008ada:	d135      	bne.n	8008b48 <_svfiprintf_r+0x188>
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	1d1a      	adds	r2, r3, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	9203      	str	r2, [sp, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bfb8      	it	lt
 8008ae8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aec:	3402      	adds	r4, #2
 8008aee:	9305      	str	r3, [sp, #20]
 8008af0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bbc <_svfiprintf_r+0x1fc>
 8008af4:	7821      	ldrb	r1, [r4, #0]
 8008af6:	2203      	movs	r2, #3
 8008af8:	4650      	mov	r0, sl
 8008afa:	f7f7 fb69 	bl	80001d0 <memchr>
 8008afe:	b140      	cbz	r0, 8008b12 <_svfiprintf_r+0x152>
 8008b00:	2340      	movs	r3, #64	; 0x40
 8008b02:	eba0 000a 	sub.w	r0, r0, sl
 8008b06:	fa03 f000 	lsl.w	r0, r3, r0
 8008b0a:	9b04      	ldr	r3, [sp, #16]
 8008b0c:	4303      	orrs	r3, r0
 8008b0e:	3401      	adds	r4, #1
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b16:	4826      	ldr	r0, [pc, #152]	; (8008bb0 <_svfiprintf_r+0x1f0>)
 8008b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b1c:	2206      	movs	r2, #6
 8008b1e:	f7f7 fb57 	bl	80001d0 <memchr>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d038      	beq.n	8008b98 <_svfiprintf_r+0x1d8>
 8008b26:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <_svfiprintf_r+0x1f4>)
 8008b28:	bb1b      	cbnz	r3, 8008b72 <_svfiprintf_r+0x1b2>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	3307      	adds	r3, #7
 8008b2e:	f023 0307 	bic.w	r3, r3, #7
 8008b32:	3308      	adds	r3, #8
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b38:	4433      	add	r3, r6
 8008b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3c:	e767      	b.n	8008a0e <_svfiprintf_r+0x4e>
 8008b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b42:	460c      	mov	r4, r1
 8008b44:	2001      	movs	r0, #1
 8008b46:	e7a5      	b.n	8008a94 <_svfiprintf_r+0xd4>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	3401      	adds	r4, #1
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f04f 0c0a 	mov.w	ip, #10
 8008b54:	4620      	mov	r0, r4
 8008b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5a:	3a30      	subs	r2, #48	; 0x30
 8008b5c:	2a09      	cmp	r2, #9
 8008b5e:	d903      	bls.n	8008b68 <_svfiprintf_r+0x1a8>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0c5      	beq.n	8008af0 <_svfiprintf_r+0x130>
 8008b64:	9105      	str	r1, [sp, #20]
 8008b66:	e7c3      	b.n	8008af0 <_svfiprintf_r+0x130>
 8008b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e7f0      	b.n	8008b54 <_svfiprintf_r+0x194>
 8008b72:	ab03      	add	r3, sp, #12
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <_svfiprintf_r+0x1f8>)
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f3af 8000 	nop.w
 8008b82:	1c42      	adds	r2, r0, #1
 8008b84:	4606      	mov	r6, r0
 8008b86:	d1d6      	bne.n	8008b36 <_svfiprintf_r+0x176>
 8008b88:	89ab      	ldrh	r3, [r5, #12]
 8008b8a:	065b      	lsls	r3, r3, #25
 8008b8c:	f53f af2c 	bmi.w	80089e8 <_svfiprintf_r+0x28>
 8008b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b92:	b01d      	add	sp, #116	; 0x74
 8008b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b98:	ab03      	add	r3, sp, #12
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	462a      	mov	r2, r5
 8008b9e:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <_svfiprintf_r+0x1f8>)
 8008ba0:	a904      	add	r1, sp, #16
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	f000 f87a 	bl	8008c9c <_printf_i>
 8008ba8:	e7eb      	b.n	8008b82 <_svfiprintf_r+0x1c2>
 8008baa:	bf00      	nop
 8008bac:	0800c218 	.word	0x0800c218
 8008bb0:	0800c222 	.word	0x0800c222
 8008bb4:	00000000 	.word	0x00000000
 8008bb8:	08008909 	.word	0x08008909
 8008bbc:	0800c21e 	.word	0x0800c21e

08008bc0 <_printf_common>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	4616      	mov	r6, r2
 8008bc6:	4699      	mov	r9, r3
 8008bc8:	688a      	ldr	r2, [r1, #8]
 8008bca:	690b      	ldr	r3, [r1, #16]
 8008bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	bfb8      	it	lt
 8008bd4:	4613      	movlt	r3, r2
 8008bd6:	6033      	str	r3, [r6, #0]
 8008bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bdc:	4607      	mov	r7, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	b10a      	cbz	r2, 8008be6 <_printf_common+0x26>
 8008be2:	3301      	adds	r3, #1
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	0699      	lsls	r1, r3, #26
 8008bea:	bf42      	ittt	mi
 8008bec:	6833      	ldrmi	r3, [r6, #0]
 8008bee:	3302      	addmi	r3, #2
 8008bf0:	6033      	strmi	r3, [r6, #0]
 8008bf2:	6825      	ldr	r5, [r4, #0]
 8008bf4:	f015 0506 	ands.w	r5, r5, #6
 8008bf8:	d106      	bne.n	8008c08 <_printf_common+0x48>
 8008bfa:	f104 0a19 	add.w	sl, r4, #25
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	6832      	ldr	r2, [r6, #0]
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	dc26      	bgt.n	8008c56 <_printf_common+0x96>
 8008c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c0c:	1e13      	subs	r3, r2, #0
 8008c0e:	6822      	ldr	r2, [r4, #0]
 8008c10:	bf18      	it	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	0692      	lsls	r2, r2, #26
 8008c16:	d42b      	bmi.n	8008c70 <_printf_common+0xb0>
 8008c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4638      	mov	r0, r7
 8008c20:	47c0      	blx	r8
 8008c22:	3001      	adds	r0, #1
 8008c24:	d01e      	beq.n	8008c64 <_printf_common+0xa4>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	68e5      	ldr	r5, [r4, #12]
 8008c2a:	6832      	ldr	r2, [r6, #0]
 8008c2c:	f003 0306 	and.w	r3, r3, #6
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	bf08      	it	eq
 8008c34:	1aad      	subeq	r5, r5, r2
 8008c36:	68a3      	ldr	r3, [r4, #8]
 8008c38:	6922      	ldr	r2, [r4, #16]
 8008c3a:	bf0c      	ite	eq
 8008c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c40:	2500      	movne	r5, #0
 8008c42:	4293      	cmp	r3, r2
 8008c44:	bfc4      	itt	gt
 8008c46:	1a9b      	subgt	r3, r3, r2
 8008c48:	18ed      	addgt	r5, r5, r3
 8008c4a:	2600      	movs	r6, #0
 8008c4c:	341a      	adds	r4, #26
 8008c4e:	42b5      	cmp	r5, r6
 8008c50:	d11a      	bne.n	8008c88 <_printf_common+0xc8>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e008      	b.n	8008c68 <_printf_common+0xa8>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4652      	mov	r2, sl
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	47c0      	blx	r8
 8008c60:	3001      	adds	r0, #1
 8008c62:	d103      	bne.n	8008c6c <_printf_common+0xac>
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6c:	3501      	adds	r5, #1
 8008c6e:	e7c6      	b.n	8008bfe <_printf_common+0x3e>
 8008c70:	18e1      	adds	r1, r4, r3
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	2030      	movs	r0, #48	; 0x30
 8008c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c7a:	4422      	add	r2, r4
 8008c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c84:	3302      	adds	r3, #2
 8008c86:	e7c7      	b.n	8008c18 <_printf_common+0x58>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	4638      	mov	r0, r7
 8008c90:	47c0      	blx	r8
 8008c92:	3001      	adds	r0, #1
 8008c94:	d0e6      	beq.n	8008c64 <_printf_common+0xa4>
 8008c96:	3601      	adds	r6, #1
 8008c98:	e7d9      	b.n	8008c4e <_printf_common+0x8e>
	...

08008c9c <_printf_i>:
 8008c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	4691      	mov	r9, r2
 8008ca4:	7e27      	ldrb	r7, [r4, #24]
 8008ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ca8:	2f78      	cmp	r7, #120	; 0x78
 8008caa:	4680      	mov	r8, r0
 8008cac:	469a      	mov	sl, r3
 8008cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cb2:	d807      	bhi.n	8008cc4 <_printf_i+0x28>
 8008cb4:	2f62      	cmp	r7, #98	; 0x62
 8008cb6:	d80a      	bhi.n	8008cce <_printf_i+0x32>
 8008cb8:	2f00      	cmp	r7, #0
 8008cba:	f000 80d8 	beq.w	8008e6e <_printf_i+0x1d2>
 8008cbe:	2f58      	cmp	r7, #88	; 0x58
 8008cc0:	f000 80a3 	beq.w	8008e0a <_printf_i+0x16e>
 8008cc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ccc:	e03a      	b.n	8008d44 <_printf_i+0xa8>
 8008cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cd2:	2b15      	cmp	r3, #21
 8008cd4:	d8f6      	bhi.n	8008cc4 <_printf_i+0x28>
 8008cd6:	a001      	add	r0, pc, #4	; (adr r0, 8008cdc <_printf_i+0x40>)
 8008cd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cdc:	08008d35 	.word	0x08008d35
 8008ce0:	08008d49 	.word	0x08008d49
 8008ce4:	08008cc5 	.word	0x08008cc5
 8008ce8:	08008cc5 	.word	0x08008cc5
 8008cec:	08008cc5 	.word	0x08008cc5
 8008cf0:	08008cc5 	.word	0x08008cc5
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008cc5 	.word	0x08008cc5
 8008cfc:	08008cc5 	.word	0x08008cc5
 8008d00:	08008cc5 	.word	0x08008cc5
 8008d04:	08008cc5 	.word	0x08008cc5
 8008d08:	08008e55 	.word	0x08008e55
 8008d0c:	08008d79 	.word	0x08008d79
 8008d10:	08008e37 	.word	0x08008e37
 8008d14:	08008cc5 	.word	0x08008cc5
 8008d18:	08008cc5 	.word	0x08008cc5
 8008d1c:	08008e77 	.word	0x08008e77
 8008d20:	08008cc5 	.word	0x08008cc5
 8008d24:	08008d79 	.word	0x08008d79
 8008d28:	08008cc5 	.word	0x08008cc5
 8008d2c:	08008cc5 	.word	0x08008cc5
 8008d30:	08008e3f 	.word	0x08008e3f
 8008d34:	680b      	ldr	r3, [r1, #0]
 8008d36:	1d1a      	adds	r2, r3, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	600a      	str	r2, [r1, #0]
 8008d3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d44:	2301      	movs	r3, #1
 8008d46:	e0a3      	b.n	8008e90 <_printf_i+0x1f4>
 8008d48:	6825      	ldr	r5, [r4, #0]
 8008d4a:	6808      	ldr	r0, [r1, #0]
 8008d4c:	062e      	lsls	r6, r5, #24
 8008d4e:	f100 0304 	add.w	r3, r0, #4
 8008d52:	d50a      	bpl.n	8008d6a <_printf_i+0xce>
 8008d54:	6805      	ldr	r5, [r0, #0]
 8008d56:	600b      	str	r3, [r1, #0]
 8008d58:	2d00      	cmp	r5, #0
 8008d5a:	da03      	bge.n	8008d64 <_printf_i+0xc8>
 8008d5c:	232d      	movs	r3, #45	; 0x2d
 8008d5e:	426d      	negs	r5, r5
 8008d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d64:	485e      	ldr	r0, [pc, #376]	; (8008ee0 <_printf_i+0x244>)
 8008d66:	230a      	movs	r3, #10
 8008d68:	e019      	b.n	8008d9e <_printf_i+0x102>
 8008d6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d6e:	6805      	ldr	r5, [r0, #0]
 8008d70:	600b      	str	r3, [r1, #0]
 8008d72:	bf18      	it	ne
 8008d74:	b22d      	sxthne	r5, r5
 8008d76:	e7ef      	b.n	8008d58 <_printf_i+0xbc>
 8008d78:	680b      	ldr	r3, [r1, #0]
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	1d18      	adds	r0, r3, #4
 8008d7e:	6008      	str	r0, [r1, #0]
 8008d80:	0628      	lsls	r0, r5, #24
 8008d82:	d501      	bpl.n	8008d88 <_printf_i+0xec>
 8008d84:	681d      	ldr	r5, [r3, #0]
 8008d86:	e002      	b.n	8008d8e <_printf_i+0xf2>
 8008d88:	0669      	lsls	r1, r5, #25
 8008d8a:	d5fb      	bpl.n	8008d84 <_printf_i+0xe8>
 8008d8c:	881d      	ldrh	r5, [r3, #0]
 8008d8e:	4854      	ldr	r0, [pc, #336]	; (8008ee0 <_printf_i+0x244>)
 8008d90:	2f6f      	cmp	r7, #111	; 0x6f
 8008d92:	bf0c      	ite	eq
 8008d94:	2308      	moveq	r3, #8
 8008d96:	230a      	movne	r3, #10
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d9e:	6866      	ldr	r6, [r4, #4]
 8008da0:	60a6      	str	r6, [r4, #8]
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	bfa2      	ittt	ge
 8008da6:	6821      	ldrge	r1, [r4, #0]
 8008da8:	f021 0104 	bicge.w	r1, r1, #4
 8008dac:	6021      	strge	r1, [r4, #0]
 8008dae:	b90d      	cbnz	r5, 8008db4 <_printf_i+0x118>
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	d04d      	beq.n	8008e50 <_printf_i+0x1b4>
 8008db4:	4616      	mov	r6, r2
 8008db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dba:	fb03 5711 	mls	r7, r3, r1, r5
 8008dbe:	5dc7      	ldrb	r7, [r0, r7]
 8008dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc4:	462f      	mov	r7, r5
 8008dc6:	42bb      	cmp	r3, r7
 8008dc8:	460d      	mov	r5, r1
 8008dca:	d9f4      	bls.n	8008db6 <_printf_i+0x11a>
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d10b      	bne.n	8008de8 <_printf_i+0x14c>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	07df      	lsls	r7, r3, #31
 8008dd4:	d508      	bpl.n	8008de8 <_printf_i+0x14c>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	bfde      	ittt	le
 8008dde:	2330      	movle	r3, #48	; 0x30
 8008de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008de8:	1b92      	subs	r2, r2, r6
 8008dea:	6122      	str	r2, [r4, #16]
 8008dec:	f8cd a000 	str.w	sl, [sp]
 8008df0:	464b      	mov	r3, r9
 8008df2:	aa03      	add	r2, sp, #12
 8008df4:	4621      	mov	r1, r4
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7ff fee2 	bl	8008bc0 <_printf_common>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d14c      	bne.n	8008e9a <_printf_i+0x1fe>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
 8008e04:	b004      	add	sp, #16
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	4835      	ldr	r0, [pc, #212]	; (8008ee0 <_printf_i+0x244>)
 8008e0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	680e      	ldr	r6, [r1, #0]
 8008e14:	061f      	lsls	r7, r3, #24
 8008e16:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e1a:	600e      	str	r6, [r1, #0]
 8008e1c:	d514      	bpl.n	8008e48 <_printf_i+0x1ac>
 8008e1e:	07d9      	lsls	r1, r3, #31
 8008e20:	bf44      	itt	mi
 8008e22:	f043 0320 	orrmi.w	r3, r3, #32
 8008e26:	6023      	strmi	r3, [r4, #0]
 8008e28:	b91d      	cbnz	r5, 8008e32 <_printf_i+0x196>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	f023 0320 	bic.w	r3, r3, #32
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	2310      	movs	r3, #16
 8008e34:	e7b0      	b.n	8008d98 <_printf_i+0xfc>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	f043 0320 	orr.w	r3, r3, #32
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	2378      	movs	r3, #120	; 0x78
 8008e40:	4828      	ldr	r0, [pc, #160]	; (8008ee4 <_printf_i+0x248>)
 8008e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e46:	e7e3      	b.n	8008e10 <_printf_i+0x174>
 8008e48:	065e      	lsls	r6, r3, #25
 8008e4a:	bf48      	it	mi
 8008e4c:	b2ad      	uxthmi	r5, r5
 8008e4e:	e7e6      	b.n	8008e1e <_printf_i+0x182>
 8008e50:	4616      	mov	r6, r2
 8008e52:	e7bb      	b.n	8008dcc <_printf_i+0x130>
 8008e54:	680b      	ldr	r3, [r1, #0]
 8008e56:	6826      	ldr	r6, [r4, #0]
 8008e58:	6960      	ldr	r0, [r4, #20]
 8008e5a:	1d1d      	adds	r5, r3, #4
 8008e5c:	600d      	str	r5, [r1, #0]
 8008e5e:	0635      	lsls	r5, r6, #24
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	d501      	bpl.n	8008e68 <_printf_i+0x1cc>
 8008e64:	6018      	str	r0, [r3, #0]
 8008e66:	e002      	b.n	8008e6e <_printf_i+0x1d2>
 8008e68:	0671      	lsls	r1, r6, #25
 8008e6a:	d5fb      	bpl.n	8008e64 <_printf_i+0x1c8>
 8008e6c:	8018      	strh	r0, [r3, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	4616      	mov	r6, r2
 8008e74:	e7ba      	b.n	8008dec <_printf_i+0x150>
 8008e76:	680b      	ldr	r3, [r1, #0]
 8008e78:	1d1a      	adds	r2, r3, #4
 8008e7a:	600a      	str	r2, [r1, #0]
 8008e7c:	681e      	ldr	r6, [r3, #0]
 8008e7e:	6862      	ldr	r2, [r4, #4]
 8008e80:	2100      	movs	r1, #0
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7f7 f9a4 	bl	80001d0 <memchr>
 8008e88:	b108      	cbz	r0, 8008e8e <_printf_i+0x1f2>
 8008e8a:	1b80      	subs	r0, r0, r6
 8008e8c:	6060      	str	r0, [r4, #4]
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	6123      	str	r3, [r4, #16]
 8008e92:	2300      	movs	r3, #0
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	e7a8      	b.n	8008dec <_printf_i+0x150>
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	47d0      	blx	sl
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d0ab      	beq.n	8008e00 <_printf_i+0x164>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	079b      	lsls	r3, r3, #30
 8008eac:	d413      	bmi.n	8008ed6 <_printf_i+0x23a>
 8008eae:	68e0      	ldr	r0, [r4, #12]
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	4298      	cmp	r0, r3
 8008eb4:	bfb8      	it	lt
 8008eb6:	4618      	movlt	r0, r3
 8008eb8:	e7a4      	b.n	8008e04 <_printf_i+0x168>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	47d0      	blx	sl
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d09b      	beq.n	8008e00 <_printf_i+0x164>
 8008ec8:	3501      	adds	r5, #1
 8008eca:	68e3      	ldr	r3, [r4, #12]
 8008ecc:	9903      	ldr	r1, [sp, #12]
 8008ece:	1a5b      	subs	r3, r3, r1
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dcf2      	bgt.n	8008eba <_printf_i+0x21e>
 8008ed4:	e7eb      	b.n	8008eae <_printf_i+0x212>
 8008ed6:	2500      	movs	r5, #0
 8008ed8:	f104 0619 	add.w	r6, r4, #25
 8008edc:	e7f5      	b.n	8008eca <_printf_i+0x22e>
 8008ede:	bf00      	nop
 8008ee0:	0800c229 	.word	0x0800c229
 8008ee4:	0800c23a 	.word	0x0800c23a

08008ee8 <_sbrk_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	; (8008f04 <_sbrk_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f9 fe92 	bl	8002c1c <_sbrk>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_sbrk_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_sbrk_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	2000045c 	.word	0x2000045c

08008f08 <__sread>:
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f10:	f000 f8ee 	bl	80090f0 <_read_r>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	bfab      	itete	ge
 8008f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f1c:	181b      	addge	r3, r3, r0
 8008f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f22:	bfac      	ite	ge
 8008f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f26:	81a3      	strhlt	r3, [r4, #12]
 8008f28:	bd10      	pop	{r4, pc}

08008f2a <__swrite>:
 8008f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2e:	461f      	mov	r7, r3
 8008f30:	898b      	ldrh	r3, [r1, #12]
 8008f32:	05db      	lsls	r3, r3, #23
 8008f34:	4605      	mov	r5, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	4616      	mov	r6, r2
 8008f3a:	d505      	bpl.n	8008f48 <__swrite+0x1e>
 8008f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f40:	2302      	movs	r3, #2
 8008f42:	2200      	movs	r2, #0
 8008f44:	f000 f868 	bl	8009018 <_lseek_r>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f52:	81a3      	strh	r3, [r4, #12]
 8008f54:	4632      	mov	r2, r6
 8008f56:	463b      	mov	r3, r7
 8008f58:	4628      	mov	r0, r5
 8008f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5e:	f000 b817 	b.w	8008f90 <_write_r>

08008f62 <__sseek>:
 8008f62:	b510      	push	{r4, lr}
 8008f64:	460c      	mov	r4, r1
 8008f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6a:	f000 f855 	bl	8009018 <_lseek_r>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	bf15      	itete	ne
 8008f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f7e:	81a3      	strheq	r3, [r4, #12]
 8008f80:	bf18      	it	ne
 8008f82:	81a3      	strhne	r3, [r4, #12]
 8008f84:	bd10      	pop	{r4, pc}

08008f86 <__sclose>:
 8008f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8a:	f000 b813 	b.w	8008fb4 <_close_r>
	...

08008f90 <_write_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	4d07      	ldr	r5, [pc, #28]	; (8008fb0 <_write_r+0x20>)
 8008f94:	4604      	mov	r4, r0
 8008f96:	4608      	mov	r0, r1
 8008f98:	4611      	mov	r1, r2
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	602a      	str	r2, [r5, #0]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f7f9 fdeb 	bl	8002b7a <_write>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_write_r+0x1e>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_write_r+0x1e>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	2000045c 	.word	0x2000045c

08008fb4 <_close_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4d06      	ldr	r5, [pc, #24]	; (8008fd0 <_close_r+0x1c>)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	602b      	str	r3, [r5, #0]
 8008fc0:	f7f9 fdf7 	bl	8002bb2 <_close>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d102      	bne.n	8008fce <_close_r+0x1a>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	b103      	cbz	r3, 8008fce <_close_r+0x1a>
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	bd38      	pop	{r3, r4, r5, pc}
 8008fd0:	2000045c 	.word	0x2000045c

08008fd4 <_fstat_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d07      	ldr	r5, [pc, #28]	; (8008ff4 <_fstat_r+0x20>)
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4604      	mov	r4, r0
 8008fdc:	4608      	mov	r0, r1
 8008fde:	4611      	mov	r1, r2
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	f7f9 fdf2 	bl	8002bca <_fstat>
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	d102      	bne.n	8008ff0 <_fstat_r+0x1c>
 8008fea:	682b      	ldr	r3, [r5, #0]
 8008fec:	b103      	cbz	r3, 8008ff0 <_fstat_r+0x1c>
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
 8008ff2:	bf00      	nop
 8008ff4:	2000045c 	.word	0x2000045c

08008ff8 <_isatty_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d06      	ldr	r5, [pc, #24]	; (8009014 <_isatty_r+0x1c>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	f7f9 fdf1 	bl	8002bea <_isatty>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_isatty_r+0x1a>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_isatty_r+0x1a>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	2000045c 	.word	0x2000045c

08009018 <_lseek_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4d07      	ldr	r5, [pc, #28]	; (8009038 <_lseek_r+0x20>)
 800901c:	4604      	mov	r4, r0
 800901e:	4608      	mov	r0, r1
 8009020:	4611      	mov	r1, r2
 8009022:	2200      	movs	r2, #0
 8009024:	602a      	str	r2, [r5, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	f7f9 fdea 	bl	8002c00 <_lseek>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_lseek_r+0x1e>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_lseek_r+0x1e>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	2000045c 	.word	0x2000045c

0800903c <memcpy>:
 800903c:	440a      	add	r2, r1
 800903e:	4291      	cmp	r1, r2
 8009040:	f100 33ff 	add.w	r3, r0, #4294967295
 8009044:	d100      	bne.n	8009048 <memcpy+0xc>
 8009046:	4770      	bx	lr
 8009048:	b510      	push	{r4, lr}
 800904a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009052:	4291      	cmp	r1, r2
 8009054:	d1f9      	bne.n	800904a <memcpy+0xe>
 8009056:	bd10      	pop	{r4, pc}

08009058 <memmove>:
 8009058:	4288      	cmp	r0, r1
 800905a:	b510      	push	{r4, lr}
 800905c:	eb01 0402 	add.w	r4, r1, r2
 8009060:	d902      	bls.n	8009068 <memmove+0x10>
 8009062:	4284      	cmp	r4, r0
 8009064:	4623      	mov	r3, r4
 8009066:	d807      	bhi.n	8009078 <memmove+0x20>
 8009068:	1e43      	subs	r3, r0, #1
 800906a:	42a1      	cmp	r1, r4
 800906c:	d008      	beq.n	8009080 <memmove+0x28>
 800906e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009076:	e7f8      	b.n	800906a <memmove+0x12>
 8009078:	4402      	add	r2, r0
 800907a:	4601      	mov	r1, r0
 800907c:	428a      	cmp	r2, r1
 800907e:	d100      	bne.n	8009082 <memmove+0x2a>
 8009080:	bd10      	pop	{r4, pc}
 8009082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800908a:	e7f7      	b.n	800907c <memmove+0x24>

0800908c <__malloc_lock>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__malloc_lock+0x8>)
 800908e:	f7ff bb2b 	b.w	80086e8 <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	20000454 	.word	0x20000454

08009098 <__malloc_unlock>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__malloc_unlock+0x8>)
 800909a:	f7ff bb26 	b.w	80086ea <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	20000454 	.word	0x20000454

080090a4 <_realloc_r>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	4607      	mov	r7, r0
 80090a8:	4614      	mov	r4, r2
 80090aa:	460e      	mov	r6, r1
 80090ac:	b921      	cbnz	r1, 80090b8 <_realloc_r+0x14>
 80090ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090b2:	4611      	mov	r1, r2
 80090b4:	f7ff bbce 	b.w	8008854 <_malloc_r>
 80090b8:	b922      	cbnz	r2, 80090c4 <_realloc_r+0x20>
 80090ba:	f7ff fb7b 	bl	80087b4 <_free_r>
 80090be:	4625      	mov	r5, r4
 80090c0:	4628      	mov	r0, r5
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c4:	f000 f826 	bl	8009114 <_malloc_usable_size_r>
 80090c8:	42a0      	cmp	r0, r4
 80090ca:	d20f      	bcs.n	80090ec <_realloc_r+0x48>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4638      	mov	r0, r7
 80090d0:	f7ff fbc0 	bl	8008854 <_malloc_r>
 80090d4:	4605      	mov	r5, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d0f2      	beq.n	80090c0 <_realloc_r+0x1c>
 80090da:	4631      	mov	r1, r6
 80090dc:	4622      	mov	r2, r4
 80090de:	f7ff ffad 	bl	800903c <memcpy>
 80090e2:	4631      	mov	r1, r6
 80090e4:	4638      	mov	r0, r7
 80090e6:	f7ff fb65 	bl	80087b4 <_free_r>
 80090ea:	e7e9      	b.n	80090c0 <_realloc_r+0x1c>
 80090ec:	4635      	mov	r5, r6
 80090ee:	e7e7      	b.n	80090c0 <_realloc_r+0x1c>

080090f0 <_read_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d07      	ldr	r5, [pc, #28]	; (8009110 <_read_r+0x20>)
 80090f4:	4604      	mov	r4, r0
 80090f6:	4608      	mov	r0, r1
 80090f8:	4611      	mov	r1, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	602a      	str	r2, [r5, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	f7f9 fd1e 	bl	8002b40 <_read>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_read_r+0x1e>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	b103      	cbz	r3, 800910e <_read_r+0x1e>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	2000045c 	.word	0x2000045c

08009114 <_malloc_usable_size_r>:
 8009114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009118:	1f18      	subs	r0, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	bfbc      	itt	lt
 800911e:	580b      	ldrlt	r3, [r1, r0]
 8009120:	18c0      	addlt	r0, r0, r3
 8009122:	4770      	bx	lr

08009124 <_init>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr

08009130 <_fini>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr
